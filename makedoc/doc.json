{
	"id": 0,
	"name": "@arjunatlast/jsds",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 881,
			"name": "AbstractBinaryTree",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true,
				"isAbstract": true
			},
			"comment": {
				"shortText": "Abstract Implementation of binary tree. (Note: This class cannot be used to initialize objects.)"
			},
			"typeParameter": [
				{
					"id": 882,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 884,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 885,
							"name": "new AbstractBinaryTree",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 886,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractBinaryTree",
								"id": 881
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 26,
							"character": 41
						}
					]
				},
				{
					"id": 883,
					"name": "_root",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 26,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 869,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 890,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 891,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an item from the binary tree."
							},
							"parameters": [
								{
									"id": 892,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "BinaryTree.delete",
								"id": 759
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 40,
							"character": 17
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.delete",
						"id": 758
					}
				},
				{
					"id": 893,
					"name": "height",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 894,
							"name": "height",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the height of this binary tree.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  bt.height();// returns a number.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 895,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 47,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.height",
						"id": 761
					}
				},
				{
					"id": 896,
					"name": "inorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 897,
							"name": "inorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after inorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.inorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 898,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 58,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.inorder",
						"id": 763
					}
				},
				{
					"id": 887,
					"name": "insert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 888,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert a new item to the binary tree."
							},
							"parameters": [
								{
									"id": 889,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "BinaryTree.insert",
								"id": 756
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 35,
							"character": 17
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.insert",
						"id": 755
					}
				},
				{
					"id": 902,
					"name": "postorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 903,
							"name": "postorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after postorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.postorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 904,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 88,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.postorder",
						"id": 767
					}
				},
				{
					"id": 899,
					"name": "preorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 900,
							"name": "preorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after preorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.preorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 901,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 73,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.preorder",
						"id": 765
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						884
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						883
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						890,
						893,
						896,
						887,
						902,
						899
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-binary-tree.ts",
					"line": 25,
					"character": 40
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "BinarySearchTree",
					"id": 2683
				},
				{
					"type": "reference",
					"name": "Rope",
					"id": 2762
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "BinaryTree",
					"id": 753,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 170,
			"name": "AbstractCollection",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An abstract implementation of Collection interface"
			},
			"typeParameter": [
				{
					"id": 171,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 173,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 174,
							"name": "new AbstractCollection",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 175,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractCollection",
								"id": 170
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 28
						}
					]
				},
				{
					"id": 172,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "typeParameter",
							"name": "T"
						}
					},
					"defaultValue": " []"
				},
				{
					"id": 176,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 177,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add an item to this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.add(5);\n  //now collection contains [1,2,3,4,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 178,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.add",
								"id": 121
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 21,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.add",
						"id": 120
					}
				},
				{
					"id": 179,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 180,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all items of an array to this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4,5]\n  collection.addAll([6,7]);\n  //now collection contains [1,2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 181,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.addAll",
								"id": 124
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 32,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.addAll",
						"id": 123
					}
				},
				{
					"id": 182,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 183,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.clear",
								"id": 127
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.clear",
						"id": 126
					}
				},
				{
					"id": 184,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 185,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 186,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.contains",
								"id": 129
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.contains",
						"id": 128
					}
				},
				{
					"id": 187,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 188,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 189,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.containsAll",
								"id": 132
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.containsAll",
						"id": 131
					}
				},
				{
					"id": 190,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 191,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 192,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.equals",
								"id": 135
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.equals",
						"id": 134
					}
				},
				{
					"id": 216,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 217,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 218,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 219,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 220,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 221,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														},
														{
															"id": 222,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 223,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.forEach",
						"id": 160
					}
				},
				{
					"id": 193,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 194,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.isEmpty",
								"id": 138
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.isEmpty",
						"id": 137
					}
				},
				{
					"id": 224,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 225,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.iterator",
								"id": 169
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.iterator",
						"id": 168
					}
				},
				{
					"id": 195,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 196,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 197,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.remove",
								"id": 140
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.remove",
						"id": 139
					}
				},
				{
					"id": 198,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 199,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 200,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.removeAll",
								"id": 143
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.removeAll",
						"id": 142
					}
				},
				{
					"id": 201,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 202,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 203,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 204,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 205,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 206,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														},
														{
															"id": 207,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 208,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.removeIf",
						"id": 145
					}
				},
				{
					"id": 209,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 210,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 211,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.retainAll",
								"id": 154
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.retainAll",
						"id": 153
					}
				},
				{
					"id": 212,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 213,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.size",
								"id": 157
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.size",
						"id": 156
					}
				},
				{
					"id": 214,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 215,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "T"
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.toArray",
								"id": 159
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.toArray",
						"id": 158
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						173
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						172
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						176,
						179,
						182,
						184,
						187,
						190,
						216,
						193,
						224,
						195,
						198,
						201,
						209,
						212,
						214
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-collection.ts",
					"line": 7,
					"character": 31
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "AbstractSet",
					"id": 290
				},
				{
					"type": "reference",
					"name": "AbstractList",
					"id": 769
				},
				{
					"type": "reference",
					"name": "AbstractQueue",
					"id": 1264
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "T"
						}
					]
				}
			]
		},
		{
			"id": 1163,
			"name": "AbstractGraph",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Abstract implementation of graph interface"
			},
			"typeParameter": [
				{
					"id": 1164,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1168,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1169,
							"name": "new AbstractGraph",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "AbstractGraph",
								"id": 1163
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 14,
							"character": 50
						}
					]
				},
				{
					"id": 1167,
					"name": "_adjList",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 14,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Map",
						"id": 910,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Vertex",
								"id": 1006,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							{
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Edge",
										"id": 1012,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							}
						]
					}
				},
				{
					"id": 1166,
					"name": "_edges",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 13,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Set",
						"id": 226,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Edge",
								"id": 1012,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						]
					}
				},
				{
					"id": 1165,
					"name": "_vertices",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 12,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"name": "Set",
						"id": 226,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Vertex",
								"id": 1006,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						]
					}
				},
				{
					"id": 1170,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1171,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add a new vertex with the specified label to this graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.add(25);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1172,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.add",
								"id": 1023
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 28,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.add",
						"id": 1022
					}
				},
				{
					"id": 1173,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1174,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add new vertices with the labels present in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.addAll([25,22,11,43]);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1175,
									"name": "labels",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.addAll",
								"id": 1026
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 38,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.addAll",
						"id": 1025
					}
				},
				{
					"id": 1192,
					"name": "addEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1193,
							"name": "addEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add the specified edge to the graph. The start and end vertices are added automatically to the graph if not present.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, e:Edge<number>\n  g.addEdge(e);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1194,
									"name": "edge",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Edge",
										"id": 1012,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.addEdge",
								"id": 1045
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 117,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.addEdge",
						"id": 1044
					}
				},
				{
					"id": 1176,
					"name": "addVertex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1177,
							"name": "addVertex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add the specified vertex to the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, v:Vertex<number>\n  g.addVertex(v);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1178,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.addVertex",
								"id": 1029
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 48,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.addVertex",
						"id": 1028
					}
				},
				{
					"id": 1179,
					"name": "addVertices",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1180,
							"name": "addVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all vertices in the specified array to the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, a,b,c,d:Vertex<number>\n  g.addVertices([a,b,c,d]);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1181,
									"name": "vertices",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Vertex",
											"id": 1006,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "E"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.addVertices",
								"id": 1032
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 58,
							"character": 13
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.addVertices",
						"id": 1031
					}
				},
				{
					"id": 1202,
					"name": "adjacentEdges",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1203,
							"name": "adjacentEdges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of edges starting from specified vertex.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, v:Vertex<number>\n  g.adjacentEdges(v);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1204,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Edge",
												"id": 1012,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.adjacentEdges",
								"id": 1055
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 160,
							"character": 15
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.adjacentEdges",
						"id": 1054
					}
				},
				{
					"id": 1205,
					"name": "adjacentVertices",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1206,
							"name": "adjacentVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of vertices adjacent to the specified vertex.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, v:Vertex<number>\n  g.adjacentVertices(v);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1207,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Vertex",
												"id": 1006,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.adjacentVertices",
								"id": 1058
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 170,
							"character": 18
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.adjacentVertices",
						"id": 1057
					}
				},
				{
					"id": 1188,
					"name": "createEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1189,
							"name": "createEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create vertices from the given labels and an edge connecting them and add it to the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.createEdge(25,26);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1190,
									"name": "startLabel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1191,
									"name": "endLabel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.createEdge",
								"id": 1041
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 105,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.createEdge",
						"id": 1040
					}
				},
				{
					"id": 1200,
					"name": "edgeSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1201,
							"name": "edgeSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of edges present in the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.edgeSet();\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Edge",
										"id": 1012,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.edgeSet",
								"id": 1053
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 151,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.edgeSet",
						"id": 1052
					}
				},
				{
					"id": 1182,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1183,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove a single vertex with the specified label from the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.remove(25);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1184,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.remove",
								"id": 1035
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 72,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.remove",
						"id": 1034
					}
				},
				{
					"id": 1195,
					"name": "removeEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1196,
							"name": "removeEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove the specified edge from the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, e:Edge<number>\n  g.removeEdge(e);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1197,
									"name": "edge",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Edge",
										"id": 1012,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.removeEdge",
								"id": 1048
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 128,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.removeEdge",
						"id": 1047
					}
				},
				{
					"id": 1185,
					"name": "removeVertex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1186,
							"name": "removeVertex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove the specified vertex from the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, v:Vertex<number>\n  g.removeVertex(v);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1187,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.removeVertex",
								"id": 1038
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 89,
							"character": 14
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.removeVertex",
						"id": 1037
					}
				},
				{
					"id": 1198,
					"name": "vertexSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1199,
							"name": "vertexSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of vertices present in the graph.(a copy of the set is returned).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.vertexSet();\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.vertexSet",
								"id": 1051
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 142,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.vertexSet",
						"id": 1050
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1168
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1167,
						1166,
						1165
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1170,
						1173,
						1192,
						1176,
						1179,
						1202,
						1205,
						1188,
						1200,
						1182,
						1195,
						1185,
						1198
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-graph.ts",
					"line": 11,
					"character": 26
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "DiGraph",
					"id": 1913
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Graph",
					"id": 1020,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 84,
			"name": "AbstractImmutableCollection",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true,
				"isAbstract": true
			},
			"comment": {
				"shortText": "Abstract Implementation of ImmutableCollection Interface"
			},
			"typeParameter": [
				{
					"id": 85,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 87,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 88,
							"name": "new AbstractImmutableCollection",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 89,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractImmutableCollection",
								"id": 84
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-immutable-collection.ts",
							"line": 8,
							"character": 48
						}
					]
				},
				{
					"id": 86,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-immutable-collection.ts",
							"line": 8,
							"character": 29
						}
					],
					"type": {
						"type": "reference",
						"name": "ReadonlyArray",
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "E"
							}
						]
					}
				},
				{
					"id": 90,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 91,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 92,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "ImmutableCollection.contains",
								"id": 77
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-immutable-collection.ts",
							"line": 21,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "ImmutableCollection.contains",
						"id": 76
					}
				},
				{
					"id": 93,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 94,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 95,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "ImmutableCollection.containsAll",
								"id": 80
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-immutable-collection.ts",
							"line": 31,
							"character": 15
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "ImmutableCollection.containsAll",
						"id": 79
					}
				},
				{
					"id": 96,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 97,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the size of the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "ImmutableCollection.size",
								"id": 83
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-immutable-collection.ts",
							"line": 44,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "ImmutableCollection.size",
						"id": 82
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						87
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						86
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						90,
						93,
						96
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-immutable-collection.ts",
					"line": 6,
					"character": 49
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "Tuple",
					"id": 98
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "ImmutableCollection",
					"id": 74,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 769,
			"name": "AbstractList",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An abstract implementation of List interface"
			},
			"typeParameter": [
				{
					"id": 770,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 771,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 772,
							"name": "new AbstractList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 773,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractList",
								"id": 769
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.__constructor",
								"id": 173
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 8,
							"character": 78
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.__constructor",
						"id": 173
					}
				},
				{
					"id": 824,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "typeParameter",
							"name": "E"
						}
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 172
					}
				},
				{
					"id": 774,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 775,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends the specified element to the end of this list"
							},
							"parameters": [
								{
									"id": 776,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 176
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 664
							}
						},
						{
							"id": 777,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts the specified element at the specified position in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  list.add(4); //[1,2,3,4]\n  list.add(2.5,2); //[1,2,2.5,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 778,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 779,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 176
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 666
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 17,
							"character": 5
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 25,
							"character": 5
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 26,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.add",
						"id": 176
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.add",
						"id": 663
					}
				},
				{
					"id": 780,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 781,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends all of the elements in the specified array to the end of this list"
							},
							"parameters": [
								{
									"id": 782,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 179
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 670
							}
						},
						{
							"id": 783,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts all of the elements in the specified array into this list at the specified position.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  list.addAll([4,5]); //[1,2,3,4,5]\n  list.addAll([2.1,2.2,2.3], 2); //[1,2,2.1,2.2,2.3,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 784,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								},
								{
									"id": 785,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 179
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 672
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 38,
							"character": 8
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 46,
							"character": 8
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 47,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.addAll",
						"id": 179
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.addAll",
						"id": 669
					}
				},
				{
					"id": 825,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 826,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 182
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.clear",
								"id": 710
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 182
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.clear",
						"id": 709
					}
				},
				{
					"id": 827,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 828,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 829,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 184
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.contains",
								"id": 712
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 184
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.contains",
						"id": 711
					}
				},
				{
					"id": 830,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 831,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 832,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 187
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.containsAll",
								"id": 715
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 187
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.containsAll",
						"id": 714
					}
				},
				{
					"id": 833,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 834,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 835,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 190
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.equals",
								"id": 718
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 190
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.equals",
						"id": 717
					}
				},
				{
					"id": 859,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 860,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 861,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 862,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 863,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 864,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 865,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 866,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 216
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 216
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.forEach",
						"id": 743
					}
				},
				{
					"id": 786,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 787,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an item from the list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.get(2));\n  //Output: 3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 788,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.get",
								"id": 676
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 63,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.get",
						"id": 675
					}
				},
				{
					"id": 789,
					"name": "indexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 790,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,2,4]\n  console.log(list.indexOf(2));\n  //Output: 1\n"
									}
								]
							},
							"parameters": [
								{
									"id": 791,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.indexOf",
								"id": 679
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 74,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.indexOf",
						"id": 678
					}
				},
				{
					"id": 836,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 837,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 193
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.isEmpty",
								"id": 721
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 193
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.isEmpty",
						"id": 720
					}
				},
				{
					"id": 867,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 868,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 224
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.iterator",
								"id": 752
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 224
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.iterator",
						"id": 751
					}
				},
				{
					"id": 792,
					"name": "lastIndexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 793,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of last occurrence of the element.\n  //list contains [1,2,3,2,4]\n  console.log(list.lastIndexOf(2));\n  //Output: 3"
							},
							"parameters": [
								{
									"id": 794,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.lastIndexOf",
								"id": 682
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 84,
							"character": 13
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.lastIndexOf",
						"id": 681
					}
				},
				{
					"id": 795,
					"name": "listIterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 796,
							"name": "listIterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list iterator over the elements in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var listIterator = list.listIterator(); //starts at index 0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 797,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.listIterator",
								"id": 685
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 93,
							"character": 14
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.listIterator",
						"id": 684
					}
				},
				{
					"id": 798,
					"name": "median",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 799,
							"name": "median",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the median of this list. If the list is empty returns undefined.\nIn case of two medians the later one is preferred.",
								"tags": [
									{
										"tag": "example",
										"text": "\n //list contains [1, 2, 3, 4]\nlist.median(); //returns 3\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.median",
								"id": 688
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 104,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.median",
						"id": 687
					}
				},
				{
					"id": 838,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 839,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 840,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 195
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.remove",
								"id": 723
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 195
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.remove",
						"id": 722
					}
				},
				{
					"id": 841,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 842,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 843,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 198
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAll",
								"id": 726
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 198
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAll",
						"id": 725
					}
				},
				{
					"id": 800,
					"name": "removeAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 801,
							"name": "removeAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the element at the specified position in this list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.removeAt(1)); //[1,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 802,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAt",
								"id": 690
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 115,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAt",
						"id": 689
					}
				},
				{
					"id": 844,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 845,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 846,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 847,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 848,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 849,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 850,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 851,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 201
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 201
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeIf",
						"id": 728
					}
				},
				{
					"id": 803,
					"name": "removeRange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 804,
							"name": "removeRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5,6]\n  console.log(list.removeRange(1,4)); //[1,5,6]\n  //Output: [2,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 805,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 806,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 126,
							"character": 13
						}
					]
				},
				{
					"id": 852,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 853,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 854,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 209
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.retainAll",
								"id": 737
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 209
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.retainAll",
						"id": 736
					}
				},
				{
					"id": 822,
					"name": "reverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 823,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverse the list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5]\n  list.reverse() //now list contains [5,4,3,2,1]\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.reverse",
								"id": 708
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 173,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.reverse",
						"id": 707
					}
				},
				{
					"id": 807,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 808,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the element at the specified position in this list with the specified element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.set(1,2.5)); //[1,2.5,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 809,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 810,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.set",
								"id": 693
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 137,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.set",
						"id": 692
					}
				},
				{
					"id": 855,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 856,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 212
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.size",
								"id": 740
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 212
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.size",
						"id": 739
					}
				},
				{
					"id": 811,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 812,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts this list according to the compareFn.\ncompareFn is a function which should return a number value (-ve, zero, or +ve).\nx is considered smaller than y if the compareFn(x,y) is negetive",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.sort(function(x,y) {\n    return x-y;\n  }); // [1, 2, 3, 6, 7, 8, 9, 11]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 813,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 814,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 815,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 816,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 817,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-list.ts",
													"line": 152,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 152,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.sort",
						"id": 696
					}
				},
				{
					"id": 818,
					"name": "subList",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 819,
							"name": "subList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.subList(2,7); // returns a list containing [6, 2, 7, 3, 9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 820,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 821,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.subList",
								"id": 704
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 163,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.subList",
						"id": 703
					}
				},
				{
					"id": 857,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 858,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 214
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.toArray",
								"id": 742
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 214
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.toArray",
						"id": 741
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						771
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						824
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						774,
						780,
						825,
						827,
						830,
						833,
						859,
						786,
						789,
						836,
						867,
						792,
						795,
						798,
						838,
						841,
						800,
						844,
						803,
						852,
						822,
						807,
						855,
						811,
						818,
						857
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-list.ts",
					"line": 8,
					"character": 25
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractCollection",
					"id": 170,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "ArrayList",
					"id": 1746
				},
				{
					"type": "reference",
					"name": "SwappableList",
					"id": 2111
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "List",
					"id": 661,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 1060,
			"name": "AbstractMap",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 1061,
					"name": "K",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 1062,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1065,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1066,
							"name": "new AbstractMap",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1067,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "MapEntry",
											"id": 905,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "K"
												},
												{
													"type": "typeParameter",
													"name": "V"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractMap",
								"id": 1060
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 7,
							"character": 34
						}
					]
				},
				{
					"id": 1064,
					"name": "_keys",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 7,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractSet",
						"id": 290,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "K"
							}
						]
					}
				},
				{
					"id": 1063,
					"name": "_values",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 6,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractList",
						"id": 769,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "V"
							}
						]
					}
				},
				{
					"id": 1068,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1069,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the mappings from this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//map: [{\"1\":1},{\"2\":2},{\"3\":3}]\nmap.clear();\n//now : []\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.clear",
								"id": 914
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 21,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.clear",
						"id": 913
					}
				},
				{
					"id": 1070,
					"name": "compute",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1071,
							"name": "compute",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to 12\n  map.compute(k1, (key,value,map)=>(value+11)); //returns 12\n  //now the value changes to 12+11 -> 23\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1072,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1073,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1074,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1075,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1076,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1077,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 1078,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "V"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 32,
													"character": 29
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 32,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.compute",
						"id": 915
					}
				},
				{
					"id": 1079,
					"name": "computeIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1080,
							"name": "computeIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to 12\n  map.computeIfAbsent(k1, (key,value,map)=>(23)); //returns 12\n  //value does not change\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1081,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1082,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1083,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1084,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1085,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1086,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 1087,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "V"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 46,
													"character": 37
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 46,
							"character": 16
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.computeIfAbsent",
						"id": 924
					}
				},
				{
					"id": 1088,
					"name": "computeIfPresent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1089,
							"name": "computeIfPresent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to null\n  map.computeIfAbsent(k1, (key,value,map)=>(value+11)); //returns null\n  //value does not change\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1090,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1091,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1092,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1093,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1094,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1095,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 1096,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "V"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 62,
													"character": 38
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 62,
							"character": 17
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.computeIfPresent",
						"id": 933
					}
				},
				{
					"id": 1097,
					"name": "containsKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1098,
							"name": "containsKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains a mapping for the specified key.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.conainsKey(k1); //returns true\n  map.containsKey(k5); //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1099,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.containsKey",
								"id": 943
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 78,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.containsKey",
						"id": 942
					}
				},
				{
					"id": 1100,
					"name": "containsValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1101,
							"name": "containsValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map maps one or more keys to the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.conainsValue(1); //returns true\n  map.containsValue(5); //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1102,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.containsValue",
								"id": 946
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 89,
							"character": 14
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.containsValue",
						"id": 945
					}
				},
				{
					"id": 1103,
					"name": "entrySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1104,
							"name": "entrySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the mappings contained in this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.entrySet(); //returns Set [{key:k1, value:1},{key:k2, value:2}]\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 290,
								"typeArguments": [
									{
										"type": "reference",
										"name": "MapEntry",
										"id": 905,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.entrySet",
								"id": 949
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 99,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.entrySet",
						"id": 948
					}
				},
				{
					"id": 1105,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1106,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified map with this map for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map1 : [{k1:1},{k2:2},{k3:null}]\n  //map2 : [{k1:1},{k3:4}]\n  map1.equals(map2) //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1107,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.equals",
								"id": 951
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 115,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.equals",
						"id": 950
					}
				},
				{
					"id": 1108,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1109,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.forEach((key, value, map)=>{\n     console.log(key+\"->\"+value+\",\");\n  });\n  //Output: one->1,two->2,three->3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1110,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1111,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1112,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1113,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1114,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 1115,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 137,
													"character": 16
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 137,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.forEach",
						"id": 953
					}
				},
				{
					"id": 1116,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1117,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped. undefined if there is no mapping.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.get(k1); //returns 1\n  map.get(k3); //returns null\n  map.get(k4); //returns undefined\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1118,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.get",
								"id": 962
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 152,
							"character": 4
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.get",
						"id": 961
					}
				},
				{
					"id": 1119,
					"name": "getOrDefault",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1120,
							"name": "getOrDefault",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key or if key is mapped to null.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.getOrDefault(k1,5); //returns 1\n  map.getOrDefault(k3,12); //returns 12\n  map.getOrDefault(k4,16); //returns 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1121,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1122,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "V"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.getOrDefault",
								"id": 965
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 166,
							"character": 13
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.getOrDefault",
						"id": 964
					}
				},
				{
					"id": 1123,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1124,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains no key-value mappings.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.isEmpty(); //false\n  //map : [{k1:null},{k2:null},{k3:null}]\n  map.isEmpty(); //false\n  //map : []\n  map.isEmpty(); //true\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.isEmpty",
								"id": 969
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 180,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.isEmpty",
						"id": 968
					}
				},
				{
					"id": 1125,
					"name": "isNull",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1126,
							"name": "isNull",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains mappings to only null values or if  the map is empty.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.isNull(); //false\n  //map : [{k1:null},{k2:null},{k3:null}]\n  map.isNull(); //true\n  //map : []\n  map.isNull(); //true\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 194,
							"character": 8
						}
					]
				},
				{
					"id": 1127,
					"name": "keySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1128,
							"name": "keySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the keys contained in this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.keySet(); //[\"one\",\"two\",\"three\"]\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 290,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "K"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.keySet",
								"id": 971
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 204,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.keySet",
						"id": 970
					}
				},
				{
					"id": 1129,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1130,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Associates the specified value with the specified key in this map.Returns the old value associated with the key or  undefined.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//map : [{\"one\":1},{\"two\":2},{\"three\":3}]\nmap.put(\"one\",22); //return 1\n//now map : [{\"one\":22},{\"two\":2},{\"three\":3}]\nmap.put(\"four\",4);//return undefined\n//now map : [{\"one\":22},{\"two\":2},{\"three\":3},{\"four\":4}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1131,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1132,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.put",
								"id": 973
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 217,
							"character": 4
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.put",
						"id": 972
					}
				},
				{
					"id": 1133,
					"name": "putAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1134,
							"name": "putAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies all of the mappings from the specified map to this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map1: [{k1:v1},{k2:v2},{k3:v3}], map2: [{k2:v4},{k4:v6},{k6:v8}]\n  map1.putAll(map2);\n  //now map1: [{k1:v1},{k2:v4},{k3:v3},{k4:v6},{k6:v8}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1135,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.putAll",
								"id": 977
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 237,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.putAll",
						"id": 976
					}
				},
				{
					"id": 1136,
					"name": "putIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1137,
							"name": "putIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns undefined, else returns the current value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.putIfAbsent(\"four\",4); //return undefined (adds {\"four\":4} to the map)\n  map.putIfAbsent(\"one\",23); //return 1 (map unchanged)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1138,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1139,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.putIfAbsent",
								"id": 980
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 249,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.putIfAbsent",
						"id": 979
					}
				},
				{
					"id": 1140,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1141,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the mapping for a key from this map if it is present.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.remove(\"one\"); //return 1\n  //now map : [{\"two\":2},{\"three\":3}]\n  map.remove(\"four\"); //return undefined (map unchanged)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1142,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.remove",
								"id": 984
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 263,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.remove",
						"id": 983
					}
				},
				{
					"id": 1143,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1144,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.removeIf(\"one\", 1); //return true\n  //now map : [{\"two\":2},{\"three\":3}]\n  map.removeIf(\"two\",5); //return false (map unchanged)\n  map.removeIf(\"four\",4); //return false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1145,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1146,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.removeIf",
								"id": 987
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 281,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.removeIf",
						"id": 986
					}
				},
				{
					"id": 1147,
					"name": "replace",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1148,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replace all entries with specified value with the new value. Returns true if map was changed.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.replace(5,2) //returns true;\n  //now map : [{k1:1},{k2:2},{k3:3},{k4:2},{k5:1}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1149,
									"name": "oldValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								},
								{
									"id": 1150,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.replace",
								"id": 991
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 293,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.replace",
						"id": 990
					}
				},
				{
					"id": 1151,
					"name": "replaceAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1152,
							"name": "replaceAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.replaceAll((k,v,m)=>(v*2)); //replace with its double\n  //map : [{k1:2},{k2:10},{k3:6},{k4:10},{k5:2}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1153,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1154,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1155,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1156,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1157,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 1158,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "V"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 310,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 310,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.replaceAll",
						"id": 994
					}
				},
				{
					"id": 1159,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1160,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of key-value mappings in this map.(key->null mappings are counted)",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.size(); //return 5\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.size",
								"id": 1003
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 322,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.size",
						"id": 1002
					}
				},
				{
					"id": 1161,
					"name": "values",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1162,
							"name": "values",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a List view of the values contained in this map.\n//map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\nmap.values(); //return list : [1,5,3,5,1]"
							},
							"type": {
								"type": "reference",
								"name": "AbstractList",
								"id": 769,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "V"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.values",
								"id": 1005
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 331,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.values",
						"id": 1004
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1065
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1064,
						1063
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1068,
						1070,
						1079,
						1088,
						1097,
						1100,
						1103,
						1105,
						1108,
						1116,
						1119,
						1123,
						1125,
						1127,
						1129,
						1133,
						1136,
						1140,
						1143,
						1147,
						1151,
						1159,
						1161
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-map.ts",
					"line": 5,
					"character": 24
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "ArrayMap",
					"id": 1570
				},
				{
					"type": "reference",
					"name": "Dictionary",
					"id": 2239
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Map",
					"id": 910,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "K"
						},
						{
							"type": "typeParameter",
							"name": "V"
						}
					]
				}
			]
		},
		{
			"id": 1264,
			"name": "AbstractQueue",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Abstract implementation of Queue interface"
			},
			"typeParameter": [
				{
					"id": 1265,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1271,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1272,
							"name": "new AbstractQueue",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1273,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractQueue",
								"id": 1264
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.__constructor",
								"id": 173
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 28
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.__constructor",
						"id": 173
					}
				},
				{
					"id": 1270,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "typeParameter",
							"name": "E"
						}
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 172
					}
				},
				{
					"id": 1274,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1275,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add an item to this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.add(5);\n  //now collection contains [1,2,3,4,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1276,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 176
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.add",
								"id": 1211
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 21,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.add",
						"id": 176
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.add",
						"id": 1210
					}
				},
				{
					"id": 1277,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1278,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all items of an array to this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4,5]\n  collection.addAll([6,7]);\n  //now collection contains [1,2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1279,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 179
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.addAll",
								"id": 1218
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 32,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.addAll",
						"id": 179
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.addAll",
						"id": 1217
					}
				},
				{
					"id": 1280,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1281,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 182
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.clear",
								"id": 1221
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 182
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.clear",
						"id": 1220
					}
				},
				{
					"id": 1282,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1283,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1284,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 184
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.contains",
								"id": 1223
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 184
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.contains",
						"id": 1222
					}
				},
				{
					"id": 1285,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1286,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1287,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 187
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.containsAll",
								"id": 1226
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 187
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.containsAll",
						"id": 1225
					}
				},
				{
					"id": 1266,
					"name": "element",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1267,
							"name": "element",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves, but does not remove, the head of this queue",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue has elements [1,2,3,4]\n  console.log(queue.element());\n  //Output: 1\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.element",
								"id": 1214
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-queue.ts",
							"line": 15,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Queue.element",
						"id": 1213
					}
				},
				{
					"id": 1288,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1289,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1290,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 190
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.equals",
								"id": 1229
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 190
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.equals",
						"id": 1228
					}
				},
				{
					"id": 1314,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1315,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1316,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1317,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1318,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1319,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1320,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1321,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 216
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 216
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.forEach",
						"id": 1254
					}
				},
				{
					"id": 1291,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1292,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 193
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.isEmpty",
								"id": 1232
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 193
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.isEmpty",
						"id": 1231
					}
				},
				{
					"id": 1322,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1323,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 224
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.iterator",
								"id": 1263
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 224
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.iterator",
						"id": 1262
					}
				},
				{
					"id": 1268,
					"name": "poll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1269,
							"name": "poll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves and removes the head of this queue.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue has elements [1,2,3,4]\n  console.log(queue.element());\n  //Output: 1 and queue now has elements [2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.poll",
								"id": 1216
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-queue.ts",
							"line": 26,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Queue.poll",
						"id": 1215
					}
				},
				{
					"id": 1293,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1294,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1295,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 195
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.remove",
								"id": 1234
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 195
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.remove",
						"id": 1233
					}
				},
				{
					"id": 1296,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1297,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1298,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 198
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.removeAll",
								"id": 1237
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 198
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.removeAll",
						"id": 1236
					}
				},
				{
					"id": 1299,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1300,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1301,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1302,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1303,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1304,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1305,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1306,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 201
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 201
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.removeIf",
						"id": 1239
					}
				},
				{
					"id": 1307,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1308,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1309,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 209
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.retainAll",
								"id": 1248
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 209
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.retainAll",
						"id": 1247
					}
				},
				{
					"id": 1310,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1311,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 212
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.size",
								"id": 1251
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 212
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.size",
						"id": 1250
					}
				},
				{
					"id": 1312,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1313,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 214
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.toArray",
								"id": 1253
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 214
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.toArray",
						"id": 1252
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1271
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1270
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1274,
						1277,
						1280,
						1282,
						1285,
						1266,
						1288,
						1314,
						1291,
						1322,
						1268,
						1293,
						1296,
						1299,
						1307,
						1310,
						1312
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-queue.ts",
					"line": 7,
					"character": 26
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractCollection",
					"id": 170,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "PriorityQueue",
					"id": 2467
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Queue",
					"id": 1208,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 290,
			"name": "AbstractSet",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Abstract implementation of Set interface."
			},
			"typeParameter": [
				{
					"id": 291,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 292,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 293,
							"name": "new AbstractSet",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 294,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 290
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.__constructor",
								"id": 173
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 7,
							"character": 77
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.__constructor",
						"id": 173
					}
				},
				{
					"id": 313,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "typeParameter",
							"name": "E"
						}
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 172
					}
				},
				{
					"id": 295,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 296,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds the specified element to this set if it is not already present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set contains [1,2,3,4,5]\n  set.add(6); //returns true and now set contains [1,2,3,4,5,6]\n  set.add(5); //returns false since 5 is already in the set.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 297,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 176
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.add",
								"id": 229
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 20,
							"character": 4
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.add",
						"id": 176
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.add",
						"id": 228
					}
				},
				{
					"id": 298,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 299,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds all of the elements in the specified collection to this set if they're not already present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set contains [1,2,3,4,5]\n  set.add([4,5,6]); //returns true and now set contains [1,2,3,4,5,6]\n  set.add([5,6]); //returns false since 5 and 6 are already in the set.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 300,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 179
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.addAll",
								"id": 232
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 32,
							"character": 7
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.addAll",
						"id": 179
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.addAll",
						"id": 231
					}
				},
				{
					"id": 314,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 315,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 182
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.clear",
								"id": 247
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 182
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.clear",
						"id": 246
					}
				},
				{
					"id": 316,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 317,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 318,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 184
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.contains",
								"id": 249
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 184
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.contains",
						"id": 248
					}
				},
				{
					"id": 319,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 320,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 321,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 187
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.containsAll",
								"id": 252
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 187
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.containsAll",
						"id": 251
					}
				},
				{
					"id": 307,
					"name": "difference",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 308,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by subtracting the specified set from this set.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4,5] and set2 : [4,5,6,7]\n  set1.difference(set2); //returns a new set : [1,2,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 309,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 66,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Set.difference",
						"id": 240
					}
				},
				{
					"id": 322,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 323,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 324,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 190
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.equals",
								"id": 255
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 190
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.equals",
						"id": 254
					}
				},
				{
					"id": 310,
					"name": "exclusion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 311,
							"name": "exclusion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by exclusion of this set and the set specified.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4,5] and set2 : [4,5,6,7]\n  set1.difference(set2); //returns a new set : [1,2,3,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 312,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 77,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Set.exclusion",
						"id": 243
					}
				},
				{
					"id": 348,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 349,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 350,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 351,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 352,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 353,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 354,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 355,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 216
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 216
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.forEach",
						"id": 280
					}
				},
				{
					"id": 304,
					"name": "intersection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 305,
							"name": "intersection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by intersection of this set and the set specified",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4,5] and set2 : [4,5,6,7]\n  set1.intersection(set2); //returns a new set : [4,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 306,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 55,
							"character": 13
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Set.intersection",
						"id": 237
					}
				},
				{
					"id": 325,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 326,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 193
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.isEmpty",
								"id": 258
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 193
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.isEmpty",
						"id": 257
					}
				},
				{
					"id": 356,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 357,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 224
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.iterator",
								"id": 289
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 224
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.iterator",
						"id": 288
					}
				},
				{
					"id": 327,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 328,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 329,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 195
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.remove",
								"id": 260
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 195
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.remove",
						"id": 259
					}
				},
				{
					"id": 330,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 331,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 332,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 198
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.removeAll",
								"id": 263
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 198
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.removeAll",
						"id": 262
					}
				},
				{
					"id": 333,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 334,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 335,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 336,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 337,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 338,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 339,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 340,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 201
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 201
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.removeIf",
						"id": 265
					}
				},
				{
					"id": 341,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 342,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 343,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 209
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.retainAll",
								"id": 274
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 209
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.retainAll",
						"id": 273
					}
				},
				{
					"id": 344,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 345,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 212
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.size",
								"id": 277
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 212
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.size",
						"id": 276
					}
				},
				{
					"id": 346,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 347,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 214
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.toArray",
								"id": 279
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 214
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.toArray",
						"id": 278
					}
				},
				{
					"id": 301,
					"name": "union",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 302,
							"name": "union",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by union of this set and the set specified",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4] and set2 : [4,5,6,7]\n  set1.union(set2); //returns a new set : [1,2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 303,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 290,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.union",
								"id": 235
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 44,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Set.union",
						"id": 234
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						292
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						313
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						295,
						298,
						314,
						316,
						319,
						307,
						322,
						310,
						348,
						304,
						325,
						356,
						327,
						330,
						333,
						341,
						344,
						346,
						301
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-set.ts",
					"line": 7,
					"character": 24
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractCollection",
					"id": 170,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "AbstractSortedSet",
					"id": 1408
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Set",
					"id": 226,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 1408,
			"name": "AbstractSortedSet",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 1409,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1415,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1416,
							"name": "new AbstractSortedSet",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1417,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1418,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1419,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1420,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1421,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-sorted-set.ts",
													"line": 8,
													"character": 24
												}
											]
										}
									}
								},
								{
									"id": 1422,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSortedSet",
								"id": 1408
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractSet.__constructor",
								"id": 292
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 6,
							"character": 42
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractSet.__constructor",
						"id": 292
					}
				},
				{
					"id": 1410,
					"name": "_comparator",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 6,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1411,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1412,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1413,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										},
										{
											"id": 1414,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "ds/abstract/abstract-sorted-set.ts",
									"line": 6,
									"character": 24
								}
							]
						}
					}
				},
				{
					"id": 1461,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "typeParameter",
							"name": "E"
						}
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 172
					}
				},
				{
					"id": 1423,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1424,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds the specified element to this set if it is not already present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set contains [1,3,6,8] //compareFn is ascending\n  set.add(4); //set: [1,3,4,6,8]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1425,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractSet.add",
								"id": 295
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.add",
								"id": 1327
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 20,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractSet.add",
						"id": 295
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.add",
						"id": 1326
					}
				},
				{
					"id": 1426,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1427,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts all items of an array into this set.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set containes [1,8,12] (compareFn designed for ascending order)\n  set.addAll([6,10,15]); //[1,6,8,10,12,15]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1428,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractSet.addAll",
								"id": 298
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.addAll",
								"id": 1330
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 34,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractSet.addAll",
						"id": 298
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.addAll",
						"id": 1329
					}
				},
				{
					"id": 1462,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1463,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 182
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.clear",
								"id": 1365
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 182
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.clear",
						"id": 1364
					}
				},
				{
					"id": 1429,
					"name": "comparator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1430,
							"name": "comparator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the compare function used to order the elements in this set.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  set.comparator(); //returns a function\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1431,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1432,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1433,
													"name": "x",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												},
												{
													"id": 1434,
													"name": "y",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "ds/abstract/abstract-sorted-set.ts",
											"line": 43,
											"character": 15
										}
									]
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.comparator",
								"id": 1333
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 43,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.comparator",
						"id": 1332
					}
				},
				{
					"id": 1464,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1465,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1466,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 184
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.contains",
								"id": 1367
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 184
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.contains",
						"id": 1366
					}
				},
				{
					"id": 1467,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1468,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1469,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 187
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.containsAll",
								"id": 1370
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 187
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.containsAll",
						"id": 1369
					}
				},
				{
					"id": 1455,
					"name": "difference",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1456,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by subtracting the specified set from this set.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4,5] and set2 : [4,5,6,7]\n  set1.difference(set2); //returns a new set : [1,2,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1457,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractSet.difference",
								"id": 307
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 66,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractSet.difference",
						"id": 307
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.difference",
						"id": 1358
					}
				},
				{
					"id": 1470,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1471,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1472,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 190
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.equals",
								"id": 1373
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 190
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.equals",
						"id": 1372
					}
				},
				{
					"id": 1458,
					"name": "exclusion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1459,
							"name": "exclusion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by exclusion of this set and the set specified.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4,5] and set2 : [4,5,6,7]\n  set1.difference(set2); //returns a new set : [1,2,3,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1460,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractSet.exclusion",
								"id": 310
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 77,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractSet.exclusion",
						"id": 310
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.exclusion",
						"id": 1361
					}
				},
				{
					"id": 1435,
					"name": "first",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1436,
							"name": "first",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the first (lowest) element currently in this set.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set contains [1,2,3,4]\n  set.first()\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"name": "E"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.first",
								"id": 1339
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 53,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.first",
						"id": 1338
					}
				},
				{
					"id": 1496,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1497,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1498,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1499,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1500,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1501,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1502,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1503,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 216
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 216
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.forEach",
						"id": 1398
					}
				},
				{
					"id": 1443,
					"name": "headSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1444,
							"name": "headSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this set whose elements are strictly less than toElement.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set : [1,2,3,5,7,9]\n  set.headSet(6) //returns set : [1,2,3,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1445,
									"name": "toItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.headSet",
								"id": 1341
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 86,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.headSet",
						"id": 1340
					}
				},
				{
					"id": 1452,
					"name": "intersection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1453,
							"name": "intersection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by intersection of this set and the set specified",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4,5] and set2 : [4,5,6,7]\n  set1.intersection(set2); //returns a new set : [4,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1454,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "this"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractSet.intersection",
								"id": 304
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 55,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractSet.intersection",
						"id": 304
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.intersection",
						"id": 1355
					}
				},
				{
					"id": 1473,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1474,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 193
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.isEmpty",
								"id": 1376
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 193
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.isEmpty",
						"id": 1375
					}
				},
				{
					"id": 1504,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1505,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 224
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.iterator",
								"id": 1407
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 224
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.iterator",
						"id": 1406
					}
				},
				{
					"id": 1437,
					"name": "last",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1438,
							"name": "last",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the last (highest) element currently in this set.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set contains [1,2,3,4]\n  set.last();\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"name": "E"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.last",
								"id": 1344
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 63,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.last",
						"id": 1343
					}
				},
				{
					"id": 1475,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1476,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1477,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 195
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.remove",
								"id": 1378
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 195
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.remove",
						"id": 1377
					}
				},
				{
					"id": 1478,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1479,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1480,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 198
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.removeAll",
								"id": 1381
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 198
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.removeAll",
						"id": 1380
					}
				},
				{
					"id": 1481,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1482,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1483,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1484,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1485,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1486,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1487,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1488,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 201
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 201
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.removeIf",
						"id": 1383
					}
				},
				{
					"id": 1489,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1490,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1491,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 209
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.retainAll",
								"id": 1392
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 209
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.retainAll",
						"id": 1391
					}
				},
				{
					"id": 1492,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1493,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 212
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.size",
								"id": 1395
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 212
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.size",
						"id": 1394
					}
				},
				{
					"id": 1439,
					"name": "subSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1440,
							"name": "subSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set contains [1,2,3,4,5,6,7,8,9,10]\n  set.subSet(4,9) //returns set : [4,5,6,7,8]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1441,
									"name": "fromItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1442,
									"name": "toItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.subSet",
								"id": 1346
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 73,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.subSet",
						"id": 1345
					}
				},
				{
					"id": 1446,
					"name": "tailSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1447,
							"name": "tailSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this set whose elements are greater than or equal to fromElement.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set : [1,2,3,5,7,9]\n  set.tailSet(4) //returns set : [5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1448,
									"name": "fromItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.tailSet",
								"id": 1350
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 96,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.tailSet",
						"id": 1349
					}
				},
				{
					"id": 1494,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1495,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 214
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.toArray",
								"id": 1397
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 214
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.toArray",
						"id": 1396
					}
				},
				{
					"id": 1449,
					"name": "union",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1450,
							"name": "union",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by union of this set and the set specified",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4] and set2 : [4,5,6,7]\n  set1.union(set2); //returns a new set : [1,2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1451,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 290,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractSet.union",
								"id": 301
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.union",
								"id": 1353
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 44,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractSet.union",
						"id": 301
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.union",
						"id": 1352
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1415
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1410,
						1461
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1423,
						1426,
						1462,
						1429,
						1464,
						1467,
						1455,
						1470,
						1458,
						1435,
						1496,
						1443,
						1452,
						1473,
						1504,
						1437,
						1475,
						1478,
						1481,
						1489,
						1492,
						1439,
						1446,
						1494,
						1449
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-sorted-set.ts",
					"line": 4,
					"character": 30
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractSet",
					"id": 290,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Set",
					"id": 226,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "SortedSet",
					"id": 1324,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 1693,
			"name": "AbstractTable",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true,
				"isAbstract": true
			},
			"typeParameter": [
				{
					"id": 1694,
					"name": "R",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 1695,
					"name": "C",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 1696,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1698,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1699,
							"name": "new AbstractTable",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "AbstractTable",
								"id": 1693
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 8,
							"character": 47
						}
					]
				},
				{
					"id": 1697,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "ArrayMap",
						"id": 1570,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "R"
							},
							{
								"type": "reference",
								"name": "ArrayMap",
								"id": 1570,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "C"
									},
									{
										"type": "typeParameter",
										"name": "V"
									}
								]
							}
						]
					}
				},
				{
					"id": 1700,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1701,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add a row to this table only if row curresponding to given key is absent.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //t:Table<number,number,string>\n  var r = new ArrayMap<number,string>(5);\n  r.add(1,'01');\n  r.add(2,'02');\n  r.add(3,'03');\n  t.add(0, r);\n  /*\n    +-----+-----+-----+-----+\n    |  X  |  1  |  2  |  3  |\n    +-----+-----+-----+-----+\n    |  0  | 01  | 02  | 03  |\n    +-----+-----+-----+-----+\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1702,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								},
								{
									"id": 1703,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMap",
										"id": 1570,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 29,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Table.add",
						"id": 1510
					}
				},
				{
					"id": 1729,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1730,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an entire row from this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.delete(0); //calling this function makes the table empty.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1731,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.delete",
								"id": 1540
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 93,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Table.delete",
						"id": 1539
					}
				},
				{
					"id": 1732,
					"name": "deleteIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 1733,
							"name": "deleteIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an entire row from this table based on filter function."
							},
							"parameters": [
								{
									"id": 1734,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1735,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1736,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1737,
															"name": "rowKey",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "R"
															}
														},
														{
															"id": 1738,
															"name": "row",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "C"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-table.ts",
													"line": 99,
													"character": 29
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 99,
							"character": 19
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Table.deleteIf",
						"id": 1542
					}
				},
				{
					"id": 1739,
					"name": "drop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1740,
							"name": "drop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an entire column from this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.drop(2);\n  /*\n    +-----+-----+-----+\n    |  X  |  1  |  3  |\n    +-----+-----+-----+\n    |  0  | 01  | 03  |\n    +-----+-----+-----+\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1741,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.drop",
								"id": 1550
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 111,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Table.drop",
						"id": 1549
					}
				},
				{
					"id": 1716,
					"name": "extract",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1717,
							"name": "extract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an entire column of this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.extract(2); //returns <Map>[{0:'02'}]\n  t.extract(5); //returns <Map>[{0: undefined}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1718,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractMap",
								"id": 1060,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "R"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.extract",
								"id": 1527
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 73,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Table.extract",
						"id": 1526
					}
				},
				{
					"id": 1713,
					"name": "fetch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1714,
							"name": "fetch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an entire row of this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.fetch(0);  //returns <Map>[{1:'01'},{2:'02'},{3:'03'}]\n  t.fetch(1);  //returns undefined\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1715,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "AbstractMap",
										"id": 1060,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.fetch",
								"id": 1524
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 64,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Table.fetch",
						"id": 1523
					}
				},
				{
					"id": 1709,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1710,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an entry from this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.get(0,3); //returns '03'\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1711,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								},
								{
									"id": 1712,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.get",
								"id": 1520
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 54,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Table.get",
						"id": 1519
					}
				},
				{
					"id": 1726,
					"name": "project",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 1727,
							"name": "project",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a subset of columns in this table."
							},
							"parameters": [
								{
									"id": 1728,
									"name": "columns",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Table",
								"id": 1506,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "R"
									},
									{
										"type": "typeParameter",
										"name": "C"
									},
									{
										"type": "typeParameter",
										"name": "V"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.project",
								"id": 1537
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 87,
							"character": 18
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Table.project",
						"id": 1536
					}
				},
				{
					"id": 1742,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1743,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove an entry from this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.remove(0,3); //returns '03' and removes it from the table\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1744,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								},
								{
									"id": 1745,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.remove",
								"id": 1553
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 121,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Table.remove",
						"id": 1552
					}
				},
				{
					"id": 1719,
					"name": "select",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 1720,
							"name": "select",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a subset of rows in this table based on the filter function."
							},
							"parameters": [
								{
									"id": 1721,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1722,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1723,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1724,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "R"
															}
														},
														{
															"id": 1725,
															"name": "row",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "C"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-table.ts",
													"line": 83,
													"character": 27
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Table",
								"id": 1506,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "R"
									},
									{
										"type": "typeParameter",
										"name": "C"
									},
									{
										"type": "typeParameter",
										"name": "V"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 83,
							"character": 17
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Table.select",
						"id": 1529
					}
				},
				{
					"id": 1704,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1705,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the value at the specified position in this table with the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.set(0,2,'2'); //returns '02'\n  t.set(1,2,'12'); //returns undefined\n  /*\n    +-----+-----+-----+-----+\n    |  X  |  1  |  2  |  3  |\n    +-----+-----+-----+-----+\n    |  0  | 01  |  2  | 03  |\n    +-----+-----+-----+-----+\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1706,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								},
								{
									"id": 1707,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								},
								{
									"id": 1708,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.set",
								"id": 1515
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 44,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Table.set",
						"id": 1514
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1698
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1697
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1700,
						1729,
						1732,
						1739,
						1716,
						1713,
						1709,
						1726,
						1742,
						1719,
						1704
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-table.ts",
					"line": 7,
					"character": 35
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "EntryTable",
					"id": 2556
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Table",
					"id": 1506,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "R"
						},
						{
							"type": "typeParameter",
							"name": "C"
						},
						{
							"type": "typeParameter",
							"name": "V"
						}
					]
				}
			]
		},
		{
			"id": 1746,
			"name": "ArrayList",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Resizable-array implementation of the List interface."
			},
			"typeParameter": [
				{
					"id": 1747,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1749,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Constructs an empty list with an initial capacity of ten.\nConstructs an empty list with the specified initial capacity.\nConstructs a list containing the items."
					},
					"signatures": [
						{
							"id": 1750,
							"name": "new ArrayList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs an empty list with an initial capacity of ten."
							},
							"type": {
								"type": "reference",
								"name": "ArrayList",
								"id": 1746
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 771
							}
						},
						{
							"id": 1751,
							"name": "new ArrayList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs an empty list with the specified initial capacity."
							},
							"parameters": [
								{
									"id": 1752,
									"name": "initialCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayList",
								"id": 1746
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 771
							}
						},
						{
							"id": 1753,
							"name": "new ArrayList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs a list containing the items."
							},
							"parameters": [
								{
									"id": 1754,
									"name": "initialCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1755,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayList",
								"id": 1746
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 771
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 11,
							"character": 30
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 16,
							"character": 15
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 20,
							"character": 37
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 24,
							"character": 51
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractList.__constructor",
						"id": 771
					}
				},
				{
					"id": 1748,
					"name": "_capacity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 11,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1848,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "typeParameter",
							"name": "E"
						}
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 172
					}
				},
				{
					"id": 1756,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1757,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends the specified element to the end of this list"
							},
							"parameters": [
								{
									"id": 1758,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.add",
								"id": 774
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 664
							}
						},
						{
							"id": 1759,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts the specified element at the specified position in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  list.add(4); //[1,2,3,4]\n  list.add(2.5,2); //[1,2,2.5,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1760,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1761,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.add",
								"id": 774
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 666
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 33,
							"character": 5
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 41,
							"character": 5
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 42,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractList.add",
						"id": 774
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.add",
						"id": 663
					}
				},
				{
					"id": 1762,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1763,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends all of the elements in the specified array to the end of this list"
							},
							"parameters": [
								{
									"id": 1764,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.addAll",
								"id": 780
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 670
							}
						},
						{
							"id": 1765,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts all of the elements in the specified array into this list at the specified position.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  list.addAll([4,5]); //[1,2,3,4,5]\n  list.addAll([2.1,2.2,2.3], 2); //[1,2,2.1,2.2,2.3,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1766,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								},
								{
									"id": 1767,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.addAll",
								"id": 780
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 672
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 50,
							"character": 8
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 58,
							"character": 8
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 59,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractList.addAll",
						"id": 780
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.addAll",
						"id": 669
					}
				},
				{
					"id": 1849,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1850,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 182
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.clear",
								"id": 710
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 182
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.clear",
						"id": 709
					}
				},
				{
					"id": 1797,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1798,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a shallow copy of this ArrayList instance.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let newArrayList = arrayList.clone();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 401
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 124,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 400
					}
				},
				{
					"id": 1851,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1852,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1853,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 184
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.contains",
								"id": 712
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 184
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.contains",
						"id": 711
					}
				},
				{
					"id": 1854,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1855,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1856,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 187
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.containsAll",
								"id": 715
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 187
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.containsAll",
						"id": 714
					}
				},
				{
					"id": 1768,
					"name": "ensureCapacity",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1769,
							"name": "ensureCapacity",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList has a capacity 10\n  arrayList.ensureCapacity(15);\n  //new capacity is 15\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1770,
									"name": "minCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 71,
							"character": 16
						}
					]
				},
				{
					"id": 1857,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1858,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1859,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 190
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.equals",
								"id": 718
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 190
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.equals",
						"id": 717
					}
				},
				{
					"id": 1771,
					"name": "filter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1772,
							"name": "filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new ArrayList after filtering the items based on the filterFn",
								"tags": [
									{
										"tag": "example",
										"text": "\n//arryList [1,2,3,4,5]\narrayList.filter(x => (x < 4)); //returns an ArrayList [1,2,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1773,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1774,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1775,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1776,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1777,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1778,
															"name": "list",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reference",
																"name": "ArrayList",
																"id": 1746,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 81,
													"character": 18
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						},
						{
							"id": 1779,
							"name": "filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new ArrayList after filtering the items based on the filterFn with the given initial capacity",
								"tags": [
									{
										"tag": "example",
										"text": "\n//arryList [1,2,3,4,5]\narrayList.filter(x => (x < 4), 5); //returns an ArrayList [1,2,3] with capacity 5\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1780,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1781,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1782,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1783,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1784,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1785,
															"name": "list",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reference",
																"name": "ArrayList",
																"id": 1746,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 88,
													"character": 18
												}
											]
										}
									}
								},
								{
									"id": 1786,
									"name": "capacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 81,
							"character": 8
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 88,
							"character": 8
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 89,
							"character": 8
						}
					]
				},
				{
					"id": 1883,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1884,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1885,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1886,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1887,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1888,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1889,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1890,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 216
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 216
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.forEach",
						"id": 743
					}
				},
				{
					"id": 1807,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1808,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the Object from the JSON string",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //json = \"[1,2,3,4]\"\n  arrayList = new ArrayList<number>().fromString(json,(x)=>(parseFloat(x)));\n  //arrayList contains [1,2,3,4]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1809,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1810,
									"name": "deserializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1811,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1812,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1813,
															"name": "itemJ",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 160,
													"character": 41
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 160,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.fromString",
						"id": 1563
					}
				},
				{
					"id": 1814,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1815,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an item from the list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.get(2));\n  //Output: 3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1816,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.get",
								"id": 786
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.get",
								"id": 676
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 63,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.get",
						"id": 786
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.get",
						"id": 675
					}
				},
				{
					"id": 1817,
					"name": "indexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1818,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,2,4]\n  console.log(list.indexOf(2));\n  //Output: 1\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1819,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.indexOf",
								"id": 789
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.indexOf",
								"id": 679
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 74,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.indexOf",
						"id": 789
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.indexOf",
						"id": 678
					}
				},
				{
					"id": 1860,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1861,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 193
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.isEmpty",
								"id": 721
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 193
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.isEmpty",
						"id": 720
					}
				},
				{
					"id": 1891,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1892,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 224
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.iterator",
								"id": 752
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 224
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.iterator",
						"id": 751
					}
				},
				{
					"id": 1820,
					"name": "lastIndexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1821,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of last occurrence of the element.\n  //list contains [1,2,3,2,4]\n  console.log(list.lastIndexOf(2));\n  //Output: 3"
							},
							"parameters": [
								{
									"id": 1822,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.lastIndexOf",
								"id": 792
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.lastIndexOf",
								"id": 682
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 84,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.lastIndexOf",
						"id": 792
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.lastIndexOf",
						"id": 681
					}
				},
				{
					"id": 1823,
					"name": "listIterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1824,
							"name": "listIterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list iterator over the elements in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var listIterator = list.listIterator(); //starts at index 0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1825,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.listIterator",
								"id": 795
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.listIterator",
								"id": 685
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 93,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.listIterator",
						"id": 795
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.listIterator",
						"id": 684
					}
				},
				{
					"id": 1826,
					"name": "median",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1827,
							"name": "median",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the median of this list. If the list is empty returns undefined.\nIn case of two medians the later one is preferred.",
								"tags": [
									{
										"tag": "example",
										"text": "\n //list contains [1, 2, 3, 4]\nlist.median(); //returns 3\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.median",
								"id": 798
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.median",
								"id": 688
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 104,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.median",
						"id": 798
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.median",
						"id": 687
					}
				},
				{
					"id": 1862,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1863,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1864,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 195
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.remove",
								"id": 723
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 195
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.remove",
						"id": 722
					}
				},
				{
					"id": 1865,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1866,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1867,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 198
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAll",
								"id": 726
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 198
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAll",
						"id": 725
					}
				},
				{
					"id": 1828,
					"name": "removeAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1829,
							"name": "removeAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the element at the specified position in this list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.removeAt(1)); //[1,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1830,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.removeAt",
								"id": 800
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAt",
								"id": 690
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 115,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.removeAt",
						"id": 800
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAt",
						"id": 689
					}
				},
				{
					"id": 1868,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1869,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1870,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1871,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1872,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1873,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1874,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1875,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 201
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 201
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeIf",
						"id": 728
					}
				},
				{
					"id": 1831,
					"name": "removeRange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1832,
							"name": "removeRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5,6]\n  console.log(list.removeRange(1,4)); //[1,5,6]\n  //Output: [2,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1833,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1834,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.removeRange",
								"id": 803
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 126,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.removeRange",
						"id": 803
					}
				},
				{
					"id": 1787,
					"name": "replaceAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1788,
							"name": "replaceAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces each element of this list with the result of applying the mapping function",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList contains [1,2,3,4]\n  arrayList.map((x)=>(x*2));\n  //now arrayList contains [2,4,6,8]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1789,
									"name": "mappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1790,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1791,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1792,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 105,
													"character": 23
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 105,
							"character": 12
						}
					]
				},
				{
					"id": 1876,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1877,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1878,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 209
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.retainAll",
								"id": 737
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 209
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.retainAll",
						"id": 736
					}
				},
				{
					"id": 1846,
					"name": "reverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1847,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverse the list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5]\n  list.reverse() //now list contains [5,4,3,2,1]\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.reverse",
								"id": 822
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.reverse",
								"id": 708
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 173,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.reverse",
						"id": 822
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.reverse",
						"id": 707
					}
				},
				{
					"id": 1835,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1836,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the element at the specified position in this list with the specified element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.set(1,2.5)); //[1,2.5,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1837,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1838,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.set",
								"id": 807
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.set",
								"id": 693
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 137,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.set",
						"id": 807
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.set",
						"id": 692
					}
				},
				{
					"id": 1879,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1880,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 212
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.size",
								"id": 740
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 212
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.size",
						"id": 739
					}
				},
				{
					"id": 1839,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1840,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts this list according to the compareFn.\ncompareFn is a function which should return a number value (-ve, zero, or +ve).\nx is considered smaller than y if the compareFn(x,y) is negetive",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.sort(function(x,y) {\n    return x-y;\n  }); // [1, 2, 3, 6, 7, 8, 9, 11]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1841,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1842,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1843,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1844,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1845,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-list.ts",
													"line": 152,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.sort",
								"id": 811
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 152,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.sort",
						"id": 811
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.sort",
						"id": 696
					}
				},
				{
					"id": 1793,
					"name": "subList",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1794,
							"name": "subList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.subList(2,7); // returns a list containing [6, 2, 7, 3, 9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1795,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1796,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.subList",
								"id": 818
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.subList",
								"id": 704
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 115,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractList.subList",
						"id": 818
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.subList",
						"id": 703
					}
				},
				{
					"id": 1881,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1882,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 214
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.toArray",
								"id": 742
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 214
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.toArray",
						"id": 741
					}
				},
				{
					"id": 1801,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1802,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts the arrayList into a JSON String",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList contains [1,2,3,4]\n  console.log(arrayList.toString((x)=>(x.toString())));\n  //Output\n  //\"[1,2,3,4]\"\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1803,
									"name": "serializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1804,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1805,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1806,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 146,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 146,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.toString",
						"id": 1557
					}
				},
				{
					"id": 1799,
					"name": "trimToSize",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1800,
							"name": "trimToSize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Trims the capacity of this ArrayList instance to be the list's current size.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList contains [1,2,3,4,5] and capacity is 10\n  arrayList.trimToSize(); //new capacity is 5\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 134,
							"character": 12
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1749
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1748,
						1848
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1756,
						1762,
						1849,
						1797,
						1851,
						1854,
						1768,
						1857,
						1771,
						1883,
						1807,
						1814,
						1817,
						1860,
						1891,
						1820,
						1823,
						1826,
						1862,
						1865,
						1828,
						1868,
						1831,
						1787,
						1876,
						1846,
						1835,
						1879,
						1839,
						1793,
						1881,
						1801,
						1799
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/lists/array-list.ts",
					"line": 9,
					"character": 22
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractList",
					"id": 769,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "HistoryList",
					"id": 1964
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "List",
					"id": 661,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 398,
					"typeArguments": [
						{
							"type": "reference",
							"name": "ArrayList",
							"id": 1746,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "E"
								}
							]
						}
					]
				},
				{
					"type": "reference",
					"name": "Serializable",
					"id": 1556
				}
			]
		},
		{
			"id": 1570,
			"name": "ArrayMap",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 1571,
					"name": "K",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 1572,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1574,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Constructs an empty list with an initial capacity of ten.\nConstructs an empty list with the specified initial capacity.\nConstructs a list containing the items."
					},
					"signatures": [
						{
							"id": 1575,
							"name": "new ArrayMap",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs an empty list with an initial capacity of ten."
							},
							"type": {
								"type": "reference",
								"name": "ArrayMap",
								"id": 1570
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractMap.__constructor",
								"id": 1065
							}
						},
						{
							"id": 1576,
							"name": "new ArrayMap",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs an empty list with the specified initial capacity."
							},
							"parameters": [
								{
									"id": 1577,
									"name": "initialCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayMap",
								"id": 1570
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractMap.__constructor",
								"id": 1065
							}
						},
						{
							"id": 1578,
							"name": "new ArrayMap",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs a list containing the items."
							},
							"parameters": [
								{
									"id": 1579,
									"name": "initialCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1580,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "MapEntry",
											"id": 905,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "K"
												},
												{
													"type": "typeParameter",
													"name": "V"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayMap",
								"id": 1570
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractMap.__constructor",
								"id": 1065
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 7,
							"character": 34
						},
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 11,
							"character": 15
						},
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 15,
							"character": 37
						},
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 19,
							"character": 63
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractMap.__constructor",
						"id": 1065
					}
				},
				{
					"id": 1573,
					"name": "_capacity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 7,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "10"
				},
				{
					"id": 1601,
					"name": "_keys",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 7,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractSet",
						"id": 290,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "K"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap._keys",
						"id": 1064
					}
				},
				{
					"id": 1600,
					"name": "_values",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 6,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractList",
						"id": 769,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "V"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap._values",
						"id": 1063
					}
				},
				{
					"id": 1602,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1603,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the mappings from this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//map: [{\"1\":1},{\"2\":2},{\"3\":3}]\nmap.clear();\n//now : []\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.clear",
								"id": 1068
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.clear",
								"id": 914
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 21,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.clear",
						"id": 1068
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.clear",
						"id": 913
					}
				},
				{
					"id": 1588,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1589,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a shallow copy of this ArrayMap instance.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let newArrayMap = arrayMap.clone();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 401
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 58,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 400
					}
				},
				{
					"id": 1604,
					"name": "compute",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1605,
							"name": "compute",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to 12\n  map.compute(k1, (key,value,map)=>(value+11)); //returns 12\n  //now the value changes to 12+11 -> 23\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1606,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1607,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1608,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1609,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1610,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1611,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 1612,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "V"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 32,
													"character": 29
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.compute",
								"id": 1070
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 32,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.compute",
						"id": 1070
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.compute",
						"id": 915
					}
				},
				{
					"id": 1613,
					"name": "computeIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1614,
							"name": "computeIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to 12\n  map.computeIfAbsent(k1, (key,value,map)=>(23)); //returns 12\n  //value does not change\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1615,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1616,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1617,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1618,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1619,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1620,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 1621,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "V"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 46,
													"character": 37
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.computeIfAbsent",
								"id": 1079
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 46,
							"character": 16
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.computeIfAbsent",
						"id": 1079
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.computeIfAbsent",
						"id": 924
					}
				},
				{
					"id": 1622,
					"name": "computeIfPresent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1623,
							"name": "computeIfPresent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to null\n  map.computeIfAbsent(k1, (key,value,map)=>(value+11)); //returns null\n  //value does not change\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1624,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1625,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1626,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1627,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1628,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1629,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 1630,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "V"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 62,
													"character": 38
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.computeIfPresent",
								"id": 1088
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 62,
							"character": 17
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.computeIfPresent",
						"id": 1088
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.computeIfPresent",
						"id": 933
					}
				},
				{
					"id": 1631,
					"name": "containsKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1632,
							"name": "containsKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains a mapping for the specified key.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.conainsKey(k1); //returns true\n  map.containsKey(k5); //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1633,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.containsKey",
								"id": 1097
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.containsKey",
								"id": 943
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 78,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.containsKey",
						"id": 1097
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.containsKey",
						"id": 942
					}
				},
				{
					"id": 1634,
					"name": "containsValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1635,
							"name": "containsValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map maps one or more keys to the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.conainsValue(1); //returns true\n  map.containsValue(5); //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1636,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.containsValue",
								"id": 1100
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.containsValue",
								"id": 946
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 89,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.containsValue",
						"id": 1100
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.containsValue",
						"id": 945
					}
				},
				{
					"id": 1585,
					"name": "ensureCapacity",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1586,
							"name": "ensureCapacity",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Increases the capacity of this ArrayMap instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayMap has a capacity 10\n  arrayMap.ensureCapacity(15);\n  //new capacity is 15\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1587,
									"name": "minCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 49,
							"character": 16
						}
					]
				},
				{
					"id": 1637,
					"name": "entrySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1638,
							"name": "entrySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the mappings contained in this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.entrySet(); //returns Set [{key:k1, value:1},{key:k2, value:2}]\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 290,
								"typeArguments": [
									{
										"type": "reference",
										"name": "MapEntry",
										"id": 905,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.entrySet",
								"id": 1103
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.entrySet",
								"id": 949
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 99,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.entrySet",
						"id": 1103
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.entrySet",
						"id": 948
					}
				},
				{
					"id": 1639,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1640,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified map with this map for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map1 : [{k1:1},{k2:2},{k3:null}]\n  //map2 : [{k1:1},{k3:4}]\n  map1.equals(map2) //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1641,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.equals",
								"id": 1105
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.equals",
								"id": 951
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 115,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.equals",
						"id": 1105
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.equals",
						"id": 950
					}
				},
				{
					"id": 1642,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1643,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.forEach((key, value, map)=>{\n     console.log(key+\"->\"+value+\",\");\n  });\n  //Output: one->1,two->2,three->3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1644,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1645,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1646,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1647,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1648,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 1649,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 137,
													"character": 16
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.forEach",
								"id": 1108
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 137,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.forEach",
						"id": 1108
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.forEach",
						"id": 953
					}
				},
				{
					"id": 1650,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1651,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped. undefined if there is no mapping.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.get(k1); //returns 1\n  map.get(k3); //returns null\n  map.get(k4); //returns undefined\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1652,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.get",
								"id": 1116
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.get",
								"id": 962
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 152,
							"character": 4
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.get",
						"id": 1116
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.get",
						"id": 961
					}
				},
				{
					"id": 1653,
					"name": "getOrDefault",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1654,
							"name": "getOrDefault",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key or if key is mapped to null.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.getOrDefault(k1,5); //returns 1\n  map.getOrDefault(k3,12); //returns 12\n  map.getOrDefault(k4,16); //returns 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1655,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1656,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "V"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.getOrDefault",
								"id": 1119
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.getOrDefault",
								"id": 965
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 166,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.getOrDefault",
						"id": 1119
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.getOrDefault",
						"id": 964
					}
				},
				{
					"id": 1657,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1658,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains no key-value mappings.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.isEmpty(); //false\n  //map : [{k1:null},{k2:null},{k3:null}]\n  map.isEmpty(); //false\n  //map : []\n  map.isEmpty(); //true\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.isEmpty",
								"id": 1123
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.isEmpty",
								"id": 969
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 180,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.isEmpty",
						"id": 1123
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.isEmpty",
						"id": 968
					}
				},
				{
					"id": 1659,
					"name": "isNull",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1660,
							"name": "isNull",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains mappings to only null values or if  the map is empty.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.isNull(); //false\n  //map : [{k1:null},{k2:null},{k3:null}]\n  map.isNull(); //true\n  //map : []\n  map.isNull(); //true\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.isNull",
								"id": 1125
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 194,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.isNull",
						"id": 1125
					}
				},
				{
					"id": 1661,
					"name": "keySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1662,
							"name": "keySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the keys contained in this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.keySet(); //[\"one\",\"two\",\"three\"]\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 290,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "K"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.keySet",
								"id": 1127
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.keySet",
								"id": 971
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 204,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.keySet",
						"id": 1127
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.keySet",
						"id": 970
					}
				},
				{
					"id": 1581,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1582,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Associates the specified value with the specified key in this map.Returns the old value associated with the key or  undefined.\n(Throws an Error if ArrayMap is at maximum capacity)",
								"tags": [
									{
										"tag": "example",
										"text": "\n//map : [{\"one\":1},{\"two\":2},{\"three\":3}]\nmap.put(\"one\",22); //return 1\n//now map : [{\"one\":22},{\"two\":2},{\"three\":3}]\nmap.put(\"four\",4);//return undefined\n//now map : [{\"one\":22},{\"two\":2},{\"three\":3},{\"four\":4}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1583,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1584,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractMap.put",
								"id": 1129
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.put",
								"id": 973
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 35,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractMap.put",
						"id": 1129
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.put",
						"id": 972
					}
				},
				{
					"id": 1663,
					"name": "putAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1664,
							"name": "putAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies all of the mappings from the specified map to this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map1: [{k1:v1},{k2:v2},{k3:v3}], map2: [{k2:v4},{k4:v6},{k6:v8}]\n  map1.putAll(map2);\n  //now map1: [{k1:v1},{k2:v4},{k3:v3},{k4:v6},{k6:v8}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1665,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.putAll",
								"id": 1133
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.putAll",
								"id": 977
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 237,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.putAll",
						"id": 1133
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.putAll",
						"id": 976
					}
				},
				{
					"id": 1666,
					"name": "putIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1667,
							"name": "putIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns undefined, else returns the current value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.putIfAbsent(\"four\",4); //return undefined (adds {\"four\":4} to the map)\n  map.putIfAbsent(\"one\",23); //return 1 (map unchanged)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1668,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1669,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.putIfAbsent",
								"id": 1136
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.putIfAbsent",
								"id": 980
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 249,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.putIfAbsent",
						"id": 1136
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.putIfAbsent",
						"id": 979
					}
				},
				{
					"id": 1670,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1671,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the mapping for a key from this map if it is present.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.remove(\"one\"); //return 1\n  //now map : [{\"two\":2},{\"three\":3}]\n  map.remove(\"four\"); //return undefined (map unchanged)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1672,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.remove",
								"id": 1140
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.remove",
								"id": 984
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 263,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.remove",
						"id": 1140
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.remove",
						"id": 983
					}
				},
				{
					"id": 1673,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1674,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.removeIf(\"one\", 1); //return true\n  //now map : [{\"two\":2},{\"three\":3}]\n  map.removeIf(\"two\",5); //return false (map unchanged)\n  map.removeIf(\"four\",4); //return false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1675,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1676,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.removeIf",
								"id": 1143
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.removeIf",
								"id": 987
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 281,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.removeIf",
						"id": 1143
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.removeIf",
						"id": 986
					}
				},
				{
					"id": 1677,
					"name": "replace",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1678,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replace all entries with specified value with the new value. Returns true if map was changed.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.replace(5,2) //returns true;\n  //now map : [{k1:1},{k2:2},{k3:3},{k4:2},{k5:1}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1679,
									"name": "oldValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								},
								{
									"id": 1680,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.replace",
								"id": 1147
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.replace",
								"id": 991
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 293,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.replace",
						"id": 1147
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.replace",
						"id": 990
					}
				},
				{
					"id": 1681,
					"name": "replaceAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1682,
							"name": "replaceAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.replaceAll((k,v,m)=>(v*2)); //replace with its double\n  //map : [{k1:2},{k2:10},{k3:6},{k4:10},{k5:2}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1683,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1684,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1685,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1686,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1687,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 1688,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "V"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 310,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.replaceAll",
								"id": 1151
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 310,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.replaceAll",
						"id": 1151
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.replaceAll",
						"id": 994
					}
				},
				{
					"id": 1689,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1690,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of key-value mappings in this map.(key->null mappings are counted)",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.size(); //return 5\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.size",
								"id": 1159
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.size",
								"id": 1003
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 322,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.size",
						"id": 1159
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.size",
						"id": 1002
					}
				},
				{
					"id": 1592,
					"name": "subMap",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1593,
							"name": "subMap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a sub map of the current map based on the selection function",
								"tags": [
									{
										"tag": "example",
										"text": "\n //arrayMap contains [{\"one\":1},{\"two\":2},{\"three\":3}]\n arrayMap.subMap((k,v) => (v<=2)); //returns [{\"one\":1},{\"two\":2}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1594,
									"name": "selectionFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1595,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1596,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1597,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1598,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 1599,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/maps/array-map.ts",
													"line": 78,
													"character": 21
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 78,
							"character": 8
						}
					]
				},
				{
					"id": 1590,
					"name": "trimToSize",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1591,
							"name": "trimToSize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Trims the capacity of this ArrayMap instance to be the list's current size.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayMap contains [{\"one\":1},{\"two\":2},{\"three\":3}] and capacity is 10\n  arrayMap.trimToSize(); //new capacity is 3\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 68,
							"character": 12
						}
					]
				},
				{
					"id": 1691,
					"name": "values",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1692,
							"name": "values",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a List view of the values contained in this map.\n//map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\nmap.values(); //return list : [1,5,3,5,1]"
							},
							"type": {
								"type": "reference",
								"name": "AbstractList",
								"id": 769,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "V"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.values",
								"id": 1161
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.values",
								"id": 1005
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 331,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.values",
						"id": 1161
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.values",
						"id": 1004
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1574
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1573,
						1601,
						1600
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1602,
						1588,
						1604,
						1613,
						1622,
						1631,
						1634,
						1585,
						1637,
						1639,
						1642,
						1650,
						1653,
						1657,
						1659,
						1661,
						1581,
						1663,
						1666,
						1670,
						1673,
						1677,
						1681,
						1689,
						1592,
						1590,
						1691
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/maps/array-map.ts",
					"line": 6,
					"character": 21
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractMap",
					"id": 1060,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "K"
						},
						{
							"type": "typeParameter",
							"name": "V"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Map",
					"id": 910,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "K"
						},
						{
							"type": "typeParameter",
							"name": "V"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 398,
					"typeArguments": [
						{
							"type": "reference",
							"name": "ArrayMap",
							"id": 1570,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "K"
								},
								{
									"type": "typeParameter",
									"name": "V"
								}
							]
						}
					]
				}
			]
		},
		{
			"id": 402,
			"name": "ArrayMatrix",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A 2 dimensional array implementation of Matrix."
			},
			"typeParameter": [
				{
					"id": 403,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 405,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 406,
							"name": "new ArrayMatrix",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 407,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 408,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayMatrix",
								"id": 402
							}
						},
						{
							"id": 409,
							"name": "new ArrayMatrix",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 410,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 411,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 412,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayMatrix",
								"id": 402
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 8,
							"character": 25
						},
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 10,
							"character": 42
						},
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 11,
							"character": 58
						}
					]
				},
				{
					"id": 404,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "array",
							"elementType": {
								"type": "typeParameter",
								"name": "E"
							}
						}
					}
				},
				{
					"id": 443,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 444,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of the current object and return",
								"tags": [
									{
										"tag": "example",
										"text": "\n  matrix.clone();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 401
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 196,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 400
					}
				},
				{
					"id": 435,
					"name": "col",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 436,
							"name": "col",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the column correponding to the specified index.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [4 5 6]\n  //  [7 8 9]\n  matrix.col(1); //[2,5,8]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 437,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayMatrixColumn",
								"id": 467,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 136,
							"character": 5
						}
					]
				},
				{
					"id": 438,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 439,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check whether the specified matrix is equal to this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  m1:\n  //  [1 2]\n  //  [2 3]\n  //  m2:\n  //  [1 2]\n  //  [2 3]\n  m1.equals(m2); //returns true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 440,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrix",
										"id": 402,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 156,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.equals",
						"id": 379
					}
				},
				{
					"id": 413,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 414,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read the item at the specified position in this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [2 3 4]\n  //  [3 4 5]\n  matrix.get(1,1); //3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 415,
									"name": "rowIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 416,
									"name": "columnIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.get",
								"id": 361
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 27,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.get",
						"id": 360
					}
				},
				{
					"id": 424,
					"name": "height",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 425,
							"name": "height",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of rows in this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  matrix.height(); //return 3\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.height",
								"id": 372
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 72,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.height",
						"id": 371
					}
				},
				{
					"id": 417,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 418,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert an item at the specified position in this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [2 3 4]\n  //  [3 4 5]\n  matrix.put(0,1,5);\n  //  [1 2 3]\n  //  [5 3 4]\n  //  [3 4 5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 419,
									"name": "rowIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 420,
									"name": "columnIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 421,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.put",
								"id": 365
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 42,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.put",
						"id": 364
					}
				},
				{
					"id": 432,
					"name": "row",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 433,
							"name": "row",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the row correponding to the specified index.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [4 5 6]\n  //  [7 8 9]\n  matrix.row(1); //[4,5,6]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 434,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayMatrixRow",
								"id": 445,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 119,
							"character": 5
						}
					]
				},
				{
					"id": 428,
					"name": "subMatrix",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 429,
							"name": "subMatrix",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the submatrix obtained after removing the specified rows and columns from this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [4 5 6]\n  //  [7 8 9]\n  matrix.subMatrix([0],[1])\n  //  [4 6]\n  //  [7 9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 430,
									"name": "rows",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 431,
									"name": "cols",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.subMatrix",
								"id": 376
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 95,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.subMatrix",
						"id": 375
					}
				},
				{
					"id": 441,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 442,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a 2 dimensional array corresponding to the matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [4 5 6]\n  //  [7 8 9]\n  matrix.toArray(); //[[1,2,3],[4,5,6],[7,8,9]]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 181,
							"character": 9
						}
					]
				},
				{
					"id": 422,
					"name": "transpose",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 423,
							"name": "transpose",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the transpose of this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [4 5 6]\n  //  [7 8 9]\n  matrix.transpose();\n  //  [1 4 7]\n  //  [2 5 8]\n  //  [3 6 9]\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.transpose",
								"id": 370
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 57,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.transpose",
						"id": 369
					}
				},
				{
					"id": 426,
					"name": "width",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 427,
							"name": "width",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of columns in this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  matrix.width(); //return 3\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.width",
								"id": 374
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 81,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.width",
						"id": 373
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						405
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						404
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						443,
						435,
						438,
						413,
						424,
						417,
						432,
						428,
						441,
						422,
						426
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/matrices/array-matrix.ts",
					"line": 7,
					"character": 24
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "NumberMatrix",
					"id": 489
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Matrix",
					"id": 358,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 398,
					"typeArguments": [
						{
							"type": "reference",
							"name": "ArrayMatrix",
							"id": 402,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "E"
								}
							]
						}
					]
				}
			]
		},
		{
			"id": 467,
			"name": "ArrayMatrixColumn",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A single column of an ArrayMatrix."
			},
			"typeParameter": [
				{
					"id": 468,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 471,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 472,
							"name": "new ArrayMatrixColumn",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 473,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrix",
										"id": 402,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								},
								{
									"id": 474,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayMatrixColumn",
								"id": 467
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 298,
							"character": 26
						}
					]
				},
				{
					"id": 470,
					"name": "_index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 298,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 469,
					"name": "_matrix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 297,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "ArrayMatrix",
						"id": 402,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "E"
							}
						]
					}
				},
				{
					"id": 477,
					"name": "index",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Return the index of this colun in the matrix it belongs to."
					},
					"getSignature": {
						"id": 478,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Return the index of this colun in the matrix it belongs to."
						},
						"type": {
							"type": "intrinsic",
							"name": "number"
						}
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 315,
							"character": 11
						}
					]
				},
				{
					"id": 475,
					"name": "matrix",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Return the matrix to which this column belong."
					},
					"getSignature": {
						"id": 476,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Return the matrix to which this column belong."
						},
						"type": {
							"type": "reference",
							"name": "ArrayMatrix",
							"id": 402,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "E"
								}
							]
						}
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 308,
							"character": 12
						}
					]
				},
				{
					"id": 479,
					"name": "change",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 480,
							"name": "change",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Change this matrix column with another column of same matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //am:ArrayMatrix\n  let c1 = am.col(0);\n  let c2 = am.col(1);\n  c1.change(c2);  // corresponds to C1 -> C2\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 481,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrixColumn",
										"id": 467,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 482,
									"name": "col",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C",
										"constraint": {
											"type": "reference",
											"name": "ArrayMatrixColumn",
											"id": 467,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "E"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 327,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "MatrixColumn.change",
						"id": 392
					}
				},
				{
					"id": 483,
					"name": "interchange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 484,
							"name": "interchange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Interchange this column with another column of the same matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //am:ArrayMatrix\n  let c1 = am.col(0);\n  let c2 = am.col(1);\n  c1.interchange(c2);  // corresponds to C1 <-> C2\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 485,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrixColumn",
										"id": 467,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 486,
									"name": "col",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C",
										"constraint": {
											"type": "reference",
											"name": "ArrayMatrixColumn",
											"id": 467,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "E"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 345,
							"character": 13
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "MatrixColumn.interchange",
						"id": 395
					}
				},
				{
					"id": 487,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 488,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return an array corresponding to this column.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //am:ArrayMatrix\n  //  [1 1 1]\n  //  [0 1 1]\n  //  [0 0 1]\n  am.col(1).toArray() // [1,1,0]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 367,
							"character": 9
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						471
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						470,
						469
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						477,
						475
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						479,
						483,
						487
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/matrices/array-matrix.ts",
					"line": 296,
					"character": 30
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "NumberMatrixColumn",
					"id": 596
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "MatrixColumn",
					"id": 390,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 445,
			"name": "ArrayMatrixRow",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A single row of an ArrayMatrix."
			},
			"typeParameter": [
				{
					"id": 446,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 449,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 450,
							"name": "new ArrayMatrixRow",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 451,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrix",
										"id": 402,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								},
								{
									"id": 452,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayMatrixRow",
								"id": 445
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 213,
							"character": 26
						}
					]
				},
				{
					"id": 448,
					"name": "_index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 213,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 447,
					"name": "_matrix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 212,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "ArrayMatrix",
						"id": 402,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "E"
							}
						]
					}
				},
				{
					"id": 455,
					"name": "index",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Return the index of this row in the matrix it belongs to."
					},
					"getSignature": {
						"id": 456,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Return the index of this row in the matrix it belongs to."
						},
						"type": {
							"type": "intrinsic",
							"name": "number"
						}
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 230,
							"character": 11
						}
					]
				},
				{
					"id": 453,
					"name": "matrix",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Return the matrix to which this row belong."
					},
					"getSignature": {
						"id": 454,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Return the matrix to which this row belong."
						},
						"type": {
							"type": "reference",
							"name": "ArrayMatrix",
							"id": 402,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "E"
								}
							]
						}
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 223,
							"character": 12
						}
					]
				},
				{
					"id": 457,
					"name": "change",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 458,
							"name": "change",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Change this matrix row with another row of same matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //am:ArrayMatrix\n  let r1 = am.row(0);\n  let r2 = am.row(1);\n  r1.change(r2);  // corresponds to R1 -> R2\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 459,
									"name": "R",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrixRow",
										"id": 445,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 460,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R",
										"constraint": {
											"type": "reference",
											"name": "ArrayMatrixRow",
											"id": 445,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "E"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 242,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "MatrixRow.change",
						"id": 384
					}
				},
				{
					"id": 461,
					"name": "interchange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 462,
							"name": "interchange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Interchange this row with another row of the same matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //am:ArrayMatrix\n  let r1 = am.row(0);\n  let r2 = am.row(1);\n  r1.interchange(r2);  // corresponds to R1 <-> R2\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 463,
									"name": "R",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrixRow",
										"id": 445,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 464,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R",
										"constraint": {
											"type": "reference",
											"name": "ArrayMatrixRow",
											"id": 445,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "E"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 261,
							"character": 13
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "MatrixRow.interchange",
						"id": 387
					}
				},
				{
					"id": 465,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 466,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return an array corresponding to this row.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //am:ArrayMatrix\n  //  [1 0 0]\n  //  [0 1 0]\n  //  [0 0 1]\n  am.row(1).toArray() // [0,1,0]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 283,
							"character": 9
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						449
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						448,
						447
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						455,
						453
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						457,
						461,
						465
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/matrices/array-matrix.ts",
					"line": 211,
					"character": 27
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "NumberMatrixRow",
					"id": 564
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "MatrixRow",
					"id": 382,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 2683,
			"name": "BinarySearchTree",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 2684,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 2690,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2691,
							"name": "new BinarySearchTree",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 2692,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2693,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2694,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2695,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2696,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/trees/binary-search-tree.ts",
													"line": 7,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinarySearchTree",
								"id": 2683
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.__constructor",
								"id": 884
							}
						},
						{
							"id": 2697,
							"name": "new BinarySearchTree",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 2698,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2699,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2700,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2701,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2702,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/trees/binary-search-tree.ts",
													"line": 8,
													"character": 24
												}
											]
										}
									}
								},
								{
									"id": 2703,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinarySearchTree",
								"id": 2683
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.__constructor",
								"id": 884
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 5,
							"character": 45
						},
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 7,
							"character": 43
						},
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 8,
							"character": 52
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractBinaryTree.__constructor",
						"id": 884
					}
				},
				{
					"id": 2685,
					"name": "_comparator",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 5,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2686,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2687,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2688,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										},
										{
											"id": 2689,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "ds/trees/binary-search-tree.ts",
									"line": 5,
									"character": 24
								}
							]
						}
					}
				},
				{
					"id": 2749,
					"name": "_root",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 26,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 869,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree._root",
						"id": 883
					}
				},
				{
					"id": 2716,
					"name": "comparator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2717,
							"name": "comparator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the compare function used to order the elements in this BST.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  bst.comparator(); //returns a function\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2718,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 2719,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2720,
													"name": "x",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												},
												{
													"id": 2721,
													"name": "y",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "ds/trees/binary-search-tree.ts",
											"line": 64,
											"character": 15
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 64,
							"character": 12
						}
					]
				},
				{
					"id": 2743,
					"name": "deepestLeft",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 2744,
							"name": "deepestLeft",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2745,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 869,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 157,
							"character": 23
						}
					]
				},
				{
					"id": 2746,
					"name": "deepestRight",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 2747,
							"name": "deepestRight",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2748,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 869,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 161,
							"character": 24
						}
					]
				},
				{
					"id": 2710,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2711,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an item from the BST.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bst:BinarySearchTree<number> : inorder -> 1,5,8,9,11\n  bst.delete(5);  //inorder -> 1,8,9,10,11\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2712,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.delete",
								"id": 890
							},
							"implementationOf": {
								"type": "reference",
								"name": "BinaryTree.delete",
								"id": 759
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 46,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractBinaryTree.delete",
						"id": 890
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.delete",
						"id": 758
					}
				},
				{
					"id": 2726,
					"name": "deleteItem",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 2727,
							"name": "deleteItem",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2728,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 2729,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BinaryTreeNode",
												"id": 869,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 83,
							"character": 22
						}
					]
				},
				{
					"id": 2750,
					"name": "height",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2751,
							"name": "height",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the height of this binary tree.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  bt.height();// returns a number.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2752,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractBinaryTree.height",
								"id": 893
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 47,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree.height",
						"id": 893
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.height",
						"id": 761
					}
				},
				{
					"id": 2753,
					"name": "inorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2754,
							"name": "inorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after inorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.inorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2755,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractBinaryTree.inorder",
								"id": 896
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 58,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree.inorder",
						"id": 896
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.inorder",
						"id": 763
					}
				},
				{
					"id": 2740,
					"name": "inorderPredecessor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 2741,
							"name": "inorderPredecessor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2742,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 869,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 153,
							"character": 30
						}
					]
				},
				{
					"id": 2737,
					"name": "inorderSuccessor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 2738,
							"name": "inorderSuccessor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2739,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 869,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 149,
							"character": 28
						}
					]
				},
				{
					"id": 2704,
					"name": "insert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2705,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert a new item to the BST.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bst:BinarySearchTree<number> : inorder -> 1,5,8,9,11\n  bst.insert(10);  //inorder -> 1,5,8,9,10,11\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2706,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.insert",
								"id": 887
							},
							"implementationOf": {
								"type": "reference",
								"name": "BinaryTree.insert",
								"id": 756
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 20,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractBinaryTree.insert",
						"id": 887
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.insert",
						"id": 755
					}
				},
				{
					"id": 2722,
					"name": "insertItem",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 2723,
							"name": "insertItem",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2724,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 2725,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 71,
							"character": 22
						}
					]
				},
				{
					"id": 2707,
					"name": "insertMultiple",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2708,
							"name": "insertMultiple",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert multiple items to the BST.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bst:BinarySearchTree<number> : inorder -> 1,5,8,9,11\n  bst.insertMultiple(10,21,3,15);  //inorder -> 1,3,5,8,9,10,11,15,21\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2709,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 34,
							"character": 16
						}
					]
				},
				{
					"id": 2759,
					"name": "postorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2760,
							"name": "postorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after postorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.postorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2761,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractBinaryTree.postorder",
								"id": 902
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 88,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree.postorder",
						"id": 902
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.postorder",
						"id": 767
					}
				},
				{
					"id": 2756,
					"name": "preorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2757,
							"name": "preorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after preorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.preorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2758,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractBinaryTree.preorder",
								"id": 899
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 73,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree.preorder",
						"id": 899
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.preorder",
						"id": 765
					}
				},
				{
					"id": 2730,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 2731,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2732,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 115,
							"character": 18
						}
					]
				},
				{
					"id": 2713,
					"name": "search",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2714,
							"name": "search",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Search an item in the tree. Returns the item if found else returns null.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  bst.search(25);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2715,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 55,
							"character": 8
						}
					]
				},
				{
					"id": 2733,
					"name": "searchItem",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 2734,
							"name": "searchItem",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2735,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 2736,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BinaryTreeNode",
												"id": 869,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 134,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2690
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2685,
						2749
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2716,
						2743,
						2746,
						2710,
						2726,
						2750,
						2753,
						2740,
						2737,
						2704,
						2722,
						2707,
						2759,
						2756,
						2730,
						2713,
						2733
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/trees/binary-search-tree.ts",
					"line": 3,
					"character": 29
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractBinaryTree",
					"id": 881,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "BinaryTree",
					"id": 753,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 869,
			"name": "BinaryTreeNode",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A Node in a Binary Tree dataStructure"
			},
			"typeParameter": [
				{
					"id": 870,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 874,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 875,
							"name": "new BinaryTreeNode",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 876,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 869
							}
						},
						{
							"id": 877,
							"name": "new BinaryTreeNode",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 878,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 879,
									"name": "left",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								},
								{
									"id": 880,
									"name": "right",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 869
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 11,
							"character": 32
						},
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 13,
							"character": 22
						},
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 14,
							"character": 71
						}
					]
				},
				{
					"id": 871,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 9,
							"character": 7
						}
					],
					"type": {
						"type": "typeParameter",
						"name": "E"
					}
				},
				{
					"id": 872,
					"name": "left",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 10,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 869,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 873,
					"name": "right",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 11,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 869,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						874
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						871,
						872,
						873
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-binary-tree.ts",
					"line": 8,
					"character": 27
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "RopeNode",
					"id": 2844
				}
			]
		},
		{
			"id": 2613,
			"name": "DataTable",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An entry table with enumerable rowKeys (number) and string columnKeys."
			},
			"typeParameter": [
				{
					"id": 2614,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 2630,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2631,
							"name": "new DataTable",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "DataTable",
								"id": 2613
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractTable.__constructor",
								"id": 1698
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EntryTable.__constructor",
								"id": 2560
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/entry-table.ts",
							"line": 9,
							"character": 65
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractTable.__constructor",
						"id": 1698
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EntryTable.__constructor",
						"id": 2560
					}
				},
				{
					"id": 2653,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "ArrayMap",
						"id": 1570,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "reference",
								"name": "ArrayMap",
								"id": 1570,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "typeParameter",
										"name": "V"
									}
								]
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable._store",
						"id": 1697
					}
				},
				{
					"id": 2654,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2655,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add a row to this table only if row curresponding to given key is absent.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //t:Table<number,number,string>\n  var r = new ArrayMap<number,string>(5);\n  r.add(1,'01');\n  r.add(2,'02');\n  r.add(3,'03');\n  t.add(0, r);\n  /*\n    +-----+-----+-----+-----+\n    |  X  |  1  |  2  |  3  |\n    +-----+-----+-----+-----+\n    |  0  | 01  | 02  | 03  |\n    +-----+-----+-----+-----+\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2656,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2657,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMap",
										"id": 1570,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.add",
								"id": 1700
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 29,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.add",
						"id": 1700
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.add",
						"id": 1510
					}
				},
				{
					"id": 2649,
					"name": "attributes",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2650,
							"name": "attributes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the set of all column keys of this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.attributes(); //returns <Set>{1,2,3}\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EntryTable.attributes",
								"id": 2579
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/entry-table.ts",
							"line": 58,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EntryTable.attributes",
						"id": 2579
					}
				},
				{
					"id": 2673,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2674,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an entire row from this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.delete(0); //calling this function makes the table empty.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2675,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.delete",
								"id": 1729
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 93,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.delete",
						"id": 1729
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.delete",
						"id": 1539
					}
				},
				{
					"id": 2642,
					"name": "deleteIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2643,
							"name": "deleteIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an entire row from this table based on filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.deleteIf((rowKey, row) => (row.get(2)=='02')); //delete all rows with value '02' in the cell correspondin to column 2.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2644,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2645,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2646,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2647,
															"name": "rowKey",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2648,
															"name": "row",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/tables/entry-table.ts",
													"line": 47,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractTable.deleteIf",
								"id": 1732
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EntryTable.deleteIf",
								"id": 2572
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/entry-table.ts",
							"line": 47,
							"character": 10
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractTable.deleteIf",
						"id": 1732
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EntryTable.deleteIf",
						"id": 2572
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.deleteIf",
						"id": 1542
					}
				},
				{
					"id": 2676,
					"name": "drop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2677,
							"name": "drop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an entire column from this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.drop(2);\n  /*\n    +-----+-----+-----+\n    |  X  |  1  |  3  |\n    +-----+-----+-----+\n    |  0  | 01  | 03  |\n    +-----+-----+-----+\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2678,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.drop",
								"id": 1739
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 111,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.drop",
						"id": 1739
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.drop",
						"id": 1549
					}
				},
				{
					"id": 2670,
					"name": "extract",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2671,
							"name": "extract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an entire column of this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.extract(2); //returns <Map>[{0:'02'}]\n  t.extract(5); //returns <Map>[{0: undefined}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2672,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractMap",
								"id": 1060,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.extract",
								"id": 1716
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 73,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.extract",
						"id": 1716
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.extract",
						"id": 1526
					}
				},
				{
					"id": 2667,
					"name": "fetch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2668,
							"name": "fetch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an entire row of this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.fetch(0);  //returns <Map>[{1:'01'},{2:'02'},{3:'03'}]\n  t.fetch(1);  //returns undefined\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2669,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "AbstractMap",
										"id": 1060,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.fetch",
								"id": 1713
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 64,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.fetch",
						"id": 1713
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.fetch",
						"id": 1523
					}
				},
				{
					"id": 2663,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2664,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an entry from this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.get(0,3); //returns '03'\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2665,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2666,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.get",
								"id": 1709
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 54,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.get",
						"id": 1709
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.get",
						"id": 1519
					}
				},
				{
					"id": 2651,
					"name": "indexes",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2652,
							"name": "indexes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the set of all row keys of this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.indexes(); //returns <Set>{0}\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EntryTable.indexes",
								"id": 2581
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/entry-table.ts",
							"line": 71,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EntryTable.indexes",
						"id": 2581
					}
				},
				{
					"id": 2615,
					"name": "insert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2616,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert a new row at the end of this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var t = new DataTable<string>();\n  var r = new ArrayMap<number,string>(5);\n  r.add(\"a\",'0a');\n  r.add(\"b\",'0b');\n  r.add(\"c\",'0c');\n  t.insert(r);\n  /*\n    +-----+-----+-----+-----+\n    |  X  |  a  |  b  |  c  |\n    +-----+-----+-----+-----+\n    |  0  | 0a  | 0b  | 0c  |\n    +-----+-----+-----+-----+\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2617,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMap",
										"id": 1570,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/data-table.ts",
							"line": 24,
							"character": 8
						}
					]
				},
				{
					"id": 2620,
					"name": "limit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2621,
							"name": "limit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the first n rows in the table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.limit(5); //return first 5 rows of the table.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2622,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/data-table.ts",
							"line": 42,
							"character": 7
						}
					]
				},
				{
					"id": 2623,
					"name": "limitLast",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2624,
							"name": "limitLast",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the last n rows of this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.limitLast(5); //return last 5 rows\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2625,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/data-table.ts",
							"line": 55,
							"character": 11
						}
					]
				},
				{
					"id": 2618,
					"name": "num_rows",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2619,
							"name": "num_rows",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of rows in this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.num_rows(); //returns 1\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/data-table.ts",
							"line": 33,
							"character": 10
						}
					]
				},
				{
					"id": 2639,
					"name": "project",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2640,
							"name": "project",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a subset of columns in this table based on the filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.project([1,3]); //project only columns 1 and 3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2641,
									"name": "columns",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractTable.project",
								"id": 1726
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EntryTable.project",
								"id": 2569
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.project",
								"id": 1537
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/entry-table.ts",
							"line": 32,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractTable.project",
						"id": 1726
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EntryTable.project",
						"id": 2569
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.project",
						"id": 1536
					}
				},
				{
					"id": 2679,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2680,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove an entry from this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.remove(0,3); //returns '03' and removes it from the table\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2681,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2682,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.remove",
								"id": 1742
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 121,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.remove",
						"id": 1742
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.remove",
						"id": 1552
					}
				},
				{
					"id": 2632,
					"name": "select",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2633,
							"name": "select",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a subset of rows in this table based on the filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.select((rowKey,row)=>(key>2)); //selects and returns all rows with associated key > 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2634,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2635,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2636,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2637,
															"name": "rowKey",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2638,
															"name": "row",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/tables/entry-table.ts",
													"line": 19,
													"character": 18
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractTable.select",
								"id": 1719
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EntryTable.select",
								"id": 2562
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/entry-table.ts",
							"line": 19,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractTable.select",
						"id": 1719
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EntryTable.select",
						"id": 2562
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.select",
						"id": 1529
					}
				},
				{
					"id": 2658,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2659,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the value at the specified position in this table with the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.set(0,2,'2'); //returns '02'\n  t.set(1,2,'12'); //returns undefined\n  /*\n    +-----+-----+-----+-----+\n    |  X  |  1  |  2  |  3  |\n    +-----+-----+-----+-----+\n    |  0  | 01  |  2  | 03  |\n    +-----+-----+-----+-----+\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2660,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2661,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2662,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.set",
								"id": 1704
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 44,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.set",
						"id": 1704
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.set",
						"id": 1514
					}
				},
				{
					"id": 2626,
					"name": "subTable",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2627,
							"name": "subTable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a subset of rows beginning at the fromIndex inclusive and ending at toIndex exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.subTable(2,6); //returns table with rows 2,3,4,5\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2628,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2629,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/data-table.ts",
							"line": 68,
							"character": 10
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2630
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2653
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2654,
						2649,
						2673,
						2642,
						2676,
						2670,
						2667,
						2663,
						2651,
						2615,
						2620,
						2623,
						2618,
						2639,
						2679,
						2632,
						2658,
						2626
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/tables/data-table.ts",
					"line": 7,
					"character": 22
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "EntryTable",
					"id": 2556,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "number"
						},
						{
							"type": "intrinsic",
							"name": "string"
						},
						{
							"type": "typeParameter",
							"name": "V"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Table",
					"id": 1506,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "number"
						},
						{
							"type": "intrinsic",
							"name": "string"
						},
						{
							"type": "typeParameter",
							"name": "V"
						}
					]
				}
			]
		},
		{
			"id": 1913,
			"name": "DiGraph",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A directed graph data structure."
			},
			"typeParameter": [
				{
					"id": 1914,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1915,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1916,
							"name": "new DiGraph",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "DiGraph",
								"id": 1913
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractGraph.__constructor",
								"id": 1168
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/graphs/di-graph.ts",
							"line": 11,
							"character": 50
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractGraph.__constructor",
						"id": 1168
					}
				},
				{
					"id": 1925,
					"name": "_adjList",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 14,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Map",
						"id": 910,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Vertex",
								"id": 1006,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							{
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Edge",
										"id": 1012,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph._adjList",
						"id": 1167
					}
				},
				{
					"id": 1924,
					"name": "_edges",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 13,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Set",
						"id": 226,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Edge",
								"id": 1012,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph._edges",
						"id": 1166
					}
				},
				{
					"id": 1923,
					"name": "_vertices",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 12,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"name": "Set",
						"id": 226,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Vertex",
								"id": 1006,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph._vertices",
						"id": 1165
					}
				},
				{
					"id": 1926,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1927,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add a new vertex with the specified label to this graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.add(25);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1928,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.add",
								"id": 1170
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.add",
								"id": 1023
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 28,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.add",
						"id": 1170
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.add",
						"id": 1022
					}
				},
				{
					"id": 1929,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1930,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add new vertices with the labels present in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.addAll([25,22,11,43]);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1931,
									"name": "labels",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.addAll",
								"id": 1173
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.addAll",
								"id": 1026
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 38,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.addAll",
						"id": 1173
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.addAll",
						"id": 1025
					}
				},
				{
					"id": 1948,
					"name": "addEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1949,
							"name": "addEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add the specified edge to the graph. The start and end vertices are added automatically to the graph if not present.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, e:Edge<number>\n  g.addEdge(e);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1950,
									"name": "edge",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Edge",
										"id": 1012,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.addEdge",
								"id": 1192
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.addEdge",
								"id": 1045
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 117,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.addEdge",
						"id": 1192
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.addEdge",
						"id": 1044
					}
				},
				{
					"id": 1932,
					"name": "addVertex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1933,
							"name": "addVertex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add the specified vertex to the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, v:Vertex<number>\n  g.addVertex(v);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1934,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.addVertex",
								"id": 1176
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.addVertex",
								"id": 1029
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 48,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.addVertex",
						"id": 1176
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.addVertex",
						"id": 1028
					}
				},
				{
					"id": 1935,
					"name": "addVertices",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1936,
							"name": "addVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all vertices in the specified array to the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, a,b,c,d:Vertex<number>\n  g.addVertices([a,b,c,d]);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1937,
									"name": "vertices",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Vertex",
											"id": 1006,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "E"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.addVertices",
								"id": 1179
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.addVertices",
								"id": 1032
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 58,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.addVertices",
						"id": 1179
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.addVertices",
						"id": 1031
					}
				},
				{
					"id": 1958,
					"name": "adjacentEdges",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1959,
							"name": "adjacentEdges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of edges starting from specified vertex.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, v:Vertex<number>\n  g.adjacentEdges(v);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1960,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Edge",
												"id": 1012,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.adjacentEdges",
								"id": 1202
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.adjacentEdges",
								"id": 1055
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 160,
							"character": 15
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.adjacentEdges",
						"id": 1202
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.adjacentEdges",
						"id": 1054
					}
				},
				{
					"id": 1961,
					"name": "adjacentVertices",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1962,
							"name": "adjacentVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of vertices adjacent to the specified vertex.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, v:Vertex<number>\n  g.adjacentVertices(v);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1963,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Vertex",
												"id": 1006,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.adjacentVertices",
								"id": 1205
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.adjacentVertices",
								"id": 1058
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 170,
							"character": 18
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.adjacentVertices",
						"id": 1205
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.adjacentVertices",
						"id": 1057
					}
				},
				{
					"id": 1920,
					"name": "bfs",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1921,
							"name": "bfs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "BFS Traverse the graph starting from the specified vertex and return the list of vertices.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //dgraph:DGraph<number>\n  dgraph.bfs(); // returns a List of numbers.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1922,
									"name": "startVertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._vertices.toArray()[0]"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/graphs/di-graph.ts",
							"line": 46,
							"character": 5
						}
					]
				},
				{
					"id": 1944,
					"name": "createEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1945,
							"name": "createEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create vertices from the given labels and an edge connecting them and add it to the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.createEdge(25,26);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1946,
									"name": "startLabel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1947,
									"name": "endLabel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.createEdge",
								"id": 1188
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.createEdge",
								"id": 1041
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 105,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.createEdge",
						"id": 1188
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.createEdge",
						"id": 1040
					}
				},
				{
					"id": 1917,
					"name": "dfs",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1918,
							"name": "dfs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "DFS Traverse the graph starting from the specified vertex and return the list of vertices.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //dgraph:DGraph<number>\n  dgraph.dfs(); // returns a List of numbers.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1919,
									"name": "startVertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._vertices.toArray()[0]"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/graphs/di-graph.ts",
							"line": 23,
							"character": 5
						}
					]
				},
				{
					"id": 1956,
					"name": "edgeSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1957,
							"name": "edgeSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of edges present in the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.edgeSet();\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Edge",
										"id": 1012,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.edgeSet",
								"id": 1200
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.edgeSet",
								"id": 1053
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 151,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.edgeSet",
						"id": 1200
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.edgeSet",
						"id": 1052
					}
				},
				{
					"id": 1938,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1939,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove a single vertex with the specified label from the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.remove(25);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1940,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.remove",
								"id": 1182
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.remove",
								"id": 1035
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 72,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.remove",
						"id": 1182
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.remove",
						"id": 1034
					}
				},
				{
					"id": 1951,
					"name": "removeEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1952,
							"name": "removeEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove the specified edge from the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, e:Edge<number>\n  g.removeEdge(e);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1953,
									"name": "edge",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Edge",
										"id": 1012,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.removeEdge",
								"id": 1195
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.removeEdge",
								"id": 1048
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 128,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.removeEdge",
						"id": 1195
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.removeEdge",
						"id": 1047
					}
				},
				{
					"id": 1941,
					"name": "removeVertex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1942,
							"name": "removeVertex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove the specified vertex from the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, v:Vertex<number>\n  g.removeVertex(v);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1943,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.removeVertex",
								"id": 1185
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.removeVertex",
								"id": 1038
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 89,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.removeVertex",
						"id": 1185
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.removeVertex",
						"id": 1037
					}
				},
				{
					"id": 1954,
					"name": "vertexSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1955,
							"name": "vertexSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of vertices present in the graph.(a copy of the set is returned).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.vertexSet();\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractGraph.vertexSet",
								"id": 1198
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.vertexSet",
								"id": 1051
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 142,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractGraph.vertexSet",
						"id": 1198
					},
					"implementationOf": {
						"type": "reference",
						"name": "Graph.vertexSet",
						"id": 1050
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1915
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1925,
						1924,
						1923
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1926,
						1929,
						1948,
						1932,
						1935,
						1958,
						1961,
						1920,
						1944,
						1917,
						1956,
						1938,
						1951,
						1941,
						1954
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/graphs/di-graph.ts",
					"line": 11,
					"character": 20
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractGraph",
					"id": 1163,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Graph",
					"id": 1020,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 2239,
			"name": "Dictionary",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A Map whose keys are always of string type."
			},
			"typeParameter": [
				{
					"id": 2240,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 2264,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2265,
							"name": "new Dictionary",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 2266,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "MapEntry",
											"id": 905,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "typeParameter",
													"name": "E"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Dictionary",
								"id": 2239
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.__constructor",
								"id": 1065
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 7,
							"character": 34
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.__constructor",
						"id": 1065
					}
				},
				{
					"id": 2263,
					"name": "_keys",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 7,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractSet",
						"id": 290,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap._keys",
						"id": 1064
					}
				},
				{
					"id": 2262,
					"name": "_values",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 6,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractList",
						"id": 769,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "E"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap._values",
						"id": 1063
					}
				},
				{
					"id": 2267,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2268,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the mappings from this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//map: [{\"1\":1},{\"2\":2},{\"3\":3}]\nmap.clear();\n//now : []\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.clear",
								"id": 1068
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.clear",
								"id": 914
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 21,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.clear",
						"id": 1068
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.clear",
						"id": 913
					}
				},
				{
					"id": 2247,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2248,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a shallow copy of this Dictionary instance.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let newDict = dict.clone();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 401
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/dictionary.ts",
							"line": 51,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 400
					}
				},
				{
					"id": 2269,
					"name": "compute",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2270,
							"name": "compute",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to 12\n  map.compute(k1, (key,value,map)=>(value+11)); //returns 12\n  //now the value changes to 12+11 -> 23\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2271,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2272,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2273,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2274,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2275,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2276,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	},
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 2277,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 32,
													"character": 29
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.compute",
								"id": 1070
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 32,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.compute",
						"id": 1070
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.compute",
						"id": 915
					}
				},
				{
					"id": 2278,
					"name": "computeIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2279,
							"name": "computeIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to 12\n  map.computeIfAbsent(k1, (key,value,map)=>(23)); //returns 12\n  //value does not change\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2280,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2281,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2282,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2283,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2284,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2285,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	},
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 2286,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 46,
													"character": 37
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.computeIfAbsent",
								"id": 1079
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 46,
							"character": 16
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.computeIfAbsent",
						"id": 1079
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.computeIfAbsent",
						"id": 924
					}
				},
				{
					"id": 2287,
					"name": "computeIfPresent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2288,
							"name": "computeIfPresent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to null\n  map.computeIfAbsent(k1, (key,value,map)=>(value+11)); //returns null\n  //value does not change\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2289,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2290,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2291,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2292,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2293,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2294,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2295,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 62,
													"character": 38
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.computeIfPresent",
								"id": 1088
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 62,
							"character": 17
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.computeIfPresent",
						"id": 1088
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.computeIfPresent",
						"id": 933
					}
				},
				{
					"id": 2296,
					"name": "containsKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2297,
							"name": "containsKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains a mapping for the specified key.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.conainsKey(k1); //returns true\n  map.containsKey(k5); //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2298,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.containsKey",
								"id": 1097
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 78,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.containsKey",
						"id": 1097
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.containsKey",
						"id": 942
					}
				},
				{
					"id": 2299,
					"name": "containsValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2300,
							"name": "containsValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map maps one or more keys to the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.conainsValue(1); //returns true\n  map.containsValue(5); //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2301,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.containsValue",
								"id": 1100
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.containsValue",
								"id": 946
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 89,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.containsValue",
						"id": 1100
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.containsValue",
						"id": 945
					}
				},
				{
					"id": 2241,
					"name": "count",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2242,
							"name": "count",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number occurances of an item in the dictionary",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //dict contains [{'a':1},{'b':2},{'c':3},{'d':2},{'f':1},{'e':2},{'g':4}]\n  dict.count(2) // returns 3\n  dict.count(7) // return 0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2243,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/dictionary.ts",
							"line": 20,
							"character": 7
						}
					]
				},
				{
					"id": 2302,
					"name": "entrySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2303,
							"name": "entrySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the mappings contained in this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.entrySet(); //returns Set [{key:k1, value:1},{key:k2, value:2}]\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 290,
								"typeArguments": [
									{
										"type": "reference",
										"name": "MapEntry",
										"id": 905,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.entrySet",
								"id": 1103
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.entrySet",
								"id": 949
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 99,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.entrySet",
						"id": 1103
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.entrySet",
						"id": 948
					}
				},
				{
					"id": 2304,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2305,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified map with this map for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map1 : [{k1:1},{k2:2},{k3:null}]\n  //map2 : [{k1:1},{k3:4}]\n  map1.equals(map2) //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2306,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.equals",
								"id": 1105
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.equals",
								"id": 951
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 115,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.equals",
						"id": 1105
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.equals",
						"id": 950
					}
				},
				{
					"id": 2307,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2308,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.forEach((key, value, map)=>{\n     console.log(key+\"->\"+value+\",\");\n  });\n  //Output: one->1,two->2,three->3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2309,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2310,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2311,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2312,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2313,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2314,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 137,
													"character": 16
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.forEach",
								"id": 1108
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 137,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.forEach",
						"id": 1108
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.forEach",
						"id": 953
					}
				},
				{
					"id": 2255,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2256,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the Object from the JSON string",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //json = '{\"a\":1,\"b\":2,\"c\":3}'\n  dict = new Dictionary<number>().fromString(json,(x)=>(parseFloat(x)));\n  //dict contains [{'a':1},{'b':2},{'c':3}]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2257,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2258,
									"name": "deserializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2259,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2260,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2261,
															"name": "itemJSON",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/maps/dictionary.ts",
													"line": 79,
													"character": 42
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/dictionary.ts",
							"line": 79,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.fromString",
						"id": 1563
					}
				},
				{
					"id": 2315,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2316,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped. undefined if there is no mapping.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.get(k1); //returns 1\n  map.get(k3); //returns null\n  map.get(k4); //returns undefined\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2317,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.get",
								"id": 1116
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 152,
							"character": 4
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.get",
						"id": 1116
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.get",
						"id": 961
					}
				},
				{
					"id": 2244,
					"name": "getKeys",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2245,
							"name": "getKeys",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a set of keys associated with a given item",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //dict contains [{'a':1},{'b':2},{'c':3},{'d':2},{'f':1},{'e':2},{'g':4}]\n  dict.getKeys(2) //return a set containing ['b','d','e']\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2246,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/dictionary.ts",
							"line": 36,
							"character": 9
						}
					]
				},
				{
					"id": 2318,
					"name": "getOrDefault",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2319,
							"name": "getOrDefault",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key or if key is mapped to null.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.getOrDefault(k1,5); //returns 1\n  map.getOrDefault(k3,12); //returns 12\n  map.getOrDefault(k4,16); //returns 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2320,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2321,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.getOrDefault",
								"id": 1119
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 166,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.getOrDefault",
						"id": 1119
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.getOrDefault",
						"id": 964
					}
				},
				{
					"id": 2322,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2323,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains no key-value mappings.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.isEmpty(); //false\n  //map : [{k1:null},{k2:null},{k3:null}]\n  map.isEmpty(); //false\n  //map : []\n  map.isEmpty(); //true\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.isEmpty",
								"id": 1123
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.isEmpty",
								"id": 969
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 180,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.isEmpty",
						"id": 1123
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.isEmpty",
						"id": 968
					}
				},
				{
					"id": 2324,
					"name": "isNull",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2325,
							"name": "isNull",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains mappings to only null values or if  the map is empty.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.isNull(); //false\n  //map : [{k1:null},{k2:null},{k3:null}]\n  map.isNull(); //true\n  //map : []\n  map.isNull(); //true\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.isNull",
								"id": 1125
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 194,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.isNull",
						"id": 1125
					}
				},
				{
					"id": 2326,
					"name": "keySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2327,
							"name": "keySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the keys contained in this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.keySet(); //[\"one\",\"two\",\"three\"]\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 290,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.keySet",
								"id": 1127
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.keySet",
								"id": 971
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 204,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.keySet",
						"id": 1127
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.keySet",
						"id": 970
					}
				},
				{
					"id": 2328,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2329,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Associates the specified value with the specified key in this map.Returns the old value associated with the key or  undefined.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//map : [{\"one\":1},{\"two\":2},{\"three\":3}]\nmap.put(\"one\",22); //return 1\n//now map : [{\"one\":22},{\"two\":2},{\"three\":3}]\nmap.put(\"four\",4);//return undefined\n//now map : [{\"one\":22},{\"two\":2},{\"three\":3},{\"four\":4}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2330,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2331,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.put",
								"id": 1129
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 217,
							"character": 4
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.put",
						"id": 1129
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.put",
						"id": 972
					}
				},
				{
					"id": 2332,
					"name": "putAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2333,
							"name": "putAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies all of the mappings from the specified map to this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map1: [{k1:v1},{k2:v2},{k3:v3}], map2: [{k2:v4},{k4:v6},{k6:v8}]\n  map1.putAll(map2);\n  //now map1: [{k1:v1},{k2:v4},{k3:v3},{k4:v6},{k6:v8}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2334,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.putAll",
								"id": 1133
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.putAll",
								"id": 977
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 237,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.putAll",
						"id": 1133
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.putAll",
						"id": 976
					}
				},
				{
					"id": 2335,
					"name": "putIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2336,
							"name": "putIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns undefined, else returns the current value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.putIfAbsent(\"four\",4); //return undefined (adds {\"four\":4} to the map)\n  map.putIfAbsent(\"one\",23); //return 1 (map unchanged)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2337,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2338,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.putIfAbsent",
								"id": 1136
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 249,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.putIfAbsent",
						"id": 1136
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.putIfAbsent",
						"id": 979
					}
				},
				{
					"id": 2339,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2340,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the mapping for a key from this map if it is present.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.remove(\"one\"); //return 1\n  //now map : [{\"two\":2},{\"three\":3}]\n  map.remove(\"four\"); //return undefined (map unchanged)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2341,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.remove",
								"id": 1140
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 263,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.remove",
						"id": 1140
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.remove",
						"id": 983
					}
				},
				{
					"id": 2342,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2343,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.removeIf(\"one\", 1); //return true\n  //now map : [{\"two\":2},{\"three\":3}]\n  map.removeIf(\"two\",5); //return false (map unchanged)\n  map.removeIf(\"four\",4); //return false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2344,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2345,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.removeIf",
								"id": 1143
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 281,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.removeIf",
						"id": 1143
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.removeIf",
						"id": 986
					}
				},
				{
					"id": 2346,
					"name": "replace",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2347,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replace all entries with specified value with the new value. Returns true if map was changed.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.replace(5,2) //returns true;\n  //now map : [{k1:1},{k2:2},{k3:3},{k4:2},{k5:1}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2348,
									"name": "oldValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 2349,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.replace",
								"id": 1147
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.replace",
								"id": 991
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 293,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.replace",
						"id": 1147
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.replace",
						"id": 990
					}
				},
				{
					"id": 2350,
					"name": "replaceAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2351,
							"name": "replaceAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.replaceAll((k,v,m)=>(v*2)); //replace with its double\n  //map : [{k1:2},{k2:10},{k3:6},{k4:10},{k5:2}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2352,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2353,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2354,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2355,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2356,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2357,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "this"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 310,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.replaceAll",
								"id": 1151
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 310,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.replaceAll",
						"id": 1151
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.replaceAll",
						"id": 994
					}
				},
				{
					"id": 2358,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2359,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of key-value mappings in this map.(key->null mappings are counted)",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.size(); //return 5\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.size",
								"id": 1159
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.size",
								"id": 1003
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 322,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.size",
						"id": 1159
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.size",
						"id": 1002
					}
				},
				{
					"id": 2249,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2250,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts the dictionary into a JSON String",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //dictionary contains [{'a':1},{'b':2},{'c':3}]\n  console.log(arrayList.toString((x)=>(x.toString())));\n  //Output\n  //'{\"a\":1,\"b\":2,\"c\":3}'\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2251,
									"name": "serializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2252,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2253,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2254,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	},
																	{
																		"type": "intrinsic",
																		"name": "null"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/maps/dictionary.ts",
													"line": 63,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/dictionary.ts",
							"line": 63,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.toString",
						"id": 1557
					}
				},
				{
					"id": 2360,
					"name": "values",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2361,
							"name": "values",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a List view of the values contained in this map.\n//map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\nmap.values(); //return list : [1,5,3,5,1]"
							},
							"type": {
								"type": "reference",
								"name": "AbstractList",
								"id": 769,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.values",
								"id": 1161
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.values",
								"id": 1005
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 331,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.values",
						"id": 1161
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.values",
						"id": 1004
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2264
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2263,
						2262
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2267,
						2247,
						2269,
						2278,
						2287,
						2296,
						2299,
						2241,
						2302,
						2304,
						2307,
						2255,
						2315,
						2244,
						2318,
						2322,
						2324,
						2326,
						2328,
						2332,
						2335,
						2339,
						2342,
						2346,
						2350,
						2358,
						2249,
						2360
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/maps/dictionary.ts",
					"line": 11,
					"character": 23
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractMap",
					"id": 1060,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						},
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Map",
					"id": 910,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						},
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 398,
					"typeArguments": [
						{
							"type": "reference",
							"name": "Dictionary",
							"id": 2239,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "E"
								}
							]
						}
					]
				},
				{
					"type": "reference",
					"name": "Serializable",
					"id": 1556
				}
			]
		},
		{
			"id": 1012,
			"name": "Edge",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": " An Edge in graph datastructure."
			},
			"typeParameter": [
				{
					"id": 1013,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1016,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1017,
							"name": "new Edge",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1018,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								},
								{
									"id": 1019,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Edge",
								"id": 1012
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 15,
							"character": 16
						}
					]
				},
				{
					"id": 1015,
					"name": "end",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 15,
							"character": 5
						}
					],
					"type": {
						"type": "reference",
						"name": "Vertex",
						"id": 1006,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "E"
							}
						]
					}
				},
				{
					"id": 1014,
					"name": "start",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 14,
							"character": 7
						}
					],
					"type": {
						"type": "reference",
						"name": "Vertex",
						"id": 1006,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "E"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1016
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1015,
						1014
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/graph.ts",
					"line": 13,
					"character": 17
				}
			]
		},
		{
			"id": 2556,
			"name": "EntryTable",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Entry Table is mapping from a set of row and column keys to a value."
			},
			"typeParameter": [
				{
					"id": 2557,
					"name": "R",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 2558,
					"name": "C",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 2559,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 2560,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2561,
							"name": "new EntryTable",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EntryTable",
								"id": 2556
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractTable.__constructor",
								"id": 1698
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/entry-table.ts",
							"line": 9,
							"character": 65
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractTable.__constructor",
						"id": 1698
					}
				},
				{
					"id": 2583,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "ArrayMap",
						"id": 1570,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "R"
							},
							{
								"type": "reference",
								"name": "ArrayMap",
								"id": 1570,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "C"
									},
									{
										"type": "typeParameter",
										"name": "V"
									}
								]
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable._store",
						"id": 1697
					}
				},
				{
					"id": 2584,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2585,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add a row to this table only if row curresponding to given key is absent.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //t:Table<number,number,string>\n  var r = new ArrayMap<number,string>(5);\n  r.add(1,'01');\n  r.add(2,'02');\n  r.add(3,'03');\n  t.add(0, r);\n  /*\n    +-----+-----+-----+-----+\n    |  X  |  1  |  2  |  3  |\n    +-----+-----+-----+-----+\n    |  0  | 01  | 02  | 03  |\n    +-----+-----+-----+-----+\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2586,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								},
								{
									"id": 2587,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMap",
										"id": 1570,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.add",
								"id": 1700
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 29,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.add",
						"id": 1700
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.add",
						"id": 1510
					}
				},
				{
					"id": 2579,
					"name": "attributes",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2580,
							"name": "attributes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the set of all column keys of this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.attributes(); //returns <Set>{1,2,3}\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "C"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/entry-table.ts",
							"line": 58,
							"character": 12
						}
					]
				},
				{
					"id": 2603,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2604,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an entire row from this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.delete(0); //calling this function makes the table empty.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2605,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.delete",
								"id": 1729
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.delete",
								"id": 1540
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 93,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.delete",
						"id": 1729
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.delete",
						"id": 1539
					}
				},
				{
					"id": 2572,
					"name": "deleteIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2573,
							"name": "deleteIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an entire row from this table based on filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.deleteIf((rowKey, row) => (row.get(2)=='02')); //delete all rows with value '02' in the cell correspondin to column 2.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2574,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2575,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2576,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2577,
															"name": "rowKey",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "R"
															}
														},
														{
															"id": 2578,
															"name": "row",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "C"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/tables/entry-table.ts",
													"line": 47,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractTable.deleteIf",
								"id": 1732
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/entry-table.ts",
							"line": 47,
							"character": 10
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractTable.deleteIf",
						"id": 1732
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.deleteIf",
						"id": 1542
					}
				},
				{
					"id": 2606,
					"name": "drop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2607,
							"name": "drop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an entire column from this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.drop(2);\n  /*\n    +-----+-----+-----+\n    |  X  |  1  |  3  |\n    +-----+-----+-----+\n    |  0  | 01  | 03  |\n    +-----+-----+-----+\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2608,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.drop",
								"id": 1739
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.drop",
								"id": 1550
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 111,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.drop",
						"id": 1739
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.drop",
						"id": 1549
					}
				},
				{
					"id": 2600,
					"name": "extract",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2601,
							"name": "extract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an entire column of this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.extract(2); //returns <Map>[{0:'02'}]\n  t.extract(5); //returns <Map>[{0: undefined}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2602,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractMap",
								"id": 1060,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "R"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.extract",
								"id": 1716
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.extract",
								"id": 1527
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 73,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.extract",
						"id": 1716
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.extract",
						"id": 1526
					}
				},
				{
					"id": 2597,
					"name": "fetch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2598,
							"name": "fetch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an entire row of this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.fetch(0);  //returns <Map>[{1:'01'},{2:'02'},{3:'03'}]\n  t.fetch(1);  //returns undefined\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2599,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "AbstractMap",
										"id": 1060,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.fetch",
								"id": 1713
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.fetch",
								"id": 1524
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 64,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.fetch",
						"id": 1713
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.fetch",
						"id": 1523
					}
				},
				{
					"id": 2593,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2594,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an entry from this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.get(0,3); //returns '03'\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2595,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								},
								{
									"id": 2596,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.get",
								"id": 1709
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.get",
								"id": 1520
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 54,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.get",
						"id": 1709
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.get",
						"id": 1519
					}
				},
				{
					"id": 2581,
					"name": "indexes",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2582,
							"name": "indexes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the set of all row keys of this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.indexes(); //returns <Set>{0}\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "R"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/entry-table.ts",
							"line": 71,
							"character": 9
						}
					]
				},
				{
					"id": 2569,
					"name": "project",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2570,
							"name": "project",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a subset of columns in this table based on the filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.project([1,3]); //project only columns 1 and 3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2571,
									"name": "columns",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractTable.project",
								"id": 1726
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.project",
								"id": 1537
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/entry-table.ts",
							"line": 32,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractTable.project",
						"id": 1726
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.project",
						"id": 1536
					}
				},
				{
					"id": 2609,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2610,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove an entry from this table.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.remove(0,3); //returns '03' and removes it from the table\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2611,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								},
								{
									"id": 2612,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.remove",
								"id": 1742
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.remove",
								"id": 1553
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 121,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.remove",
						"id": 1742
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.remove",
						"id": 1552
					}
				},
				{
					"id": 2562,
					"name": "select",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2563,
							"name": "select",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a subset of rows in this table based on the filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.select((rowKey,row)=>(key>2)); //selects and returns all rows with associated key > 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2564,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2565,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2566,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2567,
															"name": "rowKey",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "R"
															}
														},
														{
															"id": 2568,
															"name": "row",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "C"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/tables/entry-table.ts",
													"line": 19,
													"character": 18
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractTable.select",
								"id": 1719
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tables/entry-table.ts",
							"line": 19,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractTable.select",
						"id": 1719
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.select",
						"id": 1529
					}
				},
				{
					"id": 2588,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2589,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the value at the specified position in this table with the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  t.set(0,2,'2'); //returns '02'\n  t.set(1,2,'12'); //returns undefined\n  /*\n    +-----+-----+-----+-----+\n    |  X  |  1  |  2  |  3  |\n    +-----+-----+-----+-----+\n    |  0  | 01  |  2  | 03  |\n    +-----+-----+-----+-----+\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2590,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								},
								{
									"id": 2591,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								},
								{
									"id": 2592,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractTable.set",
								"id": 1704
							},
							"implementationOf": {
								"type": "reference",
								"name": "Table.set",
								"id": 1515
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-table.ts",
							"line": 44,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractTable.set",
						"id": 1704
					},
					"implementationOf": {
						"type": "reference",
						"name": "Table.set",
						"id": 1514
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2560
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2583
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2584,
						2579,
						2603,
						2572,
						2606,
						2600,
						2597,
						2593,
						2581,
						2569,
						2609,
						2562,
						2588
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/tables/entry-table.ts",
					"line": 9,
					"character": 23
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractTable",
					"id": 1693,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "R"
						},
						{
							"type": "typeParameter",
							"name": "C"
						},
						{
							"type": "typeParameter",
							"name": "V"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "DataTable",
					"id": 2613
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Table",
					"id": 1506,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "R"
						},
						{
							"type": "typeParameter",
							"name": "C"
						},
						{
							"type": "typeParameter",
							"name": "V"
						}
					]
				}
			]
		},
		{
			"id": 1964,
			"name": "HistoryList",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A list of limited size 'n' that stores only the last n items."
			},
			"typeParameter": [
				{
					"id": 1965,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1979,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Constructs an empty list with an initial capacity of ten.\nConstructs an empty list with the specified initial capacity.\nConstructs a list containing the items."
					},
					"signatures": [
						{
							"id": 1980,
							"name": "new HistoryList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs an empty list with an initial capacity of ten."
							},
							"type": {
								"type": "reference",
								"name": "HistoryList",
								"id": 1964
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 771
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.__constructor",
								"id": 1749
							}
						},
						{
							"id": 1981,
							"name": "new HistoryList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs an empty list with the specified initial capacity."
							},
							"parameters": [
								{
									"id": 1982,
									"name": "initialCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "HistoryList",
								"id": 1964
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 771
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.__constructor",
								"id": 1749
							}
						},
						{
							"id": 1983,
							"name": "new HistoryList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs a list containing the items."
							},
							"parameters": [
								{
									"id": 1984,
									"name": "initialCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1985,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "HistoryList",
								"id": 1964
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 771
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.__constructor",
								"id": 1749
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 11,
							"character": 30
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 16,
							"character": 15
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 20,
							"character": 37
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 24,
							"character": 51
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractList.__constructor",
						"id": 771
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.__constructor",
						"id": 1749
					}
				},
				{
					"id": 1978,
					"name": "_capacity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 11,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList._capacity",
						"id": 1748
					}
				},
				{
					"id": 2066,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "typeParameter",
							"name": "E"
						}
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 172
					}
				},
				{
					"id": 1966,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1967,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends the specified element to the end of this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5,6] -capacity 6\n  list.add(7); //[2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1968,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "ArrayList.add",
								"id": 1756
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 664
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/history-list.ts",
							"line": 13,
							"character": 5
						},
						{
							"fileName": "ds/lists/history-list.ts",
							"line": 14,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayList.add",
						"id": 1756
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.add",
						"id": 663
					}
				},
				{
					"id": 1969,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1970,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends all of the elements in the specified array to the end of this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5] - capacity 6\n  list.addAll([6,7]); //[2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1971,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "ArrayList.addAll",
								"id": 1762
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 670
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/history-list.ts",
							"line": 28,
							"character": 8
						},
						{
							"fileName": "ds/lists/history-list.ts",
							"line": 29,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayList.addAll",
						"id": 1762
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.addAll",
						"id": 669
					}
				},
				{
					"id": 2067,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2068,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 182
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.clear",
								"id": 710
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 182
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.clear",
						"id": 709
					}
				},
				{
					"id": 1975,
					"name": "clearUntill",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1976,
							"name": "clearUntill",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Clear old items in the history list retaining the last n elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5]\n  list.clearUntil(2); //return [1,2,3]\n  //now list contain [4,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1977,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/history-list.ts",
							"line": 55,
							"character": 13
						}
					]
				},
				{
					"id": 2015,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2016,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a shallow copy of this ArrayList instance.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let newArrayList = arrayList.clone();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.clone",
								"id": 1797
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 401
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 124,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.clone",
						"id": 1797
					},
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 400
					}
				},
				{
					"id": 2069,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2070,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2071,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 184
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.contains",
								"id": 712
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 184
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.contains",
						"id": 711
					}
				},
				{
					"id": 2072,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2073,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2074,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 187
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.containsAll",
								"id": 715
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 187
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.containsAll",
						"id": 714
					}
				},
				{
					"id": 1986,
					"name": "ensureCapacity",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1987,
							"name": "ensureCapacity",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList has a capacity 10\n  arrayList.ensureCapacity(15);\n  //new capacity is 15\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1988,
									"name": "minCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.ensureCapacity",
								"id": 1768
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 71,
							"character": 16
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.ensureCapacity",
						"id": 1768
					}
				},
				{
					"id": 2075,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2076,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2077,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 190
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.equals",
								"id": 718
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 190
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.equals",
						"id": 717
					}
				},
				{
					"id": 1989,
					"name": "filter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1990,
							"name": "filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new ArrayList after filtering the items based on the filterFn",
								"tags": [
									{
										"tag": "example",
										"text": "\n//arryList [1,2,3,4,5]\narrayList.filter(x => (x < 4)); //returns an ArrayList [1,2,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1991,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1992,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1993,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1994,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1995,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1996,
															"name": "list",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reference",
																"name": "ArrayList",
																"id": 1746,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 81,
													"character": 18
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.filter",
								"id": 1771
							}
						},
						{
							"id": 1997,
							"name": "filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new ArrayList after filtering the items based on the filterFn with the given initial capacity",
								"tags": [
									{
										"tag": "example",
										"text": "\n//arryList [1,2,3,4,5]\narrayList.filter(x => (x < 4), 5); //returns an ArrayList [1,2,3] with capacity 5\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1998,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1999,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2000,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2001,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2002,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2003,
															"name": "list",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reference",
																"name": "ArrayList",
																"id": 1746,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 88,
													"character": 18
												}
											]
										}
									}
								},
								{
									"id": 2004,
									"name": "capacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.filter",
								"id": 1771
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 81,
							"character": 8
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 88,
							"character": 8
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 89,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.filter",
						"id": 1771
					}
				},
				{
					"id": 2101,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2102,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2103,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2104,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2105,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2106,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2107,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2108,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 216
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 216
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.forEach",
						"id": 743
					}
				},
				{
					"id": 2025,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2026,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the Object from the JSON string",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //json = \"[1,2,3,4]\"\n  arrayList = new ArrayList<number>().fromString(json,(x)=>(parseFloat(x)));\n  //arrayList contains [1,2,3,4]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2027,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2028,
									"name": "deserializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2029,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2030,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2031,
															"name": "itemJ",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 160,
													"character": 41
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.fromString",
								"id": 1807
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 160,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.fromString",
						"id": 1807
					},
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.fromString",
						"id": 1563
					}
				},
				{
					"id": 2032,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2033,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an item from the list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.get(2));\n  //Output: 3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2034,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.get",
								"id": 786
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.get",
								"id": 676
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 63,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.get",
						"id": 786
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.get",
						"id": 675
					}
				},
				{
					"id": 2035,
					"name": "indexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2036,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,2,4]\n  console.log(list.indexOf(2));\n  //Output: 1\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2037,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.indexOf",
								"id": 789
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.indexOf",
								"id": 679
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 74,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.indexOf",
						"id": 789
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.indexOf",
						"id": 678
					}
				},
				{
					"id": 2078,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2079,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 193
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.isEmpty",
								"id": 721
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 193
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.isEmpty",
						"id": 720
					}
				},
				{
					"id": 2109,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2110,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 224
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.iterator",
								"id": 752
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 224
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.iterator",
						"id": 751
					}
				},
				{
					"id": 2038,
					"name": "lastIndexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2039,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of last occurrence of the element.\n  //list contains [1,2,3,2,4]\n  console.log(list.lastIndexOf(2));\n  //Output: 3"
							},
							"parameters": [
								{
									"id": 2040,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.lastIndexOf",
								"id": 792
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.lastIndexOf",
								"id": 682
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 84,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.lastIndexOf",
						"id": 792
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.lastIndexOf",
						"id": 681
					}
				},
				{
					"id": 2041,
					"name": "listIterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2042,
							"name": "listIterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list iterator over the elements in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var listIterator = list.listIterator(); //starts at index 0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2043,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.listIterator",
								"id": 795
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.listIterator",
								"id": 685
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 93,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.listIterator",
						"id": 795
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.listIterator",
						"id": 684
					}
				},
				{
					"id": 2044,
					"name": "median",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2045,
							"name": "median",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the median of this list. If the list is empty returns undefined.\nIn case of two medians the later one is preferred.",
								"tags": [
									{
										"tag": "example",
										"text": "\n //list contains [1, 2, 3, 4]\nlist.median(); //returns 3\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.median",
								"id": 798
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.median",
								"id": 688
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 104,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.median",
						"id": 798
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.median",
						"id": 687
					}
				},
				{
					"id": 1972,
					"name": "recent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1973,
							"name": "recent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the recent (last) n items from the list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5]\n  list.recent(3); //[3,4,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1974,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "unknown",
									"name": "E"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/history-list.ts",
							"line": 44,
							"character": 8
						}
					]
				},
				{
					"id": 2080,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2081,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2082,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 195
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.remove",
								"id": 723
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 195
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.remove",
						"id": 722
					}
				},
				{
					"id": 2083,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2084,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2085,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 198
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAll",
								"id": 726
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 198
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAll",
						"id": 725
					}
				},
				{
					"id": 2046,
					"name": "removeAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2047,
							"name": "removeAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the element at the specified position in this list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.removeAt(1)); //[1,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2048,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.removeAt",
								"id": 800
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAt",
								"id": 690
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 115,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.removeAt",
						"id": 800
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAt",
						"id": 689
					}
				},
				{
					"id": 2086,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2087,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2088,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2089,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2090,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2091,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2092,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2093,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 201
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 201
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeIf",
						"id": 728
					}
				},
				{
					"id": 2049,
					"name": "removeRange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2050,
							"name": "removeRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5,6]\n  console.log(list.removeRange(1,4)); //[1,5,6]\n  //Output: [2,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2051,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2052,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.removeRange",
								"id": 803
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 126,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.removeRange",
						"id": 803
					}
				},
				{
					"id": 2005,
					"name": "replaceAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2006,
							"name": "replaceAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces each element of this list with the result of applying the mapping function",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList contains [1,2,3,4]\n  arrayList.map((x)=>(x*2));\n  //now arrayList contains [2,4,6,8]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2007,
									"name": "mappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2008,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2009,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2010,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 105,
													"character": 23
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.replaceAll",
								"id": 1787
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 105,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.replaceAll",
						"id": 1787
					}
				},
				{
					"id": 2094,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2095,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2096,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 209
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.retainAll",
								"id": 737
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 209
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.retainAll",
						"id": 736
					}
				},
				{
					"id": 2064,
					"name": "reverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2065,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverse the list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5]\n  list.reverse() //now list contains [5,4,3,2,1]\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.reverse",
								"id": 822
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.reverse",
								"id": 708
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 173,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.reverse",
						"id": 822
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.reverse",
						"id": 707
					}
				},
				{
					"id": 2053,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2054,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the element at the specified position in this list with the specified element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.set(1,2.5)); //[1,2.5,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2055,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2056,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.set",
								"id": 807
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.set",
								"id": 693
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 137,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.set",
						"id": 807
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.set",
						"id": 692
					}
				},
				{
					"id": 2097,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2098,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 212
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.size",
								"id": 740
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 212
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.size",
						"id": 739
					}
				},
				{
					"id": 2057,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2058,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts this list according to the compareFn.\ncompareFn is a function which should return a number value (-ve, zero, or +ve).\nx is considered smaller than y if the compareFn(x,y) is negetive",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.sort(function(x,y) {\n    return x-y;\n  }); // [1, 2, 3, 6, 7, 8, 9, 11]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2059,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2060,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2061,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2062,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2063,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-list.ts",
													"line": 152,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.sort",
								"id": 811
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 152,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.sort",
						"id": 811
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.sort",
						"id": 696
					}
				},
				{
					"id": 2011,
					"name": "subList",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2012,
							"name": "subList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.subList(2,7); // returns a list containing [6, 2, 7, 3, 9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2013,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2014,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.subList",
								"id": 818
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.subList",
								"id": 1793
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.subList",
								"id": 704
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 115,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractList.subList",
						"id": 818
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.subList",
						"id": 1793
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.subList",
						"id": 703
					}
				},
				{
					"id": 2099,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2100,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 214
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.toArray",
								"id": 742
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 214
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.toArray",
						"id": 741
					}
				},
				{
					"id": 2019,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2020,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts the arrayList into a JSON String",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList contains [1,2,3,4]\n  console.log(arrayList.toString((x)=>(x.toString())));\n  //Output\n  //\"[1,2,3,4]\"\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2021,
									"name": "serializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2022,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2023,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2024,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 146,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.toString",
								"id": 1801
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.toString",
						"id": 1801
					},
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.toString",
						"id": 1557
					}
				},
				{
					"id": 2017,
					"name": "trimToSize",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2018,
							"name": "trimToSize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Trims the capacity of this ArrayList instance to be the list's current size.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList contains [1,2,3,4,5] and capacity is 10\n  arrayList.trimToSize(); //new capacity is 5\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.trimToSize",
								"id": 1799
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 134,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.trimToSize",
						"id": 1799
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1979
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1978,
						2066
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1966,
						1969,
						2067,
						1975,
						2015,
						2069,
						2072,
						1986,
						2075,
						1989,
						2101,
						2025,
						2032,
						2035,
						2078,
						2109,
						2038,
						2041,
						2044,
						1972,
						2080,
						2083,
						2046,
						2086,
						2049,
						2005,
						2094,
						2064,
						2053,
						2097,
						2057,
						2011,
						2099,
						2019,
						2017
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/lists/history-list.ts",
					"line": 6,
					"character": 24
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ArrayList",
					"id": 1746,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "List",
					"id": 661,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 398,
					"typeArguments": [
						{
							"type": "reference",
							"name": "ArrayList",
							"id": 1746,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "E"
								}
							]
						}
					]
				},
				{
					"type": "reference",
					"name": "Serializable",
					"id": 1556
				}
			]
		},
		{
			"id": 13,
			"name": "Iterator",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Used to iterate over Iterable objects"
			},
			"typeParameter": [
				{
					"id": 14,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 17,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 18,
							"name": "new Iterator",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 19,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13
							}
						},
						{
							"id": 20,
							"name": "new Iterator",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 21,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								},
								{
									"id": 22,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 6,
							"character": 31
						},
						{
							"fileName": "classes/iterator.ts",
							"line": 8,
							"character": 25
						},
						{
							"fileName": "classes/iterator.ts",
							"line": 9,
							"character": 39
						}
					]
				},
				{
					"id": 16,
					"name": "_index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 6,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0"
				},
				{
					"id": 15,
					"name": "_target",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 5,
							"character": 19
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "typeParameter",
							"name": "E"
						}
					}
				},
				{
					"id": 23,
					"name": "forEachRemaining",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 24,
							"name": "forEachRemaining",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,2,3,4], iterator pointer after 2\n  iterator.forEachRemaining(function(item, index) {\n    console.log(item*2);\n  });\n  // Output: 6 8\n"
									}
								]
							},
							"parameters": [
								{
									"id": 25,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 26,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 27,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 28,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 29,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "classes/iterator.ts",
													"line": 24,
													"character": 26
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 24,
							"character": 18
						}
					]
				},
				{
					"id": 30,
					"name": "hasNext",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 31,
							"name": "hasNext",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if the iteration has more elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,2,3,4] iterator pointer after 3.\n  if(iterator.hasNext()) console.log(\"Elements remaining\");\n  //Ouput: Elements remaining\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 37,
							"character": 9
						}
					]
				},
				{
					"id": 32,
					"name": "next",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 33,
							"name": "next",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the next element in the iteration.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,25,83,48] iterator pointer after 1.\n  console.log((item = iterator.next());\n  //Output 25\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 48,
							"character": 6
						}
					]
				},
				{
					"id": 34,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 35,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes from the underlying Iterable the last element returned by this iterator.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,25,83,48] iterator pointer after 1.\n  iterator.next() //returns 25\n  iterator.remove(); //removes 25\n  // now target contains [1,83,48]\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 60,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						17
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						16,
						15
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						23,
						30,
						32,
						34
					]
				}
			],
			"sources": [
				{
					"fileName": "classes/iterator.ts",
					"line": 4,
					"character": 21
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "ListIterator",
					"id": 36
				}
			]
		},
		{
			"id": 36,
			"name": "ListIterator",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Iterator modified to iterate over lists"
			},
			"typeParameter": [
				{
					"id": 37,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 59,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 60,
							"name": "new ListIterator",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 61,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterator.__constructor",
								"id": 17
							}
						},
						{
							"id": 62,
							"name": "new ListIterator",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 63,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								},
								{
									"id": 64,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterator.__constructor",
								"id": 17
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 6,
							"character": 31
						},
						{
							"fileName": "classes/iterator.ts",
							"line": 8,
							"character": 25
						},
						{
							"fileName": "classes/iterator.ts",
							"line": 9,
							"character": 39
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterator.__constructor",
						"id": 17
					}
				},
				{
					"id": 58,
					"name": "_index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 6,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0",
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterator._index",
						"id": 16
					}
				},
				{
					"id": 57,
					"name": "_target",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 5,
							"character": 19
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "typeParameter",
							"name": "E"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterator._target",
						"id": 15
					}
				},
				{
					"id": 38,
					"name": "lastIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 6,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "-1"
				},
				{
					"id": 39,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 40,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts the specified element into the list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 11 and 26\n  iterator.add(25);\n  //new list contains [1,5,11,25,26]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 41,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 15,
							"character": 5
						}
					]
				},
				{
					"id": 65,
					"name": "forEachRemaining",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 66,
							"name": "forEachRemaining",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,2,3,4], iterator pointer after 2\n  iterator.forEachRemaining(function(item, index) {\n    console.log(item*2);\n  });\n  // Output: 6 8\n"
									}
								]
							},
							"parameters": [
								{
									"id": 67,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 68,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 69,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 70,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 71,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "classes/iterator.ts",
													"line": 24,
													"character": 26
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterator.forEachRemaining",
								"id": 23
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 24,
							"character": 18
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterator.forEachRemaining",
						"id": 23
					}
				},
				{
					"id": 72,
					"name": "hasNext",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 73,
							"name": "hasNext",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if the iteration has more elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,2,3,4] iterator pointer after 3.\n  if(iterator.hasNext()) console.log(\"Elements remaining\");\n  //Ouput: Elements remaining\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterator.hasNext",
								"id": 30
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 37,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterator.hasNext",
						"id": 30
					}
				},
				{
					"id": 44,
					"name": "hasPrevious",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 45,
							"name": "hasPrevious",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this list iterator has more elements when traversing the list in the reverse direction.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer before 1\n  console.log(iterator.hasPrevious());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 42,
							"character": 13
						}
					]
				},
				{
					"id": 42,
					"name": "next",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 43,
							"name": "next",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the next element in the iteration.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 5 and 11\n  console.log(iterator.next());\n  //Output: 11\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterator.next",
								"id": 32
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 27,
							"character": 6
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterator.next",
						"id": 32
					}
				},
				{
					"id": 48,
					"name": "nextIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 49,
							"name": "nextIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of the element that would be returned by a subsequent call to next().",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 11 and 26\n  console.log(iterator.nextIndex());\n  //Output: 3\n  iterator.next();\n  console.log(iterator.nextIndex());\n  //Output: -1\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 71,
							"character": 11
						}
					]
				},
				{
					"id": 46,
					"name": "previous",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 47,
							"name": "previous",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the previous element in the list and moves the cursor position backwards.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 11 and 26\n  console.log(iterator.previous());\n  //Output: 11\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 53,
							"character": 10
						}
					]
				},
				{
					"id": 50,
					"name": "previousIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 51,
							"name": "previousIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of the element that would be returned by a subsequent call to previous().",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 11 and 26\n  console.log(iterator.previousIndex());\n  //Output: 2\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 82,
							"character": 15
						}
					]
				},
				{
					"id": 55,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 56,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes from the underlying Iterable the last element returned by this iterator.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 5 and 11\n  iterator.previous(); //returns 5\n  iterator.remove(); //removes 5\n  //now target contains [1,11,26]\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterator.remove",
								"id": 34
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 108,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterator.remove",
						"id": 34
					}
				},
				{
					"id": 52,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 53,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the last element returned by next() or previous() with the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 5 and 11\n  iterator.next(); //returns 11\n  iterator.set(15);\n  //now target contains [1,5,15,26]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 54,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 94,
							"character": 5
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						59
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						58,
						57,
						38
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						39,
						65,
						72,
						44,
						42,
						48,
						46,
						50,
						55,
						52
					]
				}
			],
			"sources": [
				{
					"fileName": "classes/list-iterator.ts",
					"line": 4,
					"character": 25
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Iterator",
					"id": 13,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 489,
			"name": "NumberMatrix",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An Array Matrix with only number values. Matrix element has a default value of 0."
			},
			"children": [
				{
					"id": 490,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 491,
							"name": "new NumberMatrix",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 492,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 493,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrix",
								"id": 489
							},
							"overwrites": {
								"type": "reference",
								"name": "ArrayMatrix.__constructor",
								"id": 405
							}
						},
						{
							"id": 494,
							"name": "new NumberMatrix",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 495,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 496,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 497,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrix",
								"id": 489
							},
							"overwrites": {
								"type": "reference",
								"name": "ArrayMatrix.__constructor",
								"id": 405
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 6,
							"character": 55
						},
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 8,
							"character": 42
						},
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 9,
							"character": 63
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayMatrix.__constructor",
						"id": 405
					}
				},
				{
					"id": 537,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "array",
							"elementType": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix._store",
						"id": 404
					}
				},
				{
					"id": 522,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 523,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add to each element in this matrix the corresponding elements in the specified matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  m1:\n  //  [1 2]\n  //  [2 3]\n  //  m2:\n  //  [3 2]\n  //  [4 3]\n  m1.add(m2);\n  //  [4 4]\n  //  [6 6]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 524,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrix",
										"id": 489
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 115,
							"character": 5
						}
					]
				},
				{
					"id": 562,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 563,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of the current object and return",
								"tags": [
									{
										"tag": "example",
										"text": "\n  matrix.clone();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.clone",
								"id": 443
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 401
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 196,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.clone",
						"id": 443
					},
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 400
					}
				},
				{
					"id": 534,
					"name": "col",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 535,
							"name": "col",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the column correponding to the specified index.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  m1.col(1);  //  [2,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 536,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrixColumn",
								"id": 596
							},
							"overwrites": {
								"type": "reference",
								"name": "ArrayMatrix.col",
								"id": 435
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 179,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayMatrix.col",
						"id": 435
					}
				},
				{
					"id": 557,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 558,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check whether the specified matrix is equal to this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  m1:\n  //  [1 2]\n  //  [2 3]\n  //  m2:\n  //  [1 2]\n  //  [2 3]\n  m1.equals(m2); //returns true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 559,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrix",
										"id": 402,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.equals",
								"id": 438
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 156,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.equals",
						"id": 438
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.equals",
						"id": 379
					}
				},
				{
					"id": 538,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 539,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read the item at the specified position in this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [2 3 4]\n  //  [3 4 5]\n  matrix.get(1,1); //3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 540,
									"name": "rowIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 541,
									"name": "columnIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.get",
								"id": 413
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.get",
								"id": 361
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 27,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.get",
						"id": 413
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.get",
						"id": 360
					}
				},
				{
					"id": 549,
					"name": "height",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 550,
							"name": "height",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of rows in this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  matrix.height(); //return 3\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.height",
								"id": 424
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.height",
								"id": 372
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 72,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.height",
						"id": 424
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.height",
						"id": 371
					}
				},
				{
					"id": 542,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 543,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert an item at the specified position in this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [2 3 4]\n  //  [3 4 5]\n  matrix.put(0,1,5);\n  //  [1 2 3]\n  //  [5 3 4]\n  //  [3 4 5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 544,
									"name": "rowIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 545,
									"name": "columnIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 546,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.put",
								"id": 417
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 42,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.put",
						"id": 417
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.put",
						"id": 364
					}
				},
				{
					"id": 531,
					"name": "row",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 532,
							"name": "row",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the row correponding to the specified index.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  m1.row(0);  //  [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 533,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrixRow",
								"id": 564
							},
							"overwrites": {
								"type": "reference",
								"name": "ArrayMatrix.row",
								"id": 432
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 165,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayMatrix.row",
						"id": 432
					}
				},
				{
					"id": 528,
					"name": "scalarMultiply",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 529,
							"name": "scalarMultiply",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Multiply each element in this matrix with the specified scalar.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  m1.multiply(2);\n  //  [2 4]\n  //  [4 6]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 530,
									"name": "scalar",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 153,
							"character": 16
						}
					]
				},
				{
					"id": 553,
					"name": "subMatrix",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 554,
							"name": "subMatrix",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the submatrix obtained after removing the specified rows and columns from this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [4 5 6]\n  //  [7 8 9]\n  matrix.subMatrix([0],[1])\n  //  [4 6]\n  //  [7 9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 555,
									"name": "rows",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 556,
									"name": "cols",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.subMatrix",
								"id": 428
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.subMatrix",
								"id": 376
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 95,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.subMatrix",
						"id": 428
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.subMatrix",
						"id": 375
					}
				},
				{
					"id": 525,
					"name": "subtract",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 526,
							"name": "subtract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Subtract from each element in this matrix, the corresponding elements in the specified matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  m1.subtract(m2);\n  //  [-2 0]\n  //  [-2 0]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 527,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrix",
										"id": 489
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 134,
							"character": 10
						}
					]
				},
				{
					"id": 560,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 561,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a 2 dimensional array corresponding to the matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [4 5 6]\n  //  [7 8 9]\n  matrix.toArray(); //[[1,2,3],[4,5,6],[7,8,9]]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.toArray",
								"id": 441
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 181,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.toArray",
						"id": 441
					}
				},
				{
					"id": 547,
					"name": "transpose",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 548,
							"name": "transpose",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the transpose of this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [4 5 6]\n  //  [7 8 9]\n  matrix.transpose();\n  //  [1 4 7]\n  //  [2 5 8]\n  //  [3 6 9]\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.transpose",
								"id": 422
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.transpose",
								"id": 370
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 57,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.transpose",
						"id": 422
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.transpose",
						"id": 369
					}
				},
				{
					"id": 551,
					"name": "width",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 552,
							"name": "width",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of columns in this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  matrix.width(); //return 3\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.width",
								"id": 426
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.width",
								"id": 374
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 81,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.width",
						"id": 426
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.width",
						"id": 373
					}
				},
				{
					"id": 502,
					"name": "allOnes",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 503,
							"name": "allOnes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an all-ones matrix of given order.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let allOneMatrix = NumberMatrix.allOnes(2,3)\n  //   [1 1 1]\n  //   [1 1 1]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 504,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 505,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrix",
								"id": 489
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 32,
							"character": 16
						}
					]
				},
				{
					"id": 519,
					"name": "fromArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 520,
							"name": "fromArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a matrix from the specified two dimensional array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  NumberMatrix.fromArray([[1,2],[3,4]]);\n  //  [1 2]\n  //  [3 4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 521,
									"name": "array",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrix",
								"id": 489
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 91,
							"character": 18
						}
					]
				},
				{
					"id": 506,
					"name": "generate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 507,
							"name": "generate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generate a matrix based on the given order and generateFn function on the indices.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let m = NumberMatrix.generate(3,3,(i,j)=>(i+j));\n  //  [0 1 2]\n  //  [1 2 3]\n  //  [2 3 4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 508,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 509,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 510,
									"name": "generateFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 511,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 512,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 513,
															"name": "rowIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 514,
															"name": "columnIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/matrices/number-matrix.ts",
													"line": 44,
													"character": 60
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrix",
								"id": 489
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 44,
							"character": 17
						}
					]
				},
				{
					"id": 515,
					"name": "multiply",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 516,
							"name": "multiply",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Multiply two matrices and return the resultant matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  m1:\n  //  [1 2 3]\n  //  [2 3 4]\n  //  m2:\n  //  [1 1]\n  //  [2 2]\n  //  [3 3]\n  NumberMatrix.multiply(m1,m2)\n  //  [14 14]\n  //  [20 20]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 517,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrix",
										"id": 489
									}
								},
								{
									"id": 518,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrix",
										"id": 489
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrix",
								"id": 489
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 66,
							"character": 17
						}
					]
				},
				{
					"id": 498,
					"name": "zero",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 499,
							"name": "zero",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a zero matrix of given order.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let zeroMatrix = NumberMatrix.zero(2,3)\n  //   [0 0 0]\n  //   [0 0 0]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 500,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 501,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrix",
								"id": 489
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 21,
							"character": 13
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						490
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						537
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						522,
						562,
						534,
						557,
						538,
						549,
						542,
						531,
						528,
						553,
						525,
						560,
						547,
						551,
						502,
						519,
						506,
						515,
						498
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/matrices/number-matrix.ts",
					"line": 6,
					"character": 25
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ArrayMatrix",
					"id": 402,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "number"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "SquareMatrix",
					"id": 2362
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Matrix",
					"id": 358,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "number"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 398,
					"typeArguments": [
						{
							"type": "reference",
							"name": "ArrayMatrix",
							"id": 402,
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "number"
								}
							]
						}
					]
				}
			]
		},
		{
			"id": 596,
			"name": "NumberMatrixColumn",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A single column of a NumberMatrix.\nIs obtained by calling col() method of a NumberMatrix instance."
			},
			"children": [
				{
					"id": 598,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 599,
							"name": "new NumberMatrixColumn",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 600,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrix",
										"id": 489
									}
								},
								{
									"id": 601,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrixColumn",
								"id": 596
							},
							"overwrites": {
								"type": "reference",
								"name": "ArrayMatrixColumn.__constructor",
								"id": 471
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 267,
							"character": 33
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayMatrixColumn.__constructor",
						"id": 471
					}
				},
				{
					"id": 615,
					"name": "_index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 298,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrixColumn._index",
						"id": 470
					}
				},
				{
					"id": 597,
					"name": "_matrix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 267,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "NumberMatrix",
						"id": 489
					},
					"overwrites": {
						"type": "reference",
						"name": "ArrayMatrixColumn._matrix",
						"id": 469
					}
				},
				{
					"id": 616,
					"name": "index",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Return the index of this colun in the matrix it belongs to."
					},
					"getSignature": {
						"id": 617,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Return the index of this colun in the matrix it belongs to."
						},
						"type": {
							"type": "intrinsic",
							"name": "number"
						},
						"inheritedFrom": {
							"type": "reference",
							"name": "ArrayMatrixColumn.index",
							"id": 477
						}
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 315,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrixColumn.index",
						"id": 477
					}
				},
				{
					"id": 602,
					"name": "matrix",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Return the matrix to which this column belong."
					},
					"getSignature": {
						"id": 603,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Return the matrix to which this column belong."
						},
						"type": {
							"type": "reference",
							"name": "NumberMatrix",
							"id": 489
						},
						"overwrites": {
							"type": "reference",
							"name": "ArrayMatrixColumn.matrix",
							"id": 475
						}
					},
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 277,
							"character": 12
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayMatrixColumn.matrix",
						"id": 475
					}
				},
				{
					"id": 604,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 605,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add to this column another column of the same matix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //nm:NumberMatrix.\n  let c1 = nm.col(0);\n  let c2 = nm.col(1);\n  c1.add(c2); // C1 -> C1 + C2\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 606,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrixColumn",
										"id": 596
									}
								}
							],
							"parameters": [
								{
									"id": 607,
									"name": "col",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C",
										"constraint": {
											"type": "reference",
											"name": "NumberMatrixColumn",
											"id": 596
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						},
						{
							"id": 608,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add to this column a multiple of a column of the same matix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  c1.add(c2, 3); // C1 -> C1 + 3C2\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 609,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrixColumn",
										"id": 596
									}
								}
							],
							"parameters": [
								{
									"id": 610,
									"name": "col",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C",
										"constraint": {
											"type": "reference",
											"name": "NumberMatrixColumn",
											"id": 596
										}
									}
								},
								{
									"id": 611,
									"name": "coeff",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 289,
							"character": 5
						},
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 295,
							"character": 5
						},
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 296,
							"character": 5
						}
					]
				},
				{
					"id": 618,
					"name": "change",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 619,
							"name": "change",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Change this matrix column with another column of same matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //am:ArrayMatrix\n  let c1 = am.col(0);\n  let c2 = am.col(1);\n  c1.change(c2);  // corresponds to C1 -> C2\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 620,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrixColumn",
										"id": 467,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 621,
									"name": "col",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C",
										"constraint": {
											"type": "reference",
											"name": "ArrayMatrixColumn",
											"id": 467,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "number"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrixColumn.change",
								"id": 479
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 327,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrixColumn.change",
						"id": 479
					},
					"implementationOf": {
						"type": "reference",
						"name": "MatrixColumn.change",
						"id": 392
					}
				},
				{
					"id": 622,
					"name": "interchange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 623,
							"name": "interchange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Interchange this column with another column of the same matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //am:ArrayMatrix\n  let c1 = am.col(0);\n  let c2 = am.col(1);\n  c1.interchange(c2);  // corresponds to C1 <-> C2\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 624,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrixColumn",
										"id": 467,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 625,
									"name": "col",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C",
										"constraint": {
											"type": "reference",
											"name": "ArrayMatrixColumn",
											"id": 467,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "number"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrixColumn.interchange",
								"id": 483
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 345,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrixColumn.interchange",
						"id": 483
					},
					"implementationOf": {
						"type": "reference",
						"name": "MatrixColumn.interchange",
						"id": 395
					}
				},
				{
					"id": 612,
					"name": "multiply",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 613,
							"name": "multiply",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Multiply all entries of a column by a non-zero scalar.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //nm:NumberMatrix.\n  let c1 = nm.col(0);\n  c1.multiply(5); // C1 -> 5.C1\n"
									}
								]
							},
							"parameters": [
								{
									"id": 614,
									"name": "scalar",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 316,
							"character": 10
						}
					]
				},
				{
					"id": 626,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 627,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return an array corresponding to this column.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //am:ArrayMatrix\n  //  [1 1 1]\n  //  [0 1 1]\n  //  [0 0 1]\n  am.col(1).toArray() // [1,1,0]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrixColumn.toArray",
								"id": 487
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 367,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrixColumn.toArray",
						"id": 487
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						598
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						615,
						597
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						616,
						602
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						604,
						618,
						622,
						612,
						626
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/matrices/number-matrix.ts",
					"line": 266,
					"character": 31
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ArrayMatrixColumn",
					"id": 467,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "number"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "MatrixColumn",
					"id": 390,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "number"
						}
					]
				}
			]
		},
		{
			"id": 564,
			"name": "NumberMatrixRow",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A single row of a NumberMatrix.\nIs obtained by calling row() method of a NumberMatrix instance."
			},
			"children": [
				{
					"id": 566,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 567,
							"name": "new NumberMatrixRow",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 568,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrix",
										"id": 489
									}
								},
								{
									"id": 569,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrixRow",
								"id": 564
							},
							"overwrites": {
								"type": "reference",
								"name": "ArrayMatrixRow.__constructor",
								"id": 449
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 195,
							"character": 33
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayMatrixRow.__constructor",
						"id": 449
					}
				},
				{
					"id": 583,
					"name": "_index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 213,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrixRow._index",
						"id": 448
					}
				},
				{
					"id": 565,
					"name": "_matrix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 195,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "NumberMatrix",
						"id": 489
					},
					"overwrites": {
						"type": "reference",
						"name": "ArrayMatrixRow._matrix",
						"id": 447
					}
				},
				{
					"id": 584,
					"name": "index",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Return the index of this row in the matrix it belongs to."
					},
					"getSignature": {
						"id": 585,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Return the index of this row in the matrix it belongs to."
						},
						"type": {
							"type": "intrinsic",
							"name": "number"
						},
						"inheritedFrom": {
							"type": "reference",
							"name": "ArrayMatrixRow.index",
							"id": 455
						}
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 230,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrixRow.index",
						"id": 455
					}
				},
				{
					"id": 570,
					"name": "matrix",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Return the matrix to which this row belong."
					},
					"getSignature": {
						"id": 571,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Return the matrix to which this row belong."
						},
						"type": {
							"type": "reference",
							"name": "NumberMatrix",
							"id": 489
						},
						"overwrites": {
							"type": "reference",
							"name": "ArrayMatrixRow.matrix",
							"id": 453
						}
					},
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 205,
							"character": 12
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayMatrixRow.matrix",
						"id": 453
					}
				},
				{
					"id": 572,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 573,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add to this row another row of the same matix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //nm:NumberMatrix.\n  let r1 = nm.row(0);\n  let r2 = nm.row(1);\n  r1.add(r2); // R1 -> R1 + R2\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 574,
									"name": "R",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrixRow",
										"id": 564
									}
								}
							],
							"parameters": [
								{
									"id": 575,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R",
										"constraint": {
											"type": "reference",
											"name": "NumberMatrixRow",
											"id": 564
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						},
						{
							"id": 576,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add to this row a multiple of a row of the same matix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //nm:NumberMatrix.\n  let r1 = nm.row(0);\n  let r2 = nm.row(1);\n  r1.add(r2, 3); // R1 -> R1 + 3R2\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 577,
									"name": "R",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrixRow",
										"id": 564
									}
								}
							],
							"parameters": [
								{
									"id": 578,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R",
										"constraint": {
											"type": "reference",
											"name": "NumberMatrixRow",
											"id": 564
										}
									}
								},
								{
									"id": 579,
									"name": "coeff",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 217,
							"character": 5
						},
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 226,
							"character": 5
						},
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 227,
							"character": 5
						}
					]
				},
				{
					"id": 586,
					"name": "change",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 587,
							"name": "change",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Change this matrix row with another row of same matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //am:ArrayMatrix\n  let r1 = am.row(0);\n  let r2 = am.row(1);\n  r1.change(r2);  // corresponds to R1 -> R2\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 588,
									"name": "R",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrixRow",
										"id": 445,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 589,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R",
										"constraint": {
											"type": "reference",
											"name": "ArrayMatrixRow",
											"id": 445,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "number"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrixRow.change",
								"id": 457
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 242,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrixRow.change",
						"id": 457
					},
					"implementationOf": {
						"type": "reference",
						"name": "MatrixRow.change",
						"id": 384
					}
				},
				{
					"id": 590,
					"name": "interchange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 591,
							"name": "interchange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Interchange this row with another row of the same matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //am:ArrayMatrix\n  let r1 = am.row(0);\n  let r2 = am.row(1);\n  r1.interchange(r2);  // corresponds to R1 <-> R2\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 592,
									"name": "R",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrixRow",
										"id": 445,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 593,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R",
										"constraint": {
											"type": "reference",
											"name": "ArrayMatrixRow",
											"id": 445,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "number"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrixRow.interchange",
								"id": 461
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 261,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrixRow.interchange",
						"id": 461
					},
					"implementationOf": {
						"type": "reference",
						"name": "MatrixRow.interchange",
						"id": 387
					}
				},
				{
					"id": 580,
					"name": "multiply",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 581,
							"name": "multiply",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Multiply all entries of a row by a non-zero scalar.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //nm:NumberMatrix.\n  let r1 = nm.row(0);\n  r1.multiply(5); // R1 -> 5.R1\n"
									}
								]
							},
							"parameters": [
								{
									"id": 582,
									"name": "scalar",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 247,
							"character": 10
						}
					]
				},
				{
					"id": 594,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 595,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return an array corresponding to this row.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //am:ArrayMatrix\n  //  [1 0 0]\n  //  [0 1 0]\n  //  [0 0 1]\n  am.row(1).toArray() // [0,1,0]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrixRow.toArray",
								"id": 465
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 283,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrixRow.toArray",
						"id": 465
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						566
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						583,
						565
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						584,
						570
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						572,
						586,
						590,
						580,
						594
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/matrices/number-matrix.ts",
					"line": 194,
					"character": 28
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ArrayMatrixRow",
					"id": 445,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "number"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "MatrixRow",
					"id": 382,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "number"
						}
					]
				}
			]
		},
		{
			"id": 2467,
			"name": "PriorityQueue",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An unbounded priority queue. The elements of the priority queue are ordered according to the compare function provided at queue construction time."
			},
			"typeParameter": [
				{
					"id": 2468,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 2474,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2475,
							"name": "new PriorityQueue",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 2476,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2477,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2478,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2479,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2480,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/queues/priority-queue.ts",
													"line": 10,
													"character": 26
												}
											]
										}
									}
								},
								{
									"id": 2481,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "PriorityQueue",
								"id": 2467
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.__constructor",
								"id": 173
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 8,
							"character": 44
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.__constructor",
						"id": 173
					}
				},
				{
					"id": 2469,
					"name": "_comparator",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 8,
							"character": 25
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2470,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2471,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2472,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										},
										{
											"id": 2473,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "ds/queues/priority-queue.ts",
									"line": 8,
									"character": 26
								}
							]
						}
					}
				},
				{
					"id": 2511,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "typeParameter",
							"name": "E"
						}
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 172
					}
				},
				{
					"id": 2482,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2483,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts the specified item into this priority queue.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue containes [1,8,12] (compareFn designed for ascending order)\n  queue.add(6); //[1,6,8,12]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2484,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 176
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.add",
								"id": 1211
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 22,
							"character": 7
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.add",
						"id": 176
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.add",
						"id": 1210
					}
				},
				{
					"id": 2485,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2486,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts all items of an array into this priority queue.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue containes [1,8,12] (compareFn designed for ascending order)\n  queue.addAll([6,10,15]); //[1,6,8,10,12,15]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2487,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 179
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.addAll",
								"id": 1218
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 32,
							"character": 10
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.addAll",
						"id": 179
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.addAll",
						"id": 1217
					}
				},
				{
					"id": 2512,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2513,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 182
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.clear",
								"id": 1221
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 182
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.clear",
						"id": 1220
					}
				},
				{
					"id": 2488,
					"name": "comparator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2489,
							"name": "comparator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the compare function used to order the elements in this queue.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  queue.comparator(); //returns a function\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2490,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 2491,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2492,
													"name": "x",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												},
												{
													"id": 2493,
													"name": "y",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "ds/queues/priority-queue.ts",
											"line": 41,
											"character": 17
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 41,
							"character": 14
						}
					]
				},
				{
					"id": 2514,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2515,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2516,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 184
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.contains",
								"id": 1223
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 184
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.contains",
						"id": 1222
					}
				},
				{
					"id": 2517,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2518,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2519,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 187
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.containsAll",
								"id": 1226
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 187
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.containsAll",
						"id": 1225
					}
				},
				{
					"id": 2507,
					"name": "element",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2508,
							"name": "element",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves, but does not remove, the head of this queue",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue has elements [1,2,3,4]\n  console.log(queue.element());\n  //Output: 1\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractQueue.element",
								"id": 1266
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.element",
								"id": 1214
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-queue.ts",
							"line": 15,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractQueue.element",
						"id": 1266
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.element",
						"id": 1213
					}
				},
				{
					"id": 2520,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2521,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2522,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 190
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.equals",
								"id": 1229
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 190
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.equals",
						"id": 1228
					}
				},
				{
					"id": 2546,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2547,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2548,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2549,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2550,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2551,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2552,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2553,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 216
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 216
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.forEach",
						"id": 1254
					}
				},
				{
					"id": 2500,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2501,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the Object from the JSON string",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //json = \"[1,2,3,4]\"\n  queue = new PriorityQueue<number>((x,y)=>(x-y)).fromString(json,(x)=>(parseFloat(x)));\n  //queue contains [1,2,3,4]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2502,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2503,
									"name": "deserializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2504,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2505,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2506,
															"name": "itemJSON",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/queues/priority-queue.ts",
													"line": 67,
													"character": 43
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 67,
							"character": 14
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.fromString",
						"id": 1563
					}
				},
				{
					"id": 2523,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2524,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 193
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.isEmpty",
								"id": 1232
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 193
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.isEmpty",
						"id": 1231
					}
				},
				{
					"id": 2554,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2555,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 224
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.iterator",
								"id": 1263
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 224
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.iterator",
						"id": 1262
					}
				},
				{
					"id": 2509,
					"name": "poll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2510,
							"name": "poll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves and removes the head of this queue.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue has elements [1,2,3,4]\n  console.log(queue.element());\n  //Output: 1 and queue now has elements [2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractQueue.poll",
								"id": 1268
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.poll",
								"id": 1216
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-queue.ts",
							"line": 26,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractQueue.poll",
						"id": 1268
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.poll",
						"id": 1215
					}
				},
				{
					"id": 2525,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2526,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2527,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 195
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.remove",
								"id": 1234
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 195
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.remove",
						"id": 1233
					}
				},
				{
					"id": 2528,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2529,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2530,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 198
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.removeAll",
								"id": 1237
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 198
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.removeAll",
						"id": 1236
					}
				},
				{
					"id": 2531,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2532,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2533,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2534,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2535,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2536,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2537,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2538,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 201
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 201
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.removeIf",
						"id": 1239
					}
				},
				{
					"id": 2539,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2540,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2541,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 209
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.retainAll",
								"id": 1248
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 209
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.retainAll",
						"id": 1247
					}
				},
				{
					"id": 2542,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2543,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 212
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.size",
								"id": 1251
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 212
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.size",
						"id": 1250
					}
				},
				{
					"id": 2544,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2545,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 214
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.toArray",
								"id": 1253
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 214
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.toArray",
						"id": 1252
					}
				},
				{
					"id": 2494,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2495,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts the queue into a JSON String",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue contains [1,2,3,4]\n  console.log(queue.toString((x)=>(x.toString())));\n  //Output\n  //[1,2,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2496,
									"name": "serializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2497,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2498,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2499,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/queues/priority-queue.ts",
													"line": 53,
													"character": 26
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 53,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.toString",
						"id": 1557
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2474
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2469,
						2511
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2482,
						2485,
						2512,
						2488,
						2514,
						2517,
						2507,
						2520,
						2546,
						2500,
						2523,
						2554,
						2509,
						2525,
						2528,
						2531,
						2539,
						2542,
						2544,
						2494
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/queues/priority-queue.ts",
					"line": 7,
					"character": 26
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractQueue",
					"id": 1264,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Queue",
					"id": 1208,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Serializable",
					"id": 1556
				}
			]
		},
		{
			"id": 628,
			"name": "Relation",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A binary Relation between two sets."
			},
			"typeParameter": [
				{
					"id": 629,
					"name": "X",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 630,
					"name": "Y",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 638,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 639,
							"name": "new Relation",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 640,
									"name": "domainSet",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AbstractSet",
										"id": 290,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "X"
											}
										]
									}
								},
								{
									"id": 641,
									"name": "rangeSet",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AbstractSet",
										"id": 290,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "Y"
											}
										]
									}
								},
								{
									"id": 642,
									"name": "relationFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 643,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 644,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 645,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "X"
															}
														},
														{
															"id": 646,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "Y"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "classes/relation.ts",
													"line": 14,
													"character": 78
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Relation",
								"id": 628
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/relation.ts",
							"line": 12,
							"character": 47
						}
					]
				},
				{
					"id": 631,
					"name": "_domain",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isExported": true
					},
					"sources": [
						{
							"fileName": "classes/relation.ts",
							"line": 10,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractSet",
						"id": 290,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "X"
							}
						]
					}
				},
				{
					"id": 632,
					"name": "_range",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isExported": true
					},
					"sources": [
						{
							"fileName": "classes/relation.ts",
							"line": 11,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractSet",
						"id": 290,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "Y"
							}
						]
					}
				},
				{
					"id": 633,
					"name": "_relationFn",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isExported": true
					},
					"sources": [
						{
							"fileName": "classes/relation.ts",
							"line": 12,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 634,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 635,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 636,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "X"
											}
										},
										{
											"id": 637,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "Y"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "classes/relation.ts",
									"line": 12,
									"character": 24
								}
							]
						}
					}
				},
				{
					"id": 649,
					"name": "matrix",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "a matrix corresponding to the relation"
					},
					"getSignature": {
						"id": 650,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "a matrix corresponding to the relation"
						},
						"type": {
							"type": "reference",
							"name": "NumberMatrix",
							"id": 489
						}
					},
					"sources": [
						{
							"fileName": "classes/relation.ts",
							"line": 39,
							"character": 14
						}
					]
				},
				{
					"id": 647,
					"name": "set",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "a set corresponding to the relation."
					},
					"getSignature": {
						"id": 648,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "a set corresponding to the relation."
						},
						"type": {
							"type": "reference",
							"name": "AbstractSet",
							"id": 290,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Tuple",
									"id": 98,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "X"
										},
										{
											"type": "typeParameter",
											"name": "Y"
										}
									]
								}
							]
						}
					},
					"sources": [
						{
							"fileName": "classes/relation.ts",
							"line": 23,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						638
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						631,
						632,
						633
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						649,
						647
					]
				}
			],
			"sources": [
				{
					"fileName": "classes/relation.ts",
					"line": 8,
					"character": 21
				}
			]
		},
		{
			"id": 2762,
			"name": "Rope",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A rope is a binary tree where each leaf node contains a short string.\nUsed to efficiently store and manipulate a very long string"
			},
			"children": [
				{
					"id": 2764,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2765,
							"name": "new Rope",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Rope",
								"id": 2762
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.__constructor",
								"id": 884
							}
						},
						{
							"id": 2766,
							"name": "new Rope",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 2767,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rope",
								"id": 2762
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.__constructor",
								"id": 884
							}
						},
						{
							"id": 2768,
							"name": "new Rope",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 2769,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2770,
									"name": "spacing",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rope",
								"id": 2762
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.__constructor",
								"id": 884
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 8,
							"character": 27
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 10,
							"character": 15
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 11,
							"character": 25
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 12,
							"character": 41
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractBinaryTree.__constructor",
						"id": 884
					}
				},
				{
					"id": 2763,
					"name": "_root",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 8,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "RopeNode",
						"id": 2844
					},
					"overwrites": {
						"type": "reference",
						"name": "AbstractBinaryTree._root",
						"id": 883
					}
				},
				{
					"id": 2774,
					"name": "length",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Returns the total length of the string stored in this rope."
					},
					"getSignature": {
						"id": 2775,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Returns the total length of the string stored in this rope."
						},
						"type": {
							"type": "intrinsic",
							"name": "number"
						}
					},
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 39,
							"character": 12
						}
					]
				},
				{
					"id": 2821,
					"name": "balance",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2822,
							"name": "balance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Balance the rope."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 207,
							"character": 9
						}
					]
				},
				{
					"id": 2823,
					"name": "balanceNode",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 2824,
							"name": "balanceNode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2825,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RopeNode",
										"id": 2844
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RopeNode",
								"id": 2844
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 211,
							"character": 23
						}
					]
				},
				{
					"id": 2794,
					"name": "concat",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2795,
							"name": "concat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Concatenate the specified rope with this rope."
							},
							"parameters": [
								{
									"id": 2796,
									"name": "rope",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Rope",
										"id": 2762
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 107,
							"character": 8
						}
					]
				},
				{
					"id": 2785,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2786,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "This method call does not work on Rope.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2787,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.delete",
								"id": 890
							}
						},
						{
							"id": 2788,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete the substring starting at index i with a length j. Returns the deleted part as Rope."
							},
							"parameters": [
								{
									"id": 2789,
									"name": "i",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2790,
									"name": "j",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rope",
								"id": 2762
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.delete",
								"id": 890
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 78,
							"character": 8
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 82,
							"character": 8
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 83,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractBinaryTree.delete",
						"id": 890
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.delete",
						"id": 758
					}
				},
				{
					"id": 2797,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2798,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the character at position specified by index."
							},
							"parameters": [
								{
									"id": 2799,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2800,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the character at position specified by index, beginning from the specified node."
							},
							"parameters": [
								{
									"id": 2801,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2802,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RopeNode",
										"id": 2844
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 122,
							"character": 5
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 126,
							"character": 5
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 127,
							"character": 5
						}
					]
				},
				{
					"id": 2809,
					"name": "getRoot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2810,
							"name": "getRoot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the root node of this rope."
							},
							"type": {
								"type": "reference",
								"name": "RopeNode",
								"id": 2844
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 169,
							"character": 9
						}
					]
				},
				{
					"id": 2832,
					"name": "height",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2833,
							"name": "height",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the height of this binary tree.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  bt.height();// returns a number.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2834,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractBinaryTree.height",
								"id": 893
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 47,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree.height",
						"id": 893
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.height",
						"id": 761
					}
				},
				{
					"id": 2835,
					"name": "inorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2836,
							"name": "inorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after inorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.inorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2837,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractBinaryTree.inorder",
								"id": 896
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 58,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree.inorder",
						"id": 896
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.inorder",
						"id": 763
					}
				},
				{
					"id": 2776,
					"name": "insert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2777,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert string at the end of this rope."
							},
							"parameters": [
								{
									"id": 2778,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.insert",
								"id": 887
							}
						},
						{
							"id": 2779,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert string at the specified position of this rope."
							},
							"parameters": [
								{
									"id": 2780,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2781,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.insert",
								"id": 887
							}
						},
						{
							"id": 2782,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert a rope at the specified position of this rope."
							},
							"parameters": [
								{
									"id": 2783,
									"name": "rope",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Rope",
										"id": 2762
									}
								},
								{
									"id": 2784,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.insert",
								"id": 887
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 49,
							"character": 8
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 53,
							"character": 8
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 57,
							"character": 8
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 58,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractBinaryTree.insert",
						"id": 887
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.insert",
						"id": 755
					}
				},
				{
					"id": 2791,
					"name": "insertNode",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2792,
							"name": "insertNode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert the specified node at the end of this rope."
							},
							"parameters": [
								{
									"id": 2793,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RopeNode",
										"id": 2844
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 94,
							"character": 12
						}
					]
				},
				{
					"id": 2841,
					"name": "postorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2842,
							"name": "postorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after postorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.postorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2843,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractBinaryTree.postorder",
								"id": 902
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 88,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree.postorder",
						"id": 902
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.postorder",
						"id": 767
					}
				},
				{
					"id": 2838,
					"name": "preorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2839,
							"name": "preorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after preorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.preorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2840,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 869,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractBinaryTree.preorder",
								"id": 899
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 73,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree.preorder",
						"id": 899
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.preorder",
						"id": 765
					}
				},
				{
					"id": 2811,
					"name": "report",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2812,
							"name": "report",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the substring starting at index i with a length j."
							},
							"parameters": [
								{
									"id": 2813,
									"name": "i",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2814,
									"name": "j",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2815,
							"name": "report",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the substring starting at index i with a length j. Beginning at the specified node."
							},
							"parameters": [
								{
									"id": 2816,
									"name": "i",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2817,
									"name": "j",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2818,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RopeNode",
										"id": 2844
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 176,
							"character": 8
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 180,
							"character": 8
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 181,
							"character": 8
						}
					]
				},
				{
					"id": 2829,
					"name": "rotateLeft",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 2830,
							"name": "rotateLeft",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2831,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RopeNode",
										"id": 2844
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RopeNode",
								"id": 2844
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 234,
							"character": 22
						}
					]
				},
				{
					"id": 2826,
					"name": "rotateRight",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 2827,
							"name": "rotateRight",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2828,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RopeNode",
										"id": 2844
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RopeNode",
								"id": 2844
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 227,
							"character": 23
						}
					]
				},
				{
					"id": 2803,
					"name": "split",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2804,
							"name": "split",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Split this rope at the given position. Returns the right child after splitting."
							},
							"parameters": [
								{
									"id": 2805,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rope",
								"id": 2762
							}
						},
						{
							"id": 2806,
							"name": "split",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2807,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2808,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RopeNode",
										"id": 2844
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rope",
								"id": 2762
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 143,
							"character": 7
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 144,
							"character": 7
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 145,
							"character": 7
						}
					]
				},
				{
					"id": 2819,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2820,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Convert the rope into a string."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 200,
							"character": 10
						}
					]
				},
				{
					"id": 2771,
					"name": "fromNode",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 2772,
							"name": "fromNode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a new Rope from the RopeNode."
							},
							"parameters": [
								{
									"id": 2773,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RopeNode",
										"id": 2844
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rope",
								"id": 2762
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 30,
							"character": 17
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2764
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2763
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						2774
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2821,
						2823,
						2794,
						2785,
						2797,
						2809,
						2832,
						2835,
						2776,
						2791,
						2841,
						2838,
						2811,
						2829,
						2826,
						2803,
						2819,
						2771
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/trees/rope.ts",
					"line": 7,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractBinaryTree",
					"id": 881,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "BinaryTree",
					"id": 753,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					]
				}
			]
		},
		{
			"id": 2844,
			"name": "RopeNode",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Represents a node of Rope data structure."
			},
			"children": [
				{
					"id": 2848,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2849,
							"name": "new RopeNode",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "RopeNode",
								"id": 2844
							},
							"overwrites": {
								"type": "reference",
								"name": "BinaryTreeNode.__constructor",
								"id": 874
							}
						},
						{
							"id": 2850,
							"name": "new RopeNode",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 2851,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RopeNode",
								"id": 2844
							},
							"overwrites": {
								"type": "reference",
								"name": "BinaryTreeNode.__constructor",
								"id": 874
							}
						},
						{
							"id": 2852,
							"name": "new RopeNode",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 2853,
									"name": "left",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RopeNode",
										"id": 2844
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RopeNode",
								"id": 2844
							},
							"overwrites": {
								"type": "reference",
								"name": "BinaryTreeNode.__constructor",
								"id": 874
							}
						},
						{
							"id": 2854,
							"name": "new RopeNode",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 2855,
									"name": "left",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RopeNode",
										"id": 2844
									}
								},
								{
									"id": 2856,
									"name": "right",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RopeNode",
										"id": 2844
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RopeNode",
								"id": 2844
							},
							"overwrites": {
								"type": "reference",
								"name": "BinaryTreeNode.__constructor",
								"id": 874
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 248,
							"character": 23
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 250,
							"character": 15
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 251,
							"character": 27
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 252,
							"character": 28
						},
						{
							"fileName": "ds/trees/rope.ts",
							"line": 253,
							"character": 44
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "BinaryTreeNode.__constructor",
						"id": 874
					}
				},
				{
					"id": 2845,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 246,
							"character": 7
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "BinaryTreeNode.label",
						"id": 871
					}
				},
				{
					"id": 2846,
					"name": "left",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 247,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "RopeNode",
								"id": 2844
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "BinaryTreeNode.left",
						"id": 872
					}
				},
				{
					"id": 2847,
					"name": "right",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 248,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "RopeNode",
								"id": 2844
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "BinaryTreeNode.right",
						"id": 873
					}
				},
				{
					"id": 2859,
					"name": "length",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Returns the length of the string in this node."
					},
					"getSignature": {
						"id": 2860,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Returns the length of the string in this node."
						},
						"type": {
							"type": "intrinsic",
							"name": "number"
						}
					},
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 281,
							"character": 12
						}
					]
				},
				{
					"id": 2857,
					"name": "weight",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Returns the weight associated with this node."
					},
					"getSignature": {
						"id": 2858,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Returns the weight associated with this node."
						},
						"type": {
							"type": "intrinsic",
							"name": "number"
						}
					},
					"sources": [
						{
							"fileName": "ds/trees/rope.ts",
							"line": 271,
							"character": 12
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2848
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2845,
						2846,
						2847
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						2859,
						2857
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/trees/rope.ts",
					"line": 245,
					"character": 21
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "BinaryTreeNode",
					"id": 869,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					]
				}
			]
		},
		{
			"id": 2362,
			"name": "SquareMatrix",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A NumberMatrix with equal number of rows and columns."
			},
			"children": [
				{
					"id": 2363,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2364,
							"name": "new SquareMatrix",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 2365,
									"name": "order",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SquareMatrix",
								"id": 2362
							},
							"overwrites": {
								"type": "reference",
								"name": "NumberMatrix.__constructor",
								"id": 490
							}
						},
						{
							"id": 2366,
							"name": "new SquareMatrix",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 2367,
									"name": "order",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2368,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SquareMatrix",
								"id": 2362
							},
							"overwrites": {
								"type": "reference",
								"name": "NumberMatrix.__constructor",
								"id": 490
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 6,
							"character": 48
						},
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 8,
							"character": 27
						},
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 9,
							"character": 48
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "NumberMatrix.__constructor",
						"id": 490
					}
				},
				{
					"id": 2440,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "array",
							"elementType": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix._store",
						"id": 404
					}
				},
				{
					"id": 2425,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2426,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add to each element in this matrix the corresponding elements in the specified matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  m1:\n  //  [1 2]\n  //  [2 3]\n  //  m2:\n  //  [3 2]\n  //  [4 3]\n  m1.add(m2);\n  //  [4 4]\n  //  [6 6]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2427,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrix",
										"id": 489
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NumberMatrix.add",
								"id": 522
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 115,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "NumberMatrix.add",
						"id": 522
					}
				},
				{
					"id": 2395,
					"name": "adjoint",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2396,
							"name": "adjoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the adjoint of this matrix."
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 137,
							"character": 9
						}
					]
				},
				{
					"id": 2465,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2466,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of the current object and return",
								"tags": [
									{
										"tag": "example",
										"text": "\n  matrix.clone();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.clone",
								"id": 443
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 401
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 196,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.clone",
						"id": 443
					},
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 400
					}
				},
				{
					"id": 2385,
					"name": "cofactor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2386,
							"name": "cofactor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the cofactor of the element specified by the indices."
							},
							"parameters": [
								{
									"id": 2387,
									"name": "rowIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2388,
									"name": "columnIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 83,
							"character": 10
						}
					]
				},
				{
					"id": 2393,
					"name": "cofactorMatrix",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2394,
							"name": "cofactorMatrix",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the matrix of cofactors of this matrix."
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 124,
							"character": 16
						}
					]
				},
				{
					"id": 2437,
					"name": "col",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2438,
							"name": "col",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the column correponding to the specified index.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  m1.col(1);  //  [2,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2439,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrixColumn",
								"id": 596
							},
							"overwrites": {
								"type": "reference",
								"name": "ArrayMatrix.col",
								"id": 435
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NumberMatrix.col",
								"id": 534
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 179,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayMatrix.col",
						"id": 435
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NumberMatrix.col",
						"id": 534
					}
				},
				{
					"id": 2389,
					"name": "determinant",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2390,
							"name": "determinant",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the determinant of the square matrix."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 90,
							"character": 13
						}
					]
				},
				{
					"id": 2460,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2461,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check whether the specified matrix is equal to this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  m1:\n  //  [1 2]\n  //  [2 3]\n  //  m2:\n  //  [1 2]\n  //  [2 3]\n  m1.equals(m2); //returns true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2462,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayMatrix",
										"id": 402,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.equals",
								"id": 438
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 156,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.equals",
						"id": 438
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.equals",
						"id": 379
					}
				},
				{
					"id": 2441,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2442,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read the item at the specified position in this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [2 3 4]\n  //  [3 4 5]\n  matrix.get(1,1); //3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2443,
									"name": "rowIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2444,
									"name": "columnIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.get",
								"id": 413
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.get",
								"id": 361
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 27,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.get",
						"id": 413
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.get",
						"id": 360
					}
				},
				{
					"id": 2452,
					"name": "height",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2453,
							"name": "height",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of rows in this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  matrix.height(); //return 3\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.height",
								"id": 424
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.height",
								"id": 372
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 72,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.height",
						"id": 424
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.height",
						"id": 371
					}
				},
				{
					"id": 2397,
					"name": "inverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2398,
							"name": "inverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the inverse of this matrix if any. If not it returns null."
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 144,
							"character": 9
						}
					]
				},
				{
					"id": 2379,
					"name": "isSkewSymmetric",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2380,
							"name": "isSkewSymmetric",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check whether this matrix is skew-symmetric or not."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 68,
							"character": 17
						}
					]
				},
				{
					"id": 2377,
					"name": "isSymmetric",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2378,
							"name": "isSymmetric",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check whether this matrix is symmetric or not."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 60,
							"character": 13
						}
					]
				},
				{
					"id": 2381,
					"name": "minor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2382,
							"name": "minor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the minor of the element specified by the indices."
							},
							"parameters": [
								{
									"id": 2383,
									"name": "rowIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2384,
									"name": "columnIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 76,
							"character": 7
						}
					]
				},
				{
					"id": 2391,
					"name": "minorMatrix",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2392,
							"name": "minorMatrix",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the matrix of minors of this matrix."
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 111,
							"character": 13
						}
					]
				},
				{
					"id": 2375,
					"name": "order",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2376,
							"name": "order",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the order of the matrix."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 53,
							"character": 7
						}
					]
				},
				{
					"id": 2445,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2446,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert an item at the specified position in this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [2 3 4]\n  //  [3 4 5]\n  matrix.put(0,1,5);\n  //  [1 2 3]\n  //  [5 3 4]\n  //  [3 4 5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2447,
									"name": "rowIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2448,
									"name": "columnIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2449,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.put",
								"id": 417
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 42,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.put",
						"id": 417
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.put",
						"id": 364
					}
				},
				{
					"id": 2434,
					"name": "row",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2435,
							"name": "row",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the row correponding to the specified index.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  m1.row(0);  //  [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2436,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrixRow",
								"id": 564
							},
							"overwrites": {
								"type": "reference",
								"name": "ArrayMatrix.row",
								"id": 432
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NumberMatrix.row",
								"id": 531
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 165,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayMatrix.row",
						"id": 432
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NumberMatrix.row",
						"id": 531
					}
				},
				{
					"id": 2431,
					"name": "scalarMultiply",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2432,
							"name": "scalarMultiply",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Multiply each element in this matrix with the specified scalar.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  m1.multiply(2);\n  //  [2 4]\n  //  [4 6]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2433,
									"name": "scalar",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NumberMatrix.scalarMultiply",
								"id": 528
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 153,
							"character": 16
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "NumberMatrix.scalarMultiply",
						"id": 528
					}
				},
				{
					"id": 2456,
					"name": "subMatrix",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2457,
							"name": "subMatrix",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the submatrix obtained after removing the specified rows and columns from this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [4 5 6]\n  //  [7 8 9]\n  matrix.subMatrix([0],[1])\n  //  [4 6]\n  //  [7 9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2458,
									"name": "rows",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 2459,
									"name": "cols",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.subMatrix",
								"id": 428
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.subMatrix",
								"id": 376
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 95,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.subMatrix",
						"id": 428
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.subMatrix",
						"id": 375
					}
				},
				{
					"id": 2428,
					"name": "subtract",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2429,
							"name": "subtract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Subtract from each element in this matrix, the corresponding elements in the specified matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  m1.subtract(m2);\n  //  [-2 0]\n  //  [-2 0]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2430,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrix",
										"id": 489
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NumberMatrix.subtract",
								"id": 525
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 134,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "NumberMatrix.subtract",
						"id": 525
					}
				},
				{
					"id": 2463,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2464,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a 2 dimensional array corresponding to the matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [4 5 6]\n  //  [7 8 9]\n  matrix.toArray(); //[[1,2,3],[4,5,6],[7,8,9]]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.toArray",
								"id": 441
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 181,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.toArray",
						"id": 441
					}
				},
				{
					"id": 2399,
					"name": "trace",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2400,
							"name": "trace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the trace of this square matrix. (Trace is the sum of diagonal values of a square matrix.)"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 155,
							"character": 7
						}
					]
				},
				{
					"id": 2450,
					"name": "transpose",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2451,
							"name": "transpose",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the transpose of this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  [1 2 3]\n  //  [4 5 6]\n  //  [7 8 9]\n  matrix.transpose();\n  //  [1 4 7]\n  //  [2 5 8]\n  //  [3 6 9]\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.transpose",
								"id": 422
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.transpose",
								"id": 370
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 57,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.transpose",
						"id": 422
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.transpose",
						"id": 369
					}
				},
				{
					"id": 2454,
					"name": "width",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2455,
							"name": "width",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of columns in this matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  matrix.width(); //return 3\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayMatrix.width",
								"id": 426
							},
							"implementationOf": {
								"type": "reference",
								"name": "Matrix.width",
								"id": 374
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/array-matrix.ts",
							"line": 81,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayMatrix.width",
						"id": 426
					},
					"implementationOf": {
						"type": "reference",
						"name": "Matrix.width",
						"id": 373
					}
				},
				{
					"id": 2405,
					"name": "allOnes",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 2406,
							"name": "allOnes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an all-ones matrix of given order.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let allOneMatrix = NumberMatrix.allOnes(2,3)\n  //   [1 1 1]\n  //   [1 1 1]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2407,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2408,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrix",
								"id": 489
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NumberMatrix.allOnes",
								"id": 502
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 32,
							"character": 16
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "NumberMatrix.allOnes",
						"id": 502
					}
				},
				{
					"id": 2372,
					"name": "cast",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 2373,
							"name": "cast",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a square matrix from the number matrix of same height and width."
							},
							"parameters": [
								{
									"id": 2374,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrix",
										"id": 489
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SquareMatrix",
								"id": 2362
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 34,
							"character": 13
						}
					]
				},
				{
					"id": 2422,
					"name": "fromArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 2423,
							"name": "fromArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a matrix from the specified two dimensional array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  NumberMatrix.fromArray([[1,2],[3,4]]);\n  //  [1 2]\n  //  [3 4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2424,
									"name": "array",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrix",
								"id": 489
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NumberMatrix.fromArray",
								"id": 519
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 91,
							"character": 18
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "NumberMatrix.fromArray",
						"id": 519
					}
				},
				{
					"id": 2409,
					"name": "generate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 2410,
							"name": "generate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generate a matrix based on the given order and generateFn function on the indices.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let m = NumberMatrix.generate(3,3,(i,j)=>(i+j));\n  //  [0 1 2]\n  //  [1 2 3]\n  //  [2 3 4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2411,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2412,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2413,
									"name": "generateFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2414,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2415,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2416,
															"name": "rowIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2417,
															"name": "columnIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/matrices/number-matrix.ts",
													"line": 44,
													"character": 60
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrix",
								"id": 489
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NumberMatrix.generate",
								"id": 506
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 44,
							"character": 17
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "NumberMatrix.generate",
						"id": 506
					}
				},
				{
					"id": 2369,
					"name": "identity",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 2370,
							"name": "identity",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns identity matrix of the given order.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let m1 = SquareMatrix.identity(3);\n  //  m1:\n  //  [1 0 0]\n  //  [0 1 0]\n  //  [0 0 1]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2371,
									"name": "order",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SquareMatrix",
								"id": 2362
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/square-matrix.ts",
							"line": 23,
							"character": 17
						}
					]
				},
				{
					"id": 2418,
					"name": "multiply",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 2419,
							"name": "multiply",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Multiply two matrices and return the resultant matrix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //  m1:\n  //  [1 2 3]\n  //  [2 3 4]\n  //  m2:\n  //  [1 1]\n  //  [2 2]\n  //  [3 3]\n  NumberMatrix.multiply(m1,m2)\n  //  [14 14]\n  //  [20 20]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2420,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrix",
										"id": 489
									}
								},
								{
									"id": 2421,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NumberMatrix",
										"id": 489
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrix",
								"id": 489
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NumberMatrix.multiply",
								"id": 515
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 66,
							"character": 17
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "NumberMatrix.multiply",
						"id": 515
					}
				},
				{
					"id": 2401,
					"name": "zero",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 2402,
							"name": "zero",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a zero matrix of given order.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let zeroMatrix = NumberMatrix.zero(2,3)\n  //   [0 0 0]\n  //   [0 0 0]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2403,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2404,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NumberMatrix",
								"id": 489
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NumberMatrix.zero",
								"id": 498
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/matrices/number-matrix.ts",
							"line": 21,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "NumberMatrix.zero",
						"id": 498
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2363
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2440
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2425,
						2395,
						2465,
						2385,
						2393,
						2437,
						2389,
						2460,
						2441,
						2452,
						2397,
						2379,
						2377,
						2381,
						2391,
						2375,
						2445,
						2434,
						2431,
						2456,
						2428,
						2463,
						2399,
						2450,
						2454,
						2405,
						2372,
						2422,
						2409,
						2369,
						2418,
						2401
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/matrices/square-matrix.ts",
					"line": 6,
					"character": 25
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "NumberMatrix",
					"id": 489
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Matrix",
					"id": 358,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "number"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 398,
					"typeArguments": [
						{
							"type": "reference",
							"name": "ArrayMatrix",
							"id": 402,
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "number"
								}
							]
						}
					]
				}
			]
		},
		{
			"id": 1893,
			"name": "Stack",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Create a Stack (LIFO) datastructure."
			},
			"typeParameter": [
				{
					"id": 1894,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1896,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1897,
							"name": "new Stack",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1898,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Stack",
								"id": 1893
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 4,
							"character": 21
						}
					]
				},
				{
					"id": 1895,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 4,
							"character": 16
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "typeParameter",
							"name": "T"
						}
					}
				},
				{
					"id": 1899,
					"name": "height",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Number of elements in stack",
						"tags": [
							{
								"tag": "example",
								"text": "\n  //stack contains [1,2,3,4]\n  console.log(stack.height);\n  //Output: 4\n"
							}
						]
					},
					"getSignature": {
						"id": 1900,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Number of elements in stack",
							"tags": [
								{
									"tag": "example",
									"text": "\n  //stack contains [1,2,3,4]\n  console.log(stack.height);\n  //Output: 4\n"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "number"
						}
					},
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 17,
							"character": 12
						}
					]
				},
				{
					"id": 1911,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1912,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if stack is empty.\n* @example\n  //stack contains [1]\n  console.log(stack.isEmpty());\n  //Output: false\n  stack.pop();\n  console.log(stack.isEmpty());\n  //Output: true"
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 78,
							"character": 9
						}
					]
				},
				{
					"id": 1906,
					"name": "peek",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1907,
							"name": "peek",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return top of the stack (does not pop)",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //stack contains [1,2,3,4,5,6]\n  console.log(stack.peek());\n  //Output: 6 (stack does not change)\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "T"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 53,
							"character": 6
						}
					]
				},
				{
					"id": 1904,
					"name": "pop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1905,
							"name": "pop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Pop top of the stack and return",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //stack contains [1,2,3,4,5,6,7]\n  console.log(stack.pop());\n  //Output: 7\n  //now stack contains [1,2,3,4,5,6]\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "T"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 42,
							"character": 5
						}
					]
				},
				{
					"id": 1901,
					"name": "push",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1902,
							"name": "push",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Push item/items to the top of the stack",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //stack contains [1,2,3,4]\n  stack.push(5);\n  //now stack contains [1,2,3,4,5]\n  stack.push(6,7);\n  //now stack contains [1,2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1903,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 30,
							"character": 6
						}
					]
				},
				{
					"id": 1908,
					"name": "search",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1909,
							"name": "search",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return first index (from top of the stack) of an item in stack",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //stack contains [1,2,3,4,3,5]\n  console.log(stack.search(3));\n  //Output: 4\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1910,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 64,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1896
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1895
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						1899
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1911,
						1906,
						1904,
						1901,
						1908
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/stack.ts",
					"line": 3,
					"character": 18
				}
			]
		},
		{
			"id": 2111,
			"name": "SwappableList",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 2112,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 2141,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2142,
							"name": "new SwappableList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 2143,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SwappableList",
								"id": 2111
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.__constructor",
								"id": 173
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 771
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 8,
							"character": 78
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.__constructor",
						"id": 173
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.__constructor",
						"id": 771
					}
				},
				{
					"id": 2194,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "typeParameter",
							"name": "E"
						}
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 172
					}
				},
				{
					"id": 2144,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2145,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends the specified element to the end of this list"
							},
							"parameters": [
								{
									"id": 2146,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 176
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.add",
								"id": 774
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 664
							}
						},
						{
							"id": 2147,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts the specified element at the specified position in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  list.add(4); //[1,2,3,4]\n  list.add(2.5,2); //[1,2,2.5,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2148,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 2149,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 176
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.add",
								"id": 774
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 666
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 17,
							"character": 5
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 25,
							"character": 5
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 26,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.add",
						"id": 176
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.add",
						"id": 774
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.add",
						"id": 663
					}
				},
				{
					"id": 2150,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2151,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends all of the elements in the specified array to the end of this list"
							},
							"parameters": [
								{
									"id": 2152,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 179
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.addAll",
								"id": 780
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 670
							}
						},
						{
							"id": 2153,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts all of the elements in the specified array into this list at the specified position.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  list.addAll([4,5]); //[1,2,3,4,5]\n  list.addAll([2.1,2.2,2.3], 2); //[1,2,2.1,2.2,2.3,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2154,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								},
								{
									"id": 2155,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 179
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.addAll",
								"id": 780
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 672
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 38,
							"character": 8
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 46,
							"character": 8
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 47,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.addAll",
						"id": 179
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.addAll",
						"id": 780
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.addAll",
						"id": 669
					}
				},
				{
					"id": 2195,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2196,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 182
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.clear",
								"id": 710
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 182
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.clear",
						"id": 709
					}
				},
				{
					"id": 2126,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2127,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a shallow copy of this ArrayList instance.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let newList = swappableList.clone();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 401
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 70,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 400
					}
				},
				{
					"id": 2197,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2198,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2199,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 184
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.contains",
								"id": 712
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 184
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.contains",
						"id": 711
					}
				},
				{
					"id": 2200,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2201,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2202,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 187
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.containsAll",
								"id": 715
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 187
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.containsAll",
						"id": 714
					}
				},
				{
					"id": 2203,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2204,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2205,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 190
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.equals",
								"id": 718
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 190
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.equals",
						"id": 717
					}
				},
				{
					"id": 2120,
					"name": "fall",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2121,
							"name": "fall",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Swap between item in the given index and the item just after it.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  ////list contains [1,2,3,4]\n  list.fall(2); //returns true\n  //now list contains [1,2,4,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2122,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 43,
							"character": 6
						}
					]
				},
				{
					"id": 2229,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2230,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2231,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2232,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2233,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2234,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2235,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2236,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 216
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 216
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.forEach",
						"id": 743
					}
				},
				{
					"id": 2134,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2135,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the Object from the JSON string",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //json = \"[1,2,3,4]\"\n  list = new SwappableList<number>().fromString(json,(x)=>(parseFloat(x)));\n  //list contains [1,2,3,4]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2136,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2137,
									"name": "deserializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2138,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2139,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2140,
															"name": "itemJ",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/swappable-list.ts",
													"line": 96,
													"character": 41
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SwappableList",
								"id": 2111,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 96,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.fromString",
						"id": 1563
					}
				},
				{
					"id": 2156,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2157,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an item from the list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.get(2));\n  //Output: 3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2158,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.get",
								"id": 786
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.get",
								"id": 676
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 63,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.get",
						"id": 786
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.get",
						"id": 675
					}
				},
				{
					"id": 2159,
					"name": "indexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2160,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,2,4]\n  console.log(list.indexOf(2));\n  //Output: 1\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2161,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.indexOf",
								"id": 789
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.indexOf",
								"id": 679
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 74,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.indexOf",
						"id": 789
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.indexOf",
						"id": 678
					}
				},
				{
					"id": 2206,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2207,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 193
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.isEmpty",
								"id": 721
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 193
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.isEmpty",
						"id": 720
					}
				},
				{
					"id": 2237,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2238,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 224
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.iterator",
								"id": 752
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 224
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.iterator",
						"id": 751
					}
				},
				{
					"id": 2162,
					"name": "lastIndexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2163,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of last occurrence of the element.\n  //list contains [1,2,3,2,4]\n  console.log(list.lastIndexOf(2));\n  //Output: 3"
							},
							"parameters": [
								{
									"id": 2164,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.lastIndexOf",
								"id": 792
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.lastIndexOf",
								"id": 682
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 84,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.lastIndexOf",
						"id": 792
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.lastIndexOf",
						"id": 681
					}
				},
				{
					"id": 2165,
					"name": "listIterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2166,
							"name": "listIterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list iterator over the elements in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var listIterator = list.listIterator(); //starts at index 0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2167,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.listIterator",
								"id": 795
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.listIterator",
								"id": 685
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 93,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.listIterator",
						"id": 795
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.listIterator",
						"id": 684
					}
				},
				{
					"id": 2168,
					"name": "median",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2169,
							"name": "median",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the median of this list. If the list is empty returns undefined.\nIn case of two medians the later one is preferred.",
								"tags": [
									{
										"tag": "example",
										"text": "\n //list contains [1, 2, 3, 4]\nlist.median(); //returns 3\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.median",
								"id": 798
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.median",
								"id": 688
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 104,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.median",
						"id": 798
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.median",
						"id": 687
					}
				},
				{
					"id": 2208,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2209,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2210,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 195
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.remove",
								"id": 723
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 195
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.remove",
						"id": 722
					}
				},
				{
					"id": 2211,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2212,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2213,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 198
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAll",
								"id": 726
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 198
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAll",
						"id": 725
					}
				},
				{
					"id": 2170,
					"name": "removeAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2171,
							"name": "removeAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the element at the specified position in this list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.removeAt(1)); //[1,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2172,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.removeAt",
								"id": 800
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAt",
								"id": 690
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 115,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.removeAt",
						"id": 800
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAt",
						"id": 689
					}
				},
				{
					"id": 2214,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2215,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2216,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2217,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2218,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2219,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2220,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2221,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 201
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 201
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeIf",
						"id": 728
					}
				},
				{
					"id": 2173,
					"name": "removeRange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2174,
							"name": "removeRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5,6]\n  console.log(list.removeRange(1,4)); //[1,5,6]\n  //Output: [2,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2175,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2176,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.removeRange",
								"id": 803
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 126,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.removeRange",
						"id": 803
					}
				},
				{
					"id": 2222,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2223,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2224,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 209
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.retainAll",
								"id": 737
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 209
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.retainAll",
						"id": 736
					}
				},
				{
					"id": 2192,
					"name": "reverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2193,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverse the list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5]\n  list.reverse() //now list contains [5,4,3,2,1]\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.reverse",
								"id": 822
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.reverse",
								"id": 708
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 173,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.reverse",
						"id": 822
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.reverse",
						"id": 707
					}
				},
				{
					"id": 2117,
					"name": "rise",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2118,
							"name": "rise",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Swap between item in the given index and the item just before it.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  ////list contains [1,2,3,4]\n  list.rise(2); //returns true\n  //now list contains [1,3,2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2119,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 32,
							"character": 6
						}
					]
				},
				{
					"id": 2123,
					"name": "rotate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2124,
							"name": "rotate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rotate the list based on the direction specified (-ve : left, +ve/0 : right);",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4]\n  list.rotate(-1); //returns true\n  //now list contains [2,3,4,1]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2125,
									"name": "direction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 54,
							"character": 8
						}
					]
				},
				{
					"id": 2177,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2178,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the element at the specified position in this list with the specified element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.set(1,2.5)); //[1,2.5,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2179,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2180,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.set",
								"id": 807
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.set",
								"id": 693
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 137,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.set",
						"id": 807
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.set",
						"id": 692
					}
				},
				{
					"id": 2225,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2226,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 212
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.size",
								"id": 740
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 212
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.size",
						"id": 739
					}
				},
				{
					"id": 2181,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2182,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts this list according to the compareFn.\ncompareFn is a function which should return a number value (-ve, zero, or +ve).\nx is considered smaller than y if the compareFn(x,y) is negetive",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.sort(function(x,y) {\n    return x-y;\n  }); // [1, 2, 3, 6, 7, 8, 9, 11]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2183,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2184,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2185,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2186,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 2187,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-list.ts",
													"line": 152,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.sort",
								"id": 811
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 152,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.sort",
						"id": 811
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.sort",
						"id": 696
					}
				},
				{
					"id": 2188,
					"name": "subList",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2189,
							"name": "subList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.subList(2,7); // returns a list containing [6, 2, 7, 3, 9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2190,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2191,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.subList",
								"id": 818
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.subList",
								"id": 704
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 163,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.subList",
						"id": 818
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.subList",
						"id": 703
					}
				},
				{
					"id": 2113,
					"name": "swap",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2114,
							"name": "swap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Swap between items of given indexes. Returns true on success else false.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  ////list contains [1,2,3,4]\n  list.swap(1,3); //returns true\n  //now list contains [1,4,3,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2115,
									"name": "sourceIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2116,
									"name": "destinationIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 14,
							"character": 6
						}
					]
				},
				{
					"id": 2227,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2228,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 214
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.toArray",
								"id": 742
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 214
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.toArray",
						"id": 741
					}
				},
				{
					"id": 2128,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2129,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts the list into a JSON String",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4]\n  console.log(list.toString((x)=>(x.toString())));\n  //Output\n  //\"[1,2,3,4]\"\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2130,
									"name": "serializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2131,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2132,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2133,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/swappable-list.ts",
													"line": 82,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 82,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.toString",
						"id": 1557
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2141
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2194
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2144,
						2150,
						2195,
						2126,
						2197,
						2200,
						2203,
						2120,
						2229,
						2134,
						2156,
						2159,
						2206,
						2237,
						2162,
						2165,
						2168,
						2208,
						2211,
						2170,
						2214,
						2173,
						2222,
						2192,
						2117,
						2123,
						2177,
						2225,
						2181,
						2188,
						2113,
						2227,
						2128
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/lists/swappable-list.ts",
					"line": 5,
					"character": 26
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractList",
					"id": 769,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "List",
					"id": 661,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 398,
					"typeArguments": [
						{
							"type": "reference",
							"name": "SwappableList",
							"id": 2111,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "E"
								}
							]
						}
					]
				},
				{
					"type": "reference",
					"name": "Serializable",
					"id": 1556
				}
			]
		},
		{
			"id": 98,
			"name": "Tuple",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An Immutable collection of two elements.\nUsed as a Coordinate Pair"
			},
			"typeParameter": [
				{
					"id": 99,
					"name": "X",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 100,
					"name": "Y",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 101,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 102,
							"name": "new Tuple",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 103,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "X"
									}
								},
								{
									"id": 104,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "Y"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Tuple",
								"id": 98
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractImmutableCollection.__constructor",
								"id": 87
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/tuple.ts",
							"line": 7,
							"character": 67
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractImmutableCollection.__constructor",
						"id": 87
					}
				},
				{
					"id": 109,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-immutable-collection.ts",
							"line": 8,
							"character": 29
						}
					],
					"type": {
						"type": "reference",
						"name": "ReadonlyArray",
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "X"
									},
									{
										"type": "typeParameter",
										"name": "Y"
									}
								]
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractImmutableCollection._store",
						"id": 86
					}
				},
				{
					"id": 105,
					"name": "x",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Returns the first element of the tuple"
					},
					"getSignature": {
						"id": 106,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Returns the first element of the tuple"
						},
						"type": {
							"type": "typeParameter",
							"name": "X"
						}
					},
					"sources": [
						{
							"fileName": "ds/tuple.ts",
							"line": 16,
							"character": 9
						}
					]
				},
				{
					"id": 107,
					"name": "y",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Returns the second element of the tuple"
					},
					"getSignature": {
						"id": 108,
						"name": "__get",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"shortText": "Returns the second element of the tuple"
						},
						"type": {
							"type": "typeParameter",
							"name": "Y"
						}
					},
					"sources": [
						{
							"fileName": "ds/tuple.ts",
							"line": 23,
							"character": 9
						}
					]
				},
				{
					"id": 110,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 111,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 112,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "X"
											},
											{
												"type": "typeParameter",
												"name": "Y"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractImmutableCollection.contains",
								"id": 90
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-immutable-collection.ts",
							"line": 21,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractImmutableCollection.contains",
						"id": 90
					},
					"implementationOf": {
						"type": "reference",
						"name": "ImmutableCollection.contains",
						"id": 76
					}
				},
				{
					"id": 113,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 114,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 115,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "typeParameter",
													"name": "X"
												},
												{
													"type": "typeParameter",
													"name": "Y"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractImmutableCollection.containsAll",
								"id": 93
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-immutable-collection.ts",
							"line": 31,
							"character": 15
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractImmutableCollection.containsAll",
						"id": 93
					},
					"implementationOf": {
						"type": "reference",
						"name": "ImmutableCollection.containsAll",
						"id": 79
					}
				},
				{
					"id": 116,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 117,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the size of the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractImmutableCollection.size",
								"id": 96
							},
							"implementationOf": {
								"type": "reference",
								"name": "ImmutableCollection.size",
								"id": 83
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-immutable-collection.ts",
							"line": 44,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractImmutableCollection.size",
						"id": 96
					},
					"implementationOf": {
						"type": "reference",
						"name": "ImmutableCollection.size",
						"id": 82
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						101
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						109
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						105,
						107
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						110,
						113,
						116
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/tuple.ts",
					"line": 7,
					"character": 18
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractImmutableCollection",
					"id": 84,
					"typeArguments": [
						{
							"type": "union",
							"types": [
								{
									"type": "typeParameter",
									"name": "X"
								},
								{
									"type": "typeParameter",
									"name": "Y"
								}
							]
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "ImmutableCollection",
					"id": 74,
					"typeArguments": [
						{
							"type": "union",
							"types": [
								{
									"type": "typeParameter",
									"name": "X"
								},
								{
									"type": "typeParameter",
									"name": "Y"
								}
							]
						}
					]
				}
			]
		},
		{
			"id": 1006,
			"name": "Vertex",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A Vertex in graph datastructure."
			},
			"typeParameter": [
				{
					"id": 1007,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1009,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1010,
							"name": "new Vertex",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1011,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Vertex",
								"id": 1006
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 7,
							"character": 10
						}
					]
				},
				{
					"id": 1008,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 7,
							"character": 7
						}
					],
					"type": {
						"type": "typeParameter",
						"name": "E"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1009
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1008
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/graph.ts",
					"line": 6,
					"character": 19
				}
			]
		},
		{
			"id": 753,
			"name": "BinaryTree",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A data structure in which a record is linked to two successor records, usually referred to as the left branch when greater and the right when less than the previous record."
			},
			"typeParameter": [
				{
					"id": 754,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 758,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 759,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an item from the tree."
							},
							"parameters": [
								{
									"id": 760,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Tree.delete",
								"id": 656
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/binary-tree.ts",
							"line": 15,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Tree.delete",
						"id": 656
					}
				},
				{
					"id": 761,
					"name": "height",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 762,
							"name": "height",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the height of this binary tree."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"overwrites": {
								"type": "reference",
								"name": "Tree.height",
								"id": 659
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/binary-tree.ts",
							"line": 19,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Tree.height",
						"id": 659
					}
				},
				{
					"id": 763,
					"name": "inorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 764,
							"name": "inorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after inorder traversal of the tree."
							},
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/binary-tree.ts",
							"line": 23,
							"character": 9
						}
					]
				},
				{
					"id": 755,
					"name": "insert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 756,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert a new item to the tree."
							},
							"parameters": [
								{
									"id": 757,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Tree.insert",
								"id": 653
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/binary-tree.ts",
							"line": 11,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Tree.insert",
						"id": 653
					}
				},
				{
					"id": 767,
					"name": "postorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 768,
							"name": "postorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after postorder traversal of the tree."
							},
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/binary-tree.ts",
							"line": 31,
							"character": 11
						}
					]
				},
				{
					"id": 765,
					"name": "preorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 766,
							"name": "preorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after preorder traversal of the tree."
							},
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/binary-tree.ts",
							"line": 27,
							"character": 10
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						758,
						761,
						763,
						755,
						767,
						765
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/binary-tree.ts",
					"line": 7,
					"character": 27
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Tree",
					"id": 651,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractBinaryTree",
					"id": 881
				},
				{
					"type": "reference",
					"name": "BinarySearchTree",
					"id": 2683
				},
				{
					"type": "reference",
					"name": "Rope",
					"id": 2762
				}
			]
		},
		{
			"id": 398,
			"name": "Cloneable",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Classes that implements this interface must have a clone method."
			},
			"typeParameter": [
				{
					"id": 399,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 400,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 401,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "create a copy of the current object and return"
							},
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/cloneable.ts",
							"line": 6,
							"character": 7
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						400
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/cloneable.ts",
					"line": 2,
					"character": 26
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "ArrayList",
					"id": 1746
				},
				{
					"type": "reference",
					"name": "ArrayMap",
					"id": 1570
				},
				{
					"type": "reference",
					"name": "ArrayMatrix",
					"id": 402
				},
				{
					"type": "reference",
					"name": "Dictionary",
					"id": 2239
				},
				{
					"type": "reference",
					"name": "HistoryList",
					"id": 1964
				},
				{
					"type": "reference",
					"name": "NumberMatrix",
					"id": 489
				},
				{
					"type": "reference",
					"name": "SquareMatrix",
					"id": 2362
				},
				{
					"type": "reference",
					"name": "SwappableList",
					"id": 2111
				}
			]
		},
		{
			"id": 118,
			"name": "Collection",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Collection is a set of elements of same type."
			},
			"typeParameter": [
				{
					"id": 119,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 120,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 121,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add an item to collection"
							},
							"parameters": [
								{
									"id": 122,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 9,
							"character": 5
						}
					]
				},
				{
					"id": 123,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 124,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all items of an array to collection"
							},
							"parameters": [
								{
									"id": 125,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 13,
							"character": 8
						}
					]
				},
				{
					"id": 126,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 127,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements from this collection"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 17,
							"character": 7
						}
					]
				},
				{
					"id": 128,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 129,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element."
							},
							"parameters": [
								{
									"id": 130,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 21,
							"character": 10
						}
					]
				},
				{
					"id": 131,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 132,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array."
							},
							"parameters": [
								{
									"id": 133,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 25,
							"character": 13
						}
					]
				},
				{
					"id": 134,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 135,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality."
							},
							"parameters": [
								{
									"id": 136,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 29,
							"character": 8
						}
					]
				},
				{
					"id": 160,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 161,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection."
							},
							"parameters": [
								{
									"id": 162,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 163,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 164,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 165,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														},
														{
															"id": 166,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 167,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 61,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterable.forEach",
								"id": 3
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 61,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterable.forEach",
						"id": 3
					}
				},
				{
					"id": 137,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 138,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 33,
							"character": 9
						}
					]
				},
				{
					"id": 168,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 169,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return iterator for this object"
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterable.iterator",
								"id": 11
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 12,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterable.iterator",
						"id": 11
					}
				},
				{
					"id": 139,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 140,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present"
							},
							"parameters": [
								{
									"id": 141,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 37,
							"character": 8
						}
					]
				},
				{
					"id": 142,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 143,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array."
							},
							"parameters": [
								{
									"id": 144,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 41,
							"character": 11
						}
					]
				},
				{
					"id": 145,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 146,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function."
							},
							"parameters": [
								{
									"id": 147,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 148,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 149,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 150,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														},
														{
															"id": 151,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 152,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 45,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 45,
							"character": 10
						}
					]
				},
				{
					"id": 153,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 154,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array."
							},
							"parameters": [
								{
									"id": 155,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 49,
							"character": 11
						}
					]
				},
				{
					"id": 156,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 157,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 53,
							"character": 6
						}
					]
				},
				{
					"id": 158,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 159,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "T"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 57,
							"character": 9
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						120,
						123,
						126,
						128,
						131,
						134,
						160,
						137,
						168,
						139,
						142,
						145,
						153,
						156,
						158
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/collection.ts",
					"line": 5,
					"character": 27
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Iterable",
					"id": 1,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "T"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "Set",
					"id": 226
				},
				{
					"type": "reference",
					"name": "List",
					"id": 661
				},
				{
					"type": "reference",
					"name": "Queue",
					"id": 1208
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractCollection",
					"id": 170
				},
				{
					"type": "reference",
					"name": "AbstractList",
					"id": 769
				},
				{
					"type": "reference",
					"name": "AbstractQueue",
					"id": 1264
				},
				{
					"type": "reference",
					"name": "AbstractSet",
					"id": 290
				},
				{
					"type": "reference",
					"name": "AbstractSortedSet",
					"id": 1408
				},
				{
					"type": "reference",
					"name": "ArrayList",
					"id": 1746
				},
				{
					"type": "reference",
					"name": "HistoryList",
					"id": 1964
				},
				{
					"type": "reference",
					"name": "PriorityQueue",
					"id": 2467
				},
				{
					"type": "reference",
					"name": "SwappableList",
					"id": 2111
				}
			]
		},
		{
			"id": 1020,
			"name": "Graph",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A graph is a pictorial representation of a set of objects where some pairs of objects are connected by links.\nThe interconnected objects are represented by points termed as vertices, and the links that connect the vertices are called edges."
			},
			"typeParameter": [
				{
					"id": 1021,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1022,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1023,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add a new vertex with the specified label to this graph."
							},
							"parameters": [
								{
									"id": 1024,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 30,
							"character": 5
						}
					]
				},
				{
					"id": 1025,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1026,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add new vertices with the labels present in the specified array."
							},
							"parameters": [
								{
									"id": 1027,
									"name": "labels",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 34,
							"character": 8
						}
					]
				},
				{
					"id": 1044,
					"name": "addEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1045,
							"name": "addEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add the specified edge to the graph. The start and end vertices are added automatically to the graph if not present."
							},
							"parameters": [
								{
									"id": 1046,
									"name": "edge",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Edge",
										"id": 1012,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 58,
							"character": 9
						}
					]
				},
				{
					"id": 1028,
					"name": "addVertex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1029,
							"name": "addVertex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add the specified vertex to the graph."
							},
							"parameters": [
								{
									"id": 1030,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 38,
							"character": 11
						}
					]
				},
				{
					"id": 1031,
					"name": "addVertices",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1032,
							"name": "addVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all vertices in the specified array to the graph."
							},
							"parameters": [
								{
									"id": 1033,
									"name": "vertices",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Vertex",
											"id": 1006,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "E"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 42,
							"character": 13
						}
					]
				},
				{
					"id": 1054,
					"name": "adjacentEdges",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1055,
							"name": "adjacentEdges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of edges starting from specified vertex."
							},
							"parameters": [
								{
									"id": 1056,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Edge",
												"id": 1012,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 74,
							"character": 15
						}
					]
				},
				{
					"id": 1057,
					"name": "adjacentVertices",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1058,
							"name": "adjacentVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of vertices adjacent to the specified vertex."
							},
							"parameters": [
								{
									"id": 1059,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Vertex",
												"id": 1006,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 78,
							"character": 18
						}
					]
				},
				{
					"id": 1040,
					"name": "createEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1041,
							"name": "createEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create vertices from the given labels and an edge connecting them and add it to the graph."
							},
							"parameters": [
								{
									"id": 1042,
									"name": "startLabel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1043,
									"name": "endLabel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 54,
							"character": 12
						}
					]
				},
				{
					"id": 1052,
					"name": "edgeSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1053,
							"name": "edgeSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of edges present in the graph."
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Edge",
										"id": 1012,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 70,
							"character": 9
						}
					]
				},
				{
					"id": 1034,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1035,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove a single vertex with the specified label from the graph."
							},
							"parameters": [
								{
									"id": 1036,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 46,
							"character": 8
						}
					]
				},
				{
					"id": 1047,
					"name": "removeEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1048,
							"name": "removeEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove the specified edge from the graph."
							},
							"parameters": [
								{
									"id": 1049,
									"name": "edge",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Edge",
										"id": 1012,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 62,
							"character": 12
						}
					]
				},
				{
					"id": 1037,
					"name": "removeVertex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1038,
							"name": "removeVertex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove the specified vertex from the graph."
							},
							"parameters": [
								{
									"id": 1039,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 50,
							"character": 14
						}
					]
				},
				{
					"id": 1050,
					"name": "vertexSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1051,
							"name": "vertexSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of vertices present in the graph."
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Vertex",
										"id": 1006,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 66,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1022,
						1025,
						1044,
						1028,
						1031,
						1054,
						1057,
						1040,
						1052,
						1034,
						1047,
						1037,
						1050
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/graph.ts",
					"line": 26,
					"character": 22
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractGraph",
					"id": 1163
				},
				{
					"type": "reference",
					"name": "DiGraph",
					"id": 1913
				}
			]
		},
		{
			"id": 74,
			"name": "ImmutableCollection",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A Collection whose properties / elements cannot be changed."
			},
			"typeParameter": [
				{
					"id": 75,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 76,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 77,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element."
							},
							"parameters": [
								{
									"id": 78,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/immutable-collection.ts",
							"line": 9,
							"character": 10
						}
					]
				},
				{
					"id": 79,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 80,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array."
							},
							"parameters": [
								{
									"id": 81,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/immutable-collection.ts",
							"line": 13,
							"character": 13
						}
					]
				},
				{
					"id": 82,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 83,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the size of the collection"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/immutable-collection.ts",
							"line": 17,
							"character": 6
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						76,
						79,
						82
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/immutable-collection.ts",
					"line": 4,
					"character": 36
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "ImmutableList",
					"id": 2861
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractImmutableCollection",
					"id": 84
				},
				{
					"type": "reference",
					"name": "Tuple",
					"id": 98
				}
			]
		},
		{
			"id": 2861,
			"name": "ImmutableList",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A List whose properties / elements cannot be changed."
			},
			"typeParameter": [
				{
					"id": 2862,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 2863,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2864,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this list contains the specified element."
							},
							"parameters": [
								{
									"id": 2865,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "ImmutableCollection.contains",
								"id": 76
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/immutable-list.ts",
							"line": 11,
							"character": 12
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ImmutableCollection.contains",
						"id": 76
					}
				},
				{
					"id": 2866,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2867,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this list contains all of the elements in the specified array."
							},
							"parameters": [
								{
									"id": 2868,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "ImmutableCollection.containsAll",
								"id": 79
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/immutable-list.ts",
							"line": 15,
							"character": 15
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ImmutableCollection.containsAll",
						"id": 79
					}
				},
				{
					"id": 2871,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2872,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an item at the specified position in the list."
							},
							"parameters": [
								{
									"id": 2873,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "E"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/immutable-list.ts",
							"line": 23,
							"character": 7
						}
					]
				},
				{
					"id": 2869,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2870,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the size of this list"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"overwrites": {
								"type": "reference",
								"name": "ImmutableCollection.size",
								"id": 82
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/immutable-list.ts",
							"line": 19,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ImmutableCollection.size",
						"id": 82
					}
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2863,
						2866,
						2871,
						2869
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/immutable-list.ts",
					"line": 6,
					"character": 30
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ImmutableCollection",
					"id": 74,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 1,
			"name": "Iterable",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Anything whose elements can be iterated over."
			},
			"typeParameter": [
				{
					"id": 2,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 3,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Do an action for each item in this object"
							},
							"parameters": [
								{
									"id": 5,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 7,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 8,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														},
														{
															"id": 9,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 10,
															"name": "iterable",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Iterable",
																"id": 1,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/iterable.ts",
													"line": 8,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 8,
							"character": 9
						}
					]
				},
				{
					"id": 11,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 12,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return iterator for this object"
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 12,
							"character": 10
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3,
						11
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/iterable.ts",
					"line": 4,
					"character": 25
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118
				}
			]
		},
		{
			"id": 661,
			"name": "List",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Sub interface of Collection. List has much more functionalities than a collection."
			},
			"typeParameter": [
				{
					"id": 662,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 663,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 664,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends the specified element to the end of this list"
							},
							"parameters": [
								{
									"id": 665,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.add",
								"id": 120
							}
						},
						{
							"id": 666,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts the specified element at the specified position in this list"
							},
							"parameters": [
								{
									"id": 667,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 668,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.add",
								"id": 120
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 11,
							"character": 5
						},
						{
							"fileName": "interfaces/list.ts",
							"line": 15,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Collection.add",
						"id": 120
					}
				},
				{
					"id": 669,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 670,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends all of the elements in the specified array to the end of this list"
							},
							"parameters": [
								{
									"id": 671,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.addAll",
								"id": 123
							}
						},
						{
							"id": 672,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts all of the elements in the specified array into this list at the specified position."
							},
							"parameters": [
								{
									"id": 673,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								},
								{
									"id": 674,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.addAll",
								"id": 123
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 19,
							"character": 8
						},
						{
							"fileName": "interfaces/list.ts",
							"line": 23,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Collection.addAll",
						"id": 123
					}
				},
				{
					"id": 709,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 710,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements from this collection"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.clear",
								"id": 126
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 17,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.clear",
						"id": 126
					}
				},
				{
					"id": 711,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 712,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element."
							},
							"parameters": [
								{
									"id": 713,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.contains",
								"id": 128
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 21,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.contains",
						"id": 128
					}
				},
				{
					"id": 714,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 715,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array."
							},
							"parameters": [
								{
									"id": 716,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.containsAll",
								"id": 131
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 25,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.containsAll",
						"id": 131
					}
				},
				{
					"id": 717,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 718,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality."
							},
							"parameters": [
								{
									"id": 719,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.equals",
								"id": 134
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 29,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.equals",
						"id": 134
					}
				},
				{
					"id": 743,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 744,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection."
							},
							"parameters": [
								{
									"id": 745,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 746,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 747,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 748,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 749,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 750,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 61,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterable.forEach",
								"id": 3
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.forEach",
								"id": 160
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 61,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterable.forEach",
						"id": 3
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.forEach",
						"id": 160
					}
				},
				{
					"id": 675,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 676,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an item from the list"
							},
							"parameters": [
								{
									"id": 677,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 27,
							"character": 5
						}
					]
				},
				{
					"id": 678,
					"name": "indexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 679,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position of first occurrence of the element."
							},
							"parameters": [
								{
									"id": 680,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 31,
							"character": 9
						}
					]
				},
				{
					"id": 720,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 721,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.isEmpty",
								"id": 137
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 33,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.isEmpty",
						"id": 137
					}
				},
				{
					"id": 751,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 752,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return iterator for this object"
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterable.iterator",
								"id": 11
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 12,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterable.iterator",
						"id": 11
					}
				},
				{
					"id": 681,
					"name": "lastIndexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 682,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position of last occurrence of the element."
							},
							"parameters": [
								{
									"id": 683,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 35,
							"character": 13
						}
					]
				},
				{
					"id": 684,
					"name": "listIterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 685,
							"name": "listIterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list iterator over the elements in this list starting from the 'index'"
							},
							"parameters": [
								{
									"id": 686,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 39,
							"character": 14
						}
					]
				},
				{
					"id": 687,
					"name": "median",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 688,
							"name": "median",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the median of the list"
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 43,
							"character": 8
						}
					]
				},
				{
					"id": 722,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 723,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present"
							},
							"parameters": [
								{
									"id": 724,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.remove",
								"id": 139
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 37,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.remove",
						"id": 139
					}
				},
				{
					"id": 725,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 726,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array."
							},
							"parameters": [
								{
									"id": 727,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeAll",
								"id": 142
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 41,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeAll",
						"id": 142
					}
				},
				{
					"id": 689,
					"name": "removeAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 690,
							"name": "removeAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the element at the specified position in this list."
							},
							"parameters": [
								{
									"id": 691,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 47,
							"character": 10
						}
					]
				},
				{
					"id": 728,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 729,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function."
							},
							"parameters": [
								{
									"id": 730,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 731,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 732,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 733,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 734,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 735,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 45,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeIf",
								"id": 145
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 45,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeIf",
						"id": 145
					}
				},
				{
					"id": 736,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 737,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array."
							},
							"parameters": [
								{
									"id": 738,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.retainAll",
								"id": 153
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 49,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.retainAll",
						"id": 153
					}
				},
				{
					"id": 707,
					"name": "reverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 708,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverse the list"
							},
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 63,
							"character": 9
						}
					]
				},
				{
					"id": 692,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 693,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the element at the specified position in this list with the specified element"
							},
							"parameters": [
								{
									"id": 694,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 695,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 51,
							"character": 5
						}
					]
				},
				{
					"id": 739,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 740,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.size",
								"id": 156
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 53,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.size",
						"id": 156
					}
				},
				{
					"id": 696,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 697,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts this list according to the compareFn"
							},
							"parameters": [
								{
									"id": 698,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 699,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 700,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 701,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 702,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/list.ts",
													"line": 55,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 55,
							"character": 6
						}
					]
				},
				{
					"id": 703,
					"name": "subList",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 704,
							"name": "subList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive."
							},
							"parameters": [
								{
									"id": 705,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 706,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 59,
							"character": 9
						}
					]
				},
				{
					"id": 741,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 742,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.toArray",
								"id": 158
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 57,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.toArray",
						"id": 158
					}
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						663,
						669,
						709,
						711,
						714,
						717,
						743,
						675,
						678,
						720,
						751,
						681,
						684,
						687,
						722,
						725,
						689,
						728,
						736,
						707,
						692,
						739,
						696,
						703,
						741
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/list.ts",
					"line": 7,
					"character": 21
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractList",
					"id": 769
				},
				{
					"type": "reference",
					"name": "ArrayList",
					"id": 1746
				},
				{
					"type": "reference",
					"name": "HistoryList",
					"id": 1964
				},
				{
					"type": "reference",
					"name": "SwappableList",
					"id": 2111
				}
			]
		},
		{
			"id": 910,
			"name": "Map",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value."
			},
			"typeParameter": [
				{
					"id": 911,
					"name": "K",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 912,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 913,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 914,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the mappings from this map."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 18,
							"character": 7
						}
					]
				},
				{
					"id": 915,
					"name": "compute",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 916,
							"name": "compute",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value."
							},
							"parameters": [
								{
									"id": 917,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 918,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 919,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 920,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 921,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 922,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 923,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "V"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/map.ts",
													"line": 22,
													"character": 29
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 22,
							"character": 9
						}
					]
				},
				{
					"id": 924,
					"name": "computeIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 925,
							"name": "computeIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map."
							},
							"parameters": [
								{
									"id": 926,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 927,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 928,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 929,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 930,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 931,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 932,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "V"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/map.ts",
													"line": 26,
													"character": 37
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 26,
							"character": 17
						}
					]
				},
				{
					"id": 933,
					"name": "computeIfPresent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 934,
							"name": "computeIfPresent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
							},
							"parameters": [
								{
									"id": 935,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 936,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 937,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 938,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 939,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 940,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 941,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "V"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/map.ts",
													"line": 30,
													"character": 38
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 30,
							"character": 18
						}
					]
				},
				{
					"id": 942,
					"name": "containsKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 943,
							"name": "containsKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains a mapping for the specified key."
							},
							"parameters": [
								{
									"id": 944,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 34,
							"character": 13
						}
					]
				},
				{
					"id": 945,
					"name": "containsValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 946,
							"name": "containsValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map maps one or more keys to the specified value."
							},
							"parameters": [
								{
									"id": 947,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 38,
							"character": 15
						}
					]
				},
				{
					"id": 948,
					"name": "entrySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 949,
							"name": "entrySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the mappings contained in this map."
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "reference",
										"name": "MapEntry",
										"id": 905,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 42,
							"character": 10
						}
					]
				},
				{
					"id": 950,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 951,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified map with this map for equality."
							},
							"parameters": [
								{
									"id": 952,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 46,
							"character": 8
						}
					]
				},
				{
					"id": 953,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 954,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception."
							},
							"parameters": [
								{
									"id": 955,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 956,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 957,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 958,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 959,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 960,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/map.ts",
													"line": 50,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 50,
							"character": 9
						}
					]
				},
				{
					"id": 961,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 962,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped. undefined if there is no mapping."
							},
							"parameters": [
								{
									"id": 963,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 54,
							"character": 5
						}
					]
				},
				{
					"id": 964,
					"name": "getOrDefault",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 965,
							"name": "getOrDefault",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key or if key is mapped to null."
							},
							"parameters": [
								{
									"id": 966,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 967,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "V"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 58,
							"character": 14
						}
					]
				},
				{
					"id": 968,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 969,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains no key-value mappings."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 62,
							"character": 9
						}
					]
				},
				{
					"id": 970,
					"name": "keySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 971,
							"name": "keySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the keys contained in this map."
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "K"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 66,
							"character": 8
						}
					]
				},
				{
					"id": 972,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 973,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Associates the specified value with the specified key in this map.Returns the old value associated with the key or  undefined."
							},
							"parameters": [
								{
									"id": 974,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 975,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 70,
							"character": 5
						}
					]
				},
				{
					"id": 976,
					"name": "putAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 977,
							"name": "putAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies all of the mappings from the specified map to this map."
							},
							"parameters": [
								{
									"id": 978,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 74,
							"character": 8
						}
					]
				},
				{
					"id": 979,
					"name": "putIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 980,
							"name": "putIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns undefined, else returns the current value."
							},
							"parameters": [
								{
									"id": 981,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 982,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 78,
							"character": 13
						}
					]
				},
				{
					"id": 983,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 984,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the mapping for a key from this map if it is present"
							},
							"parameters": [
								{
									"id": 985,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 82,
							"character": 8
						}
					]
				},
				{
					"id": 986,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 987,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the entry for the specified key only if it is currently mapped to the specified value."
							},
							"parameters": [
								{
									"id": 988,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 989,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 86,
							"character": 10
						}
					]
				},
				{
					"id": 990,
					"name": "replace",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 991,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replace all entries with specified value with the new value. Returns true if map was changed."
							},
							"parameters": [
								{
									"id": 992,
									"name": "oldValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								},
								{
									"id": 993,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 90,
							"character": 9
						}
					]
				},
				{
					"id": 994,
					"name": "replaceAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 995,
							"name": "replaceAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception."
							},
							"parameters": [
								{
									"id": 996,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 997,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 998,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 999,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1000,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 1001,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "V"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/map.ts",
													"line": 94,
													"character": 25
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 94,
							"character": 12
						}
					]
				},
				{
					"id": 1002,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1003,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of key-value mappings in this map."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 98,
							"character": 6
						}
					]
				},
				{
					"id": 1004,
					"name": "values",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1005,
							"name": "values",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a List view of the values contained in this map."
							},
							"type": {
								"type": "reference",
								"name": "List",
								"id": 661,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "V"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 102,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						913,
						915,
						924,
						933,
						942,
						945,
						948,
						950,
						953,
						961,
						964,
						968,
						970,
						972,
						976,
						979,
						983,
						986,
						990,
						994,
						1002,
						1004
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/map.ts",
					"line": 14,
					"character": 20
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractMap",
					"id": 1060
				},
				{
					"type": "reference",
					"name": "ArrayMap",
					"id": 1570
				},
				{
					"type": "reference",
					"name": "Dictionary",
					"id": 2239
				}
			]
		},
		{
			"id": 905,
			"name": "MapEntry",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Used to denote an entry in Map(readonly)."
			},
			"typeParameter": [
				{
					"id": 906,
					"name": "K",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 907,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 908,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 7,
							"character": 14
						}
					],
					"type": {
						"type": "typeParameter",
						"name": "K"
					}
				},
				{
					"id": 909,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 8,
							"character": 16
						}
					],
					"type": {
						"type": "typeParameter",
						"name": "V"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						908,
						909
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/map.ts",
					"line": 6,
					"character": 25
				}
			]
		},
		{
			"id": 358,
			"name": "Matrix",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 359,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 379,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 380,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check whether the specified matrix is equal to this matrix."
							},
							"parameters": [
								{
									"id": 381,
									"name": "matrix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Matrix",
										"id": 358,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/matrix.ts",
							"line": 35,
							"character": 8
						}
					]
				},
				{
					"id": 360,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 361,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read the item at the specified position in this matrix."
							},
							"parameters": [
								{
									"id": 362,
									"name": "rowIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 363,
									"name": "columnIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/matrix.ts",
							"line": 5,
							"character": 5
						}
					]
				},
				{
					"id": 371,
					"name": "height",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 372,
							"name": "height",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of rows in this matrix."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/matrix.ts",
							"line": 20,
							"character": 8
						}
					]
				},
				{
					"id": 364,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 365,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert an item at the specified position in this matrix."
							},
							"parameters": [
								{
									"id": 366,
									"name": "rowIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 367,
									"name": "columnIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 368,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/matrix.ts",
							"line": 10,
							"character": 5
						}
					]
				},
				{
					"id": 375,
					"name": "subMatrix",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 376,
							"name": "subMatrix",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the submatrix obtained after removing the specified rows and columns from this matrix."
							},
							"parameters": [
								{
									"id": 377,
									"name": "rows",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 378,
									"name": "cols",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Matrix",
								"id": 358,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/matrix.ts",
							"line": 30,
							"character": 11
						}
					]
				},
				{
					"id": 369,
					"name": "transpose",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 370,
							"name": "transpose",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the transpose of this matrix."
							},
							"type": {
								"type": "reference",
								"name": "Matrix",
								"id": 358,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/matrix.ts",
							"line": 15,
							"character": 11
						}
					]
				},
				{
					"id": 373,
					"name": "width",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 374,
							"name": "width",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of columns in this matrix."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/matrix.ts",
							"line": 25,
							"character": 7
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						379,
						360,
						371,
						364,
						375,
						369,
						373
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/matrix.ts",
					"line": 1,
					"character": 23
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "ArrayMatrix",
					"id": 402
				},
				{
					"type": "reference",
					"name": "NumberMatrix",
					"id": 489
				},
				{
					"type": "reference",
					"name": "SquareMatrix",
					"id": 2362
				}
			]
		},
		{
			"id": 390,
			"name": "MatrixColumn",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A single column of a matrix."
			},
			"typeParameter": [
				{
					"id": 391,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 392,
					"name": "change",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 393,
							"name": "change",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Change this matrix column with another column of same matrix."
							},
							"parameters": [
								{
									"id": 394,
									"name": "col",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "MatrixColumn",
										"id": 390,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/matrix.ts",
							"line": 59,
							"character": 8
						}
					]
				},
				{
					"id": 395,
					"name": "interchange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 396,
							"name": "interchange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Interchange this column with another column of the same matrix."
							},
							"parameters": [
								{
									"id": 397,
									"name": "col",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "MatrixColumn",
										"id": 390,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/matrix.ts",
							"line": 63,
							"character": 13
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						392,
						395
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/matrix.ts",
					"line": 55,
					"character": 29
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "ArrayMatrixColumn",
					"id": 467
				},
				{
					"type": "reference",
					"name": "NumberMatrixColumn",
					"id": 596
				}
			]
		},
		{
			"id": 382,
			"name": "MatrixRow",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A single row of a matrix."
			},
			"typeParameter": [
				{
					"id": 383,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 384,
					"name": "change",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 385,
							"name": "change",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Change this matrix row with another row of same matrix."
							},
							"parameters": [
								{
									"id": 386,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "MatrixRow",
										"id": 382,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/matrix.ts",
							"line": 45,
							"character": 8
						}
					]
				},
				{
					"id": 387,
					"name": "interchange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 388,
							"name": "interchange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Interchange this row with another row of the same matrix."
							},
							"parameters": [
								{
									"id": 389,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "MatrixRow",
										"id": 382,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/matrix.ts",
							"line": 49,
							"character": 13
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						384,
						387
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/matrix.ts",
					"line": 41,
					"character": 26
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "ArrayMatrixRow",
					"id": 445
				},
				{
					"type": "reference",
					"name": "NumberMatrixRow",
					"id": 564
				}
			]
		},
		{
			"id": 1208,
			"name": "Queue",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 1209,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1210,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1211,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1212,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.add",
								"id": 120
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/queue.ts",
							"line": 4,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Collection.add",
						"id": 120
					}
				},
				{
					"id": 1217,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1218,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all items of an array to collection"
							},
							"parameters": [
								{
									"id": 1219,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.addAll",
								"id": 123
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 13,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.addAll",
						"id": 123
					}
				},
				{
					"id": 1220,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1221,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements from this collection"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.clear",
								"id": 126
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 17,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.clear",
						"id": 126
					}
				},
				{
					"id": 1222,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1223,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element."
							},
							"parameters": [
								{
									"id": 1224,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.contains",
								"id": 128
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 21,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.contains",
						"id": 128
					}
				},
				{
					"id": 1225,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1226,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array."
							},
							"parameters": [
								{
									"id": 1227,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.containsAll",
								"id": 131
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 25,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.containsAll",
						"id": 131
					}
				},
				{
					"id": 1213,
					"name": "element",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1214,
							"name": "element",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/queue.ts",
							"line": 5,
							"character": 9
						}
					]
				},
				{
					"id": 1228,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1229,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality."
							},
							"parameters": [
								{
									"id": 1230,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.equals",
								"id": 134
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 29,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.equals",
						"id": 134
					}
				},
				{
					"id": 1254,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1255,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection."
							},
							"parameters": [
								{
									"id": 1256,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1257,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1258,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1259,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1260,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1261,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 61,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterable.forEach",
								"id": 3
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.forEach",
								"id": 160
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 61,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterable.forEach",
						"id": 3
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.forEach",
						"id": 160
					}
				},
				{
					"id": 1231,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1232,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.isEmpty",
								"id": 137
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 33,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.isEmpty",
						"id": 137
					}
				},
				{
					"id": 1262,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1263,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return iterator for this object"
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterable.iterator",
								"id": 11
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 12,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterable.iterator",
						"id": 11
					}
				},
				{
					"id": 1215,
					"name": "poll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1216,
							"name": "poll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/queue.ts",
							"line": 6,
							"character": 6
						}
					]
				},
				{
					"id": 1233,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1234,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present"
							},
							"parameters": [
								{
									"id": 1235,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.remove",
								"id": 139
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 37,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.remove",
						"id": 139
					}
				},
				{
					"id": 1236,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1237,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array."
							},
							"parameters": [
								{
									"id": 1238,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeAll",
								"id": 142
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 41,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeAll",
						"id": 142
					}
				},
				{
					"id": 1239,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1240,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function."
							},
							"parameters": [
								{
									"id": 1241,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1242,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1243,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1244,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1245,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1246,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 45,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeIf",
								"id": 145
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 45,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeIf",
						"id": 145
					}
				},
				{
					"id": 1247,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1248,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array."
							},
							"parameters": [
								{
									"id": 1249,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.retainAll",
								"id": 153
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 49,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.retainAll",
						"id": 153
					}
				},
				{
					"id": 1250,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1251,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.size",
								"id": 156
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 53,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.size",
						"id": 156
					}
				},
				{
					"id": 1252,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1253,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.toArray",
								"id": 158
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 57,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.toArray",
						"id": 158
					}
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1210,
						1217,
						1220,
						1222,
						1225,
						1213,
						1228,
						1254,
						1231,
						1262,
						1215,
						1233,
						1236,
						1239,
						1247,
						1250,
						1252
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/queue.ts",
					"line": 3,
					"character": 22
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractQueue",
					"id": 1264
				},
				{
					"type": "reference",
					"name": "PriorityQueue",
					"id": 2467
				}
			]
		},
		{
			"id": 1556,
			"name": "Serializable",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Implementing this interface means that the class overrides Object's toString method to return the object's JSON String"
			},
			"children": [
				{
					"id": 1563,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1564,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the Object from the JSON string"
							},
							"parameters": [
								{
									"id": 1565,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1566,
									"name": "deserializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1567,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1568,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1569,
															"name": "itemJSON",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/serializable.ts",
													"line": 12,
													"character": 41
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/serializable.ts",
							"line": 12,
							"character": 12
						}
					]
				},
				{
					"id": 1557,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1558,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return this object's corresponding JSON String"
							},
							"parameters": [
								{
									"id": 1559,
									"name": "serializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1560,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1561,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1562,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/serializable.ts",
													"line": 8,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/serializable.ts",
							"line": 8,
							"character": 10
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1563,
						1557
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/serializable.ts",
					"line": 4,
					"character": 29
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "ArrayList",
					"id": 1746
				},
				{
					"type": "reference",
					"name": "Dictionary",
					"id": 2239
				},
				{
					"type": "reference",
					"name": "HistoryList",
					"id": 1964
				},
				{
					"type": "reference",
					"name": "PriorityQueue",
					"id": 2467
				},
				{
					"type": "reference",
					"name": "SwappableList",
					"id": 2111
				}
			]
		},
		{
			"id": 226,
			"name": "Set",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A collection that contains no duplicate elements"
			},
			"typeParameter": [
				{
					"id": 227,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 228,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 229,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds the specified element to this set if it is not already present"
							},
							"parameters": [
								{
									"id": 230,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.add",
								"id": 120
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 10,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Collection.add",
						"id": 120
					}
				},
				{
					"id": 231,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 232,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds all of the elements in the specified array to this set if they're not already present"
							},
							"parameters": [
								{
									"id": 233,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.addAll",
								"id": 123
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 14,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Collection.addAll",
						"id": 123
					}
				},
				{
					"id": 246,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 247,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements from this collection"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.clear",
								"id": 126
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 17,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.clear",
						"id": 126
					}
				},
				{
					"id": 248,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 249,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element."
							},
							"parameters": [
								{
									"id": 250,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.contains",
								"id": 128
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 21,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.contains",
						"id": 128
					}
				},
				{
					"id": 251,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 252,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array."
							},
							"parameters": [
								{
									"id": 253,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.containsAll",
								"id": 131
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 25,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.containsAll",
						"id": 131
					}
				},
				{
					"id": 240,
					"name": "difference",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 241,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by subtracting the specified set from this set."
							},
							"parameters": [
								{
									"id": 242,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 26,
							"character": 12
						}
					]
				},
				{
					"id": 254,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 255,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality."
							},
							"parameters": [
								{
									"id": 256,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.equals",
								"id": 134
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 29,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.equals",
						"id": 134
					}
				},
				{
					"id": 243,
					"name": "exclusion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 244,
							"name": "exclusion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by exclusion of this set and the set specified."
							},
							"parameters": [
								{
									"id": 245,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 30,
							"character": 11
						}
					]
				},
				{
					"id": 280,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 281,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection."
							},
							"parameters": [
								{
									"id": 282,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 283,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 284,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 285,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 286,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 287,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 61,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterable.forEach",
								"id": 3
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.forEach",
								"id": 160
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 61,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterable.forEach",
						"id": 3
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.forEach",
						"id": 160
					}
				},
				{
					"id": 237,
					"name": "intersection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 238,
							"name": "intersection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by intersection of this set and the set specified"
							},
							"parameters": [
								{
									"id": 239,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 22,
							"character": 14
						}
					]
				},
				{
					"id": 257,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 258,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.isEmpty",
								"id": 137
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 33,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.isEmpty",
						"id": 137
					}
				},
				{
					"id": 288,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 289,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return iterator for this object"
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterable.iterator",
								"id": 11
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 12,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterable.iterator",
						"id": 11
					}
				},
				{
					"id": 259,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 260,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present"
							},
							"parameters": [
								{
									"id": 261,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.remove",
								"id": 139
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 37,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.remove",
						"id": 139
					}
				},
				{
					"id": 262,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 263,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array."
							},
							"parameters": [
								{
									"id": 264,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeAll",
								"id": 142
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 41,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeAll",
						"id": 142
					}
				},
				{
					"id": 265,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 266,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function."
							},
							"parameters": [
								{
									"id": 267,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 268,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 269,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 270,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 271,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 272,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 45,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeIf",
								"id": 145
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 45,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeIf",
						"id": 145
					}
				},
				{
					"id": 273,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 274,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array."
							},
							"parameters": [
								{
									"id": 275,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.retainAll",
								"id": 153
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 49,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.retainAll",
						"id": 153
					}
				},
				{
					"id": 276,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 277,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.size",
								"id": 156
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 53,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.size",
						"id": 156
					}
				},
				{
					"id": 278,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 279,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.toArray",
								"id": 158
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 57,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.toArray",
						"id": 158
					}
				},
				{
					"id": 234,
					"name": "union",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 235,
							"name": "union",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by union of this set and the set specified"
							},
							"parameters": [
								{
									"id": 236,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 18,
							"character": 7
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						228,
						231,
						246,
						248,
						251,
						240,
						254,
						243,
						280,
						237,
						257,
						288,
						259,
						262,
						265,
						273,
						276,
						278,
						234
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/set.ts",
					"line": 6,
					"character": 20
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 118,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "SortedSet",
					"id": 1324
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractSet",
					"id": 290
				},
				{
					"type": "reference",
					"name": "AbstractSortedSet",
					"id": 1408
				}
			]
		},
		{
			"id": 1324,
			"name": "SortedSet",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A Set that further provides a total ordering on its elements. The elements are ordered using the compare function typically provided at sorted set creation time."
			},
			"typeParameter": [
				{
					"id": 1325,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1326,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1327,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds the specified element to this set if it is not already present"
							},
							"parameters": [
								{
									"id": 1328,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Set.add",
								"id": 228
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 10,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Set.add",
						"id": 228
					}
				},
				{
					"id": 1329,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1330,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds all of the elements in the specified array to this set if they're not already present"
							},
							"parameters": [
								{
									"id": 1331,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Set.addAll",
								"id": 231
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 14,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Set.addAll",
						"id": 231
					}
				},
				{
					"id": 1364,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1365,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements from this collection"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.clear",
								"id": 126
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 17,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.clear",
						"id": 126
					}
				},
				{
					"id": 1332,
					"name": "comparator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1333,
							"name": "comparator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the compare function used to order the elements in this set"
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1334,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1335,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1336,
													"name": "x",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												},
												{
													"id": 1337,
													"name": "y",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "interfaces/sorted-set.ts",
											"line": 18,
											"character": 15
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 18,
							"character": 12
						}
					]
				},
				{
					"id": 1366,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1367,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element."
							},
							"parameters": [
								{
									"id": 1368,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.contains",
								"id": 128
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 21,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.contains",
						"id": 128
					}
				},
				{
					"id": 1369,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1370,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array."
							},
							"parameters": [
								{
									"id": 1371,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.containsAll",
								"id": 131
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 25,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.containsAll",
						"id": 131
					}
				},
				{
					"id": 1358,
					"name": "difference",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1359,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by subtracting the specified set from this set."
							},
							"parameters": [
								{
									"id": 1360,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Set.difference",
								"id": 240
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 26,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Set.difference",
						"id": 240
					}
				},
				{
					"id": 1372,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1373,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality."
							},
							"parameters": [
								{
									"id": 1374,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 118,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.equals",
								"id": 134
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 29,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.equals",
						"id": 134
					}
				},
				{
					"id": 1361,
					"name": "exclusion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1362,
							"name": "exclusion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by exclusion of this set and the set specified."
							},
							"parameters": [
								{
									"id": 1363,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Set.exclusion",
								"id": 243
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 30,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Set.exclusion",
						"id": 243
					}
				},
				{
					"id": 1338,
					"name": "first",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1339,
							"name": "first",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the first (lowest) element currently in this set."
							},
							"type": {
								"type": "typeParameter",
								"name": "E"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 22,
							"character": 7
						}
					]
				},
				{
					"id": 1398,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1399,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection."
							},
							"parameters": [
								{
									"id": 1400,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1401,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1402,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1403,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1404,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1405,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 61,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterable.forEach",
								"id": 3
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.forEach",
								"id": 160
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 61,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterable.forEach",
						"id": 3
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.forEach",
						"id": 160
					}
				},
				{
					"id": 1340,
					"name": "headSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1341,
							"name": "headSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this set whose elements are strictly less than toElement."
							},
							"parameters": [
								{
									"id": 1342,
									"name": "toItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SortedSet",
								"id": 1324,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 26,
							"character": 9
						}
					]
				},
				{
					"id": 1355,
					"name": "intersection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1356,
							"name": "intersection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by intersection of this set and the set specified"
							},
							"parameters": [
								{
									"id": 1357,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Set.intersection",
								"id": 237
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 22,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Set.intersection",
						"id": 237
					}
				},
				{
					"id": 1375,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1376,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.isEmpty",
								"id": 137
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 33,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.isEmpty",
						"id": 137
					}
				},
				{
					"id": 1406,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1407,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return iterator for this object"
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterable.iterator",
								"id": 11
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 12,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterable.iterator",
						"id": 11
					}
				},
				{
					"id": 1343,
					"name": "last",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1344,
							"name": "last",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the last (highest) element currently in this set."
							},
							"type": {
								"type": "typeParameter",
								"name": "E"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 30,
							"character": 6
						}
					]
				},
				{
					"id": 1377,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1378,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present"
							},
							"parameters": [
								{
									"id": 1379,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.remove",
								"id": 139
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 37,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.remove",
						"id": 139
					}
				},
				{
					"id": 1380,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1381,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array."
							},
							"parameters": [
								{
									"id": 1382,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeAll",
								"id": 142
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 41,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeAll",
						"id": 142
					}
				},
				{
					"id": 1383,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1384,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function."
							},
							"parameters": [
								{
									"id": 1385,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1386,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1387,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1388,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1389,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1390,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 118,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 45,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeIf",
								"id": 145
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 45,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeIf",
						"id": 145
					}
				},
				{
					"id": 1391,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1392,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array."
							},
							"parameters": [
								{
									"id": 1393,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "E"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.retainAll",
								"id": 153
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 49,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.retainAll",
						"id": 153
					}
				},
				{
					"id": 1394,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1395,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.size",
								"id": 156
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 53,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.size",
						"id": 156
					}
				},
				{
					"id": 1345,
					"name": "subSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1346,
							"name": "subSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive."
							},
							"parameters": [
								{
									"id": 1347,
									"name": "fromItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1348,
									"name": "toItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SortedSet",
								"id": 1324,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 34,
							"character": 8
						}
					]
				},
				{
					"id": 1349,
					"name": "tailSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1350,
							"name": "tailSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this set whose elements are greater than or equal to fromElement."
							},
							"parameters": [
								{
									"id": 1351,
									"name": "fromItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SortedSet",
								"id": 1324,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 38,
							"character": 9
						}
					]
				},
				{
					"id": 1396,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1397,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "E"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.toArray",
								"id": 158
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 57,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.toArray",
						"id": 158
					}
				},
				{
					"id": 1352,
					"name": "union",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1353,
							"name": "union",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by union of this set and the set specified"
							},
							"parameters": [
								{
									"id": 1354,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 226,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Set.union",
								"id": 234
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 18,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Set.union",
						"id": 234
					}
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1326,
						1329,
						1364,
						1332,
						1366,
						1369,
						1358,
						1372,
						1361,
						1338,
						1398,
						1340,
						1355,
						1375,
						1406,
						1343,
						1377,
						1380,
						1383,
						1391,
						1394,
						1345,
						1349,
						1396,
						1352
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/sorted-set.ts",
					"line": 6,
					"character": 26
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Set",
					"id": 226,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractSortedSet",
					"id": 1408
				}
			]
		},
		{
			"id": 1506,
			"name": "Table",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 1507,
					"name": "R",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 1508,
					"name": "C",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 1509,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1510,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1511,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add a row to this table."
							},
							"parameters": [
								{
									"id": 1512,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								},
								{
									"id": 1513,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/table.ts",
							"line": 8,
							"character": 5
						}
					]
				},
				{
					"id": 1539,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1540,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an entire row from this table."
							},
							"parameters": [
								{
									"id": 1541,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/table.ts",
							"line": 36,
							"character": 8
						}
					]
				},
				{
					"id": 1542,
					"name": "deleteIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1543,
							"name": "deleteIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an entire row from this table based on filter function."
							},
							"parameters": [
								{
									"id": 1544,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1545,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1546,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1547,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "R"
															}
														},
														{
															"id": 1548,
															"name": "row",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "C"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/table.ts",
													"line": 40,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/table.ts",
							"line": 40,
							"character": 10
						}
					]
				},
				{
					"id": 1549,
					"name": "drop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1550,
							"name": "drop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an entire column from this table."
							},
							"parameters": [
								{
									"id": 1551,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/table.ts",
							"line": 44,
							"character": 6
						}
					]
				},
				{
					"id": 1526,
					"name": "extract",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1527,
							"name": "extract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an entire column of this table."
							},
							"parameters": [
								{
									"id": 1528,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"id": 910,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "R"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/table.ts",
							"line": 24,
							"character": 9
						}
					]
				},
				{
					"id": 1523,
					"name": "fetch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1524,
							"name": "fetch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an entire row of this table."
							},
							"parameters": [
								{
									"id": 1525,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Map",
										"id": 910,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/table.ts",
							"line": 20,
							"character": 7
						}
					]
				},
				{
					"id": 1519,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1520,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an entry from this table."
							},
							"parameters": [
								{
									"id": 1521,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								},
								{
									"id": 1522,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/table.ts",
							"line": 16,
							"character": 5
						}
					]
				},
				{
					"id": 1536,
					"name": "project",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1537,
							"name": "project",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a subset of columns in this table based on the filter function."
							},
							"parameters": [
								{
									"id": 1538,
									"name": "columns",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 226,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Table",
								"id": 1506,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "R"
									},
									{
										"type": "typeParameter",
										"name": "C"
									},
									{
										"type": "typeParameter",
										"name": "V"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/table.ts",
							"line": 32,
							"character": 9
						}
					]
				},
				{
					"id": 1552,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1553,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove an entry from this table."
							},
							"parameters": [
								{
									"id": 1554,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								},
								{
									"id": 1555,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/table.ts",
							"line": 48,
							"character": 8
						}
					]
				},
				{
					"id": 1529,
					"name": "select",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1530,
							"name": "select",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a subset of rows in this table based on the filter function."
							},
							"parameters": [
								{
									"id": 1531,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1532,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1533,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1534,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "R"
															}
														},
														{
															"id": 1535,
															"name": "row",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 910,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "C"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/table.ts",
													"line": 28,
													"character": 18
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Table",
								"id": 1506,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "R"
									},
									{
										"type": "typeParameter",
										"name": "C"
									},
									{
										"type": "typeParameter",
										"name": "V"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/table.ts",
							"line": 28,
							"character": 8
						}
					]
				},
				{
					"id": 1514,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1515,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the value at the specified position in this table with the specified value."
							},
							"parameters": [
								{
									"id": 1516,
									"name": "rowKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "R"
									}
								},
								{
									"id": 1517,
									"name": "columnKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C"
									}
								},
								{
									"id": 1518,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/table.ts",
							"line": 12,
							"character": 5
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1510,
						1539,
						1542,
						1549,
						1526,
						1523,
						1519,
						1536,
						1552,
						1529,
						1514
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/table.ts",
					"line": 4,
					"character": 22
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractTable",
					"id": 1693
				},
				{
					"type": "reference",
					"name": "DataTable",
					"id": 2613
				},
				{
					"type": "reference",
					"name": "EntryTable",
					"id": 2556
				}
			]
		},
		{
			"id": 651,
			"name": "Tree",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A tree is a data structure made up of nodes or vertices and edges without having any cycle."
			},
			"typeParameter": [
				{
					"id": 652,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 656,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 657,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an item from the tree."
							},
							"parameters": [
								{
									"id": 658,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/tree.ts",
							"line": 12,
							"character": 8
						}
					]
				},
				{
					"id": 659,
					"name": "height",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 660,
							"name": "height",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the height of the tree."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/tree.ts",
							"line": 16,
							"character": 8
						}
					]
				},
				{
					"id": 653,
					"name": "insert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 654,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert a new item to the tree."
							},
							"parameters": [
								{
									"id": 655,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/tree.ts",
							"line": 8,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						656,
						659,
						653
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/tree.ts",
					"line": 4,
					"character": 21
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "BinaryTree",
					"id": 753
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				881,
				170,
				1163,
				84,
				769,
				1060,
				1264,
				290,
				1408,
				1693,
				1746,
				1570,
				402,
				467,
				445,
				2683,
				869,
				2613,
				1913,
				2239,
				1012,
				2556,
				1964,
				13,
				36,
				489,
				596,
				564,
				2467,
				628,
				2762,
				2844,
				2362,
				1893,
				2111,
				98,
				1006
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				753,
				398,
				118,
				1020,
				74,
				2861,
				1,
				661,
				910,
				905,
				358,
				390,
				382,
				1208,
				1556,
				226,
				1324,
				1506,
				651
			]
		}
	]
}