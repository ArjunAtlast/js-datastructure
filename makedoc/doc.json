{
	"id": 0,
	"name": "@arjunatlast/jsds",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 404,
			"name": "AbstractBinaryTree",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Abstract Implementation of binary tree. (Note: This class cannot be used to initialize objects.)"
			},
			"typeParameter": [
				{
					"id": 405,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 407,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 408,
							"name": "new AbstractBinaryTree",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 409,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractBinaryTree",
								"id": 404
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 26,
							"character": 41
						}
					]
				},
				{
					"id": 406,
					"name": "_root",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 26,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 392,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							{
								"type": "instrinct",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 413,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 414,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an item from the binary tree."
							},
							"parameters": [
								{
									"id": 415,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "BinaryTree.delete",
								"id": 230
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 40,
							"character": 17
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.delete",
						"id": 229
					}
				},
				{
					"id": 416,
					"name": "inorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 417,
							"name": "inorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after inorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.inorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 418,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 134,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 48,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.inorder",
						"id": 232
					}
				},
				{
					"id": 410,
					"name": "insert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 411,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert a new item to the binary tree."
							},
							"parameters": [
								{
									"id": 412,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "BinaryTree.insert",
								"id": 227
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 35,
							"character": 17
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.insert",
						"id": 226
					}
				},
				{
					"id": 422,
					"name": "postorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 423,
							"name": "postorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after postorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.postorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 424,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 134,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 78,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.postorder",
						"id": 236
					}
				},
				{
					"id": 419,
					"name": "preorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 420,
							"name": "preorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after preorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.preorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 421,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 134,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 63,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.preorder",
						"id": 234
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						407
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						406
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						413,
						416,
						410,
						422,
						419
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-binary-tree.ts",
					"line": 25,
					"character": 40
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "BinarySearchTree",
					"id": 1899
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "BinaryTree",
					"id": 224,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 238,
			"name": "AbstractCollection",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An abstract implementation of Collection interface"
			},
			"typeParameter": [
				{
					"id": 239,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 241,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 242,
							"name": "new AbstractCollection",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 243,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractCollection",
								"id": 238
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 28
						}
					]
				},
				{
					"id": 240,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "typeParameter",
						"isArray": true,
						"name": "T"
					},
					"defaultValue": " []"
				},
				{
					"id": 244,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 245,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add an item to this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.add(5);\n  //now collection contains [1,2,3,4,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 246,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.add",
								"id": 85
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 21,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.add",
						"id": 84
					}
				},
				{
					"id": 247,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 248,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all items of an array to this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4,5]\n  collection.addAll([6,7]);\n  //now collection contains [1,2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 249,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.addAll",
								"id": 88
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 32,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.addAll",
						"id": 87
					}
				},
				{
					"id": 250,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 251,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.clear",
								"id": 91
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.clear",
						"id": 90
					}
				},
				{
					"id": 252,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 253,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 254,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.contains",
								"id": 93
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.contains",
						"id": 92
					}
				},
				{
					"id": 255,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 256,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 257,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.containsAll",
								"id": 96
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.containsAll",
						"id": 95
					}
				},
				{
					"id": 258,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 259,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 260,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.equals",
								"id": 99
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.equals",
						"id": 98
					}
				},
				{
					"id": 284,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 285,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 286,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 287,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 288,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 289,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														},
														{
															"id": 290,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 291,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.forEach",
						"id": 124
					}
				},
				{
					"id": 261,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 262,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.isEmpty",
								"id": 102
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.isEmpty",
						"id": 101
					}
				},
				{
					"id": 292,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 293,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.iterator",
								"id": 133
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.iterator",
						"id": 132
					}
				},
				{
					"id": 263,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 264,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 265,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.remove",
								"id": 104
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.remove",
						"id": 103
					}
				},
				{
					"id": 266,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 267,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 268,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.removeAll",
								"id": 107
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.removeAll",
						"id": 106
					}
				},
				{
					"id": 269,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 270,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 271,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 272,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 273,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 274,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														},
														{
															"id": 275,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 276,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.removeIf",
						"id": 109
					}
				},
				{
					"id": 277,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 278,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 279,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.retainAll",
								"id": 118
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.retainAll",
						"id": 117
					}
				},
				{
					"id": 280,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 281,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.size",
								"id": 121
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.size",
						"id": 120
					}
				},
				{
					"id": 282,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 283,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "T"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Collection.toArray",
								"id": 123
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Collection.toArray",
						"id": 122
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						241
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						240
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						244,
						247,
						250,
						252,
						255,
						258,
						284,
						261,
						292,
						263,
						266,
						269,
						277,
						280,
						282
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-collection.ts",
					"line": 7,
					"character": 31
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "AbstractList",
					"id": 294
				},
				{
					"type": "reference",
					"name": "AbstractSet",
					"id": 641
				},
				{
					"type": "reference",
					"name": "AbstractQueue",
					"id": 910
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "T"
						}
					]
				}
			]
		},
		{
			"id": 812,
			"name": "AbstractGraph",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Abstract implementation of graph interface"
			},
			"typeParameter": [
				{
					"id": 813,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 817,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 818,
							"name": "new AbstractGraph",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "AbstractGraph",
								"id": 812
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 14,
							"character": 50
						}
					]
				},
				{
					"id": 816,
					"name": "_adjList",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 14,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Map",
						"id": 494,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Vertex",
								"id": 590,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							{
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Edge",
										"id": 596,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							}
						]
					}
				},
				{
					"id": 815,
					"name": "_edges",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 13,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Set",
						"id": 425,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Edge",
								"id": 596,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						]
					}
				},
				{
					"id": 814,
					"name": "_vertices",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 12,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"name": "Set",
						"id": 425,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Vertex",
								"id": 590,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						]
					}
				},
				{
					"id": 819,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 820,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add a new vertex with the specified label to this graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.add(25);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 821,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.add",
								"id": 607
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 28,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.add",
						"id": 606
					}
				},
				{
					"id": 822,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 823,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add new vertices with the labels present in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.addAll([25,22,11,43]);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 824,
									"name": "labels",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.addAll",
								"id": 610
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 38,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.addAll",
						"id": 609
					}
				},
				{
					"id": 841,
					"name": "addEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 842,
							"name": "addEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add the specified edge to the graph. The start and end vertices are added automatically to the graph if not present.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, e:Edge<number>\n  g.addEdge(e);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 843,
									"name": "edge",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Edge",
										"id": 596,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.addEdge",
								"id": 629
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 117,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.addEdge",
						"id": 628
					}
				},
				{
					"id": 825,
					"name": "addVertex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 826,
							"name": "addVertex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add the specified vertex to the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, v:Vertex<number>\n  g.addVertex(v);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 827,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 590,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.addVertex",
								"id": 613
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 48,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.addVertex",
						"id": 612
					}
				},
				{
					"id": 828,
					"name": "addVertices",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 829,
							"name": "addVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all vertices in the specified array to the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, a,b,c,d:Vertex<number>\n  g.addVertices([a,b,c,d]);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 830,
									"name": "vertices",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"isArray": true,
										"name": "Vertex",
										"id": 590,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.addVertices",
								"id": 616
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 58,
							"character": 13
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.addVertices",
						"id": 615
					}
				},
				{
					"id": 851,
					"name": "adjacentEdges",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 852,
							"name": "adjacentEdges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of edges starting from specified vertex.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, v:Vertex<number>\n  g.ajacentEdges(v);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 853,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 590,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Set",
										"id": 425,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Edge",
												"id": 596,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											}
										]
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.adjacentEdges",
								"id": 639
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 160,
							"character": 15
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.adjacentEdges",
						"id": 638
					}
				},
				{
					"id": 837,
					"name": "createEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 838,
							"name": "createEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create vertices from the given labels and an edge connecting them and add it to the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.createEdge(25,26);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 839,
									"name": "startLabel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 840,
									"name": "endLabel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.createEdge",
								"id": 625
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 105,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.createEdge",
						"id": 624
					}
				},
				{
					"id": 849,
					"name": "edgeSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 850,
							"name": "edgeSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of edges present in the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.edgeSet();\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Edge",
										"id": 596,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.edgeSet",
								"id": 637
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 151,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.edgeSet",
						"id": 636
					}
				},
				{
					"id": 831,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 832,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove a single vertex with the specified label from the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.remove(25);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 833,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.remove",
								"id": 619
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 72,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.remove",
						"id": 618
					}
				},
				{
					"id": 844,
					"name": "removeEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 845,
							"name": "removeEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove the specified edge from the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, e:Edge<number>\n  g.removeEdge(e);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 846,
									"name": "edge",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Edge",
										"id": 596,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.removeEdge",
								"id": 632
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 128,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.removeEdge",
						"id": 631
					}
				},
				{
					"id": 834,
					"name": "removeVertex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 835,
							"name": "removeVertex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove the specified vertex from the graph.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>, v:Vertex<number>\n  g.removeVertex(v);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 836,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 590,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.removeVertex",
								"id": 622
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 89,
							"character": 14
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.removeVertex",
						"id": 621
					}
				},
				{
					"id": 847,
					"name": "vertexSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 848,
							"name": "vertexSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of vertices present in the graph.(a copy of the set is returned).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //g:Graph<number>\n  g.vertexSet();\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Vertex",
										"id": 590,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Graph.vertexSet",
								"id": 635
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-graph.ts",
							"line": 142,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Graph.vertexSet",
						"id": 634
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						817
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						816,
						815,
						814
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						819,
						822,
						841,
						825,
						828,
						851,
						837,
						849,
						831,
						844,
						834,
						847
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-graph.ts",
					"line": 11,
					"character": 26
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Graph",
					"id": 604,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 294,
			"name": "AbstractList",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An abstract implementation of List interface"
			},
			"typeParameter": [
				{
					"id": 295,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 296,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 297,
							"name": "new AbstractList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 298,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractList",
								"id": 294
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.__constructor",
								"id": 241
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 8,
							"character": 78
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.__constructor",
						"id": 241
					}
				},
				{
					"id": 347,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "typeParameter",
						"isArray": true,
						"name": "E"
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 240
					}
				},
				{
					"id": 299,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 300,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends the specified element to the end of this list"
							},
							"parameters": [
								{
									"id": 301,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 244
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 137
							}
						},
						{
							"id": 302,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts the specified element at the specified position in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  list.add(4); //[1,2,3,4]\n  list.add(2.5,2); //[1,2,2.5,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 303,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 304,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 244
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 139
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 17,
							"character": 5
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 25,
							"character": 5
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 26,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.add",
						"id": 244
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.add",
						"id": 136
					}
				},
				{
					"id": 305,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 306,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends all of the elements in the specified array to the end of this list"
							},
							"parameters": [
								{
									"id": 307,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 247
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 143
							}
						},
						{
							"id": 308,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts all of the elements in the specified array into this list at the specified position.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  list.addAll([4,5]); //[1,2,3,4,5]\n  list.addAll([2.1,2.2,2.3], 2); //[1,2,2.1,2.2,2.3,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 309,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								},
								{
									"id": 310,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 247
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 145
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 38,
							"character": 8
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 46,
							"character": 8
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 47,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.addAll",
						"id": 247
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.addAll",
						"id": 142
					}
				},
				{
					"id": 348,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 349,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 250
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.clear",
								"id": 181
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 250
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.clear",
						"id": 180
					}
				},
				{
					"id": 350,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 351,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 352,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 252
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.contains",
								"id": 183
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 252
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.contains",
						"id": 182
					}
				},
				{
					"id": 353,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 354,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 355,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 255
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.containsAll",
								"id": 186
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 255
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.containsAll",
						"id": 185
					}
				},
				{
					"id": 356,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 357,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 358,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 258
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.equals",
								"id": 189
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 258
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.equals",
						"id": 188
					}
				},
				{
					"id": 382,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 383,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 384,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 385,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 386,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 387,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 388,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 389,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 284
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 284
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.forEach",
						"id": 214
					}
				},
				{
					"id": 311,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 312,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an item from the list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.get(2));\n  //Output: 3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 313,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.get",
								"id": 149
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 63,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.get",
						"id": 148
					}
				},
				{
					"id": 314,
					"name": "indexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 315,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,2,4]\n  console.log(list.indexOf(2));\n  //Output: 1\n"
									}
								]
							},
							"parameters": [
								{
									"id": 316,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.indexOf",
								"id": 152
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 74,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.indexOf",
						"id": 151
					}
				},
				{
					"id": 359,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 360,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 261
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.isEmpty",
								"id": 192
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 261
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.isEmpty",
						"id": 191
					}
				},
				{
					"id": 390,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 391,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 292
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.iterator",
								"id": 223
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 292
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.iterator",
						"id": 222
					}
				},
				{
					"id": 317,
					"name": "lastIndexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 318,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of last occurrence of the element.\n  //list contains [1,2,3,2,4]\n  console.log(list.lastIndexOf(2));\n  //Output: 3"
							},
							"parameters": [
								{
									"id": 319,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.lastIndexOf",
								"id": 155
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 84,
							"character": 13
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.lastIndexOf",
						"id": 154
					}
				},
				{
					"id": 320,
					"name": "listIterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 321,
							"name": "listIterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list iterator over the elements in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var listIterator = list.listIterator(); //starts at index 0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 322,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.listIterator",
								"id": 158
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 93,
							"character": 14
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.listIterator",
						"id": 157
					}
				},
				{
					"id": 361,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 362,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 363,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 263
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.remove",
								"id": 194
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 263
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.remove",
						"id": 193
					}
				},
				{
					"id": 364,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 365,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 366,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 266
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAll",
								"id": 197
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 266
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAll",
						"id": 196
					}
				},
				{
					"id": 323,
					"name": "removeAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 324,
							"name": "removeAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the element at the specified position in this list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.removeAt(1)); //[1,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 325,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAt",
								"id": 161
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 104,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAt",
						"id": 160
					}
				},
				{
					"id": 367,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 368,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 369,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 370,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 371,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 372,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 373,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 374,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 269
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 269
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeIf",
						"id": 199
					}
				},
				{
					"id": 326,
					"name": "removeRange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 327,
							"name": "removeRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5,6]\n  console.log(list.removeRange(1,4)); //[1,5,6]\n  //Output: [2,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 328,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 329,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 115,
							"character": 13
						}
					]
				},
				{
					"id": 375,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 376,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 377,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 277
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.retainAll",
								"id": 208
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 277
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.retainAll",
						"id": 207
					}
				},
				{
					"id": 345,
					"name": "reverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 346,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverse the list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5]\n  list.reverse() //now list contains [5,4,3,2,1]\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.reverse",
								"id": 179
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 161,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.reverse",
						"id": 178
					}
				},
				{
					"id": 330,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 331,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the element at the specified position in this list with the specified element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.set(1,2.5)); //[1,2.5,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 332,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 333,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.set",
								"id": 164
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 126,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.set",
						"id": 163
					}
				},
				{
					"id": 378,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 379,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 280
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.size",
								"id": 211
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 280
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.size",
						"id": 210
					}
				},
				{
					"id": 334,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 335,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts this list according to the compareFn.\ncompareFn is a function which should return a number value (-ve, zero, or +ve).\nx is considered smaller than y if the compareFn(x,y) is negetive",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.sort(function(x,y) {\n    return x-y;\n  }); // [1, 2, 3, 6, 7, 8, 9, 11]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 336,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 337,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 338,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 339,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 340,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-list.ts",
													"line": 141,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 141,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.sort",
						"id": 167
					}
				},
				{
					"id": 341,
					"name": "subList",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 342,
							"name": "subList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.subList(2,7); // returns a list containing [6, 2, 7, 3, 9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 343,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 344,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractList",
								"id": 294,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.subList",
								"id": 175
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 151,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "List.subList",
						"id": 174
					}
				},
				{
					"id": 380,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 381,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 282
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.toArray",
								"id": 213
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 282
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.toArray",
						"id": 212
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						296
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						347
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						299,
						305,
						348,
						350,
						353,
						356,
						382,
						311,
						314,
						359,
						390,
						317,
						320,
						361,
						364,
						323,
						367,
						326,
						375,
						345,
						330,
						378,
						334,
						341,
						380
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-list.ts",
					"line": 8,
					"character": 25
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractCollection",
					"id": 238,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "ArrayList",
					"id": 1170
				},
				{
					"type": "reference",
					"name": "SwappableList",
					"id": 1428
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "List",
					"id": 134,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 709,
			"name": "AbstractMap",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 710,
					"name": "K",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 711,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 714,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 715,
							"name": "new AbstractMap",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 716,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "reference",
										"isArray": true,
										"name": "MapEntry",
										"id": 489,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractMap",
								"id": 709
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 7,
							"character": 34
						}
					]
				},
				{
					"id": 713,
					"name": "_keys",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 7,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractSet",
						"id": 641,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "K"
							}
						]
					}
				},
				{
					"id": 712,
					"name": "_values",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 6,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractList",
						"id": 294,
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							}
						]
					}
				},
				{
					"id": 717,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 718,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the mappings from this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//map: [{\"1\":1},{\"2\":2},{\"3\":3}]\nmap.clear();\n//now : []\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.clear",
								"id": 498
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 21,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.clear",
						"id": 497
					}
				},
				{
					"id": 719,
					"name": "compute",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 720,
							"name": "compute",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to 12\n  map.compute(k1, (key,value,map)=>(value+11)); //returns 12\n  //now the value changes to 12+11 -> 23\n"
									}
								]
							},
							"parameters": [
								{
									"id": 721,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 722,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 723,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 724,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 725,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 726,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	},
																	{
																		"type": "instrinct",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 727,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AbstractMap",
																"id": 709,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "V"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 32,
													"character": 29
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 32,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.compute",
						"id": 499
					}
				},
				{
					"id": 728,
					"name": "computeIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 729,
							"name": "computeIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to 12\n  map.computeIfAbsent(k1, (key,value,map)=>(23)); //returns 12\n  //value does not change\n"
									}
								]
							},
							"parameters": [
								{
									"id": 730,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 731,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 732,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 733,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 734,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 735,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	},
																	{
																		"type": "instrinct",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 736,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AbstractMap",
																"id": 709,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "V"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 46,
													"character": 37
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 46,
							"character": 16
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.computeIfAbsent",
						"id": 508
					}
				},
				{
					"id": 737,
					"name": "computeIfPresent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 738,
							"name": "computeIfPresent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to null\n  map.computeIfAbsent(k1, (key,value,map)=>(value+11)); //returns null\n  //value does not change\n"
									}
								]
							},
							"parameters": [
								{
									"id": 739,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 740,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 741,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 742,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 743,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 744,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 745,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 494,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "V"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 62,
													"character": 38
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 62,
							"character": 17
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.computeIfPresent",
						"id": 517
					}
				},
				{
					"id": 746,
					"name": "containsKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 747,
							"name": "containsKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains a mapping for the specified key.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.conainsKey(k1); //returns true\n  map.containsKey(k5); //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 748,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.containsKey",
								"id": 527
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 78,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.containsKey",
						"id": 526
					}
				},
				{
					"id": 749,
					"name": "containsValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 750,
							"name": "containsValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map maps one or more keys to the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.conainsValue(1); //returns true\n  map.containsValue(5); //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 751,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.containsValue",
								"id": 530
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 89,
							"character": 14
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.containsValue",
						"id": 529
					}
				},
				{
					"id": 752,
					"name": "entrySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 753,
							"name": "entrySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the mappings contained in this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.entrySet(); //returns Set [{key:k1, value:1},{key:k2, value:2}]\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "reference",
										"name": "MapEntry",
										"id": 489,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.entrySet",
								"id": 533
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 99,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.entrySet",
						"id": 532
					}
				},
				{
					"id": 754,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 755,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified map with this map for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map1 : [{k1:1},{k2:2},{k3:null}]\n  //map2 : [{k1:1},{k3:4}]\n  map1.equals(map2) //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 756,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 494,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.equals",
								"id": 535
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 116,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.equals",
						"id": 534
					}
				},
				{
					"id": 757,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 758,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.forEach((key, value, map)=>{\n     console.log(key+\"->\"+value+\",\");\n  });\n  //Output: one->1,two->2,three->3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 759,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 760,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 761,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 762,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 763,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	}
																]
															}
														},
														{
															"id": 764,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AbstractMap",
																"id": 709,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 138,
													"character": 16
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 138,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.forEach",
						"id": 537
					}
				},
				{
					"id": 765,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 766,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped. undefined if there is no mapping.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.get(k1); //returns 1\n  map.get(k3); //returns null\n  map.get(k4); //returns undefined\n"
									}
								]
							},
							"parameters": [
								{
									"id": 767,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.get",
								"id": 546
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 154,
							"character": 4
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.get",
						"id": 545
					}
				},
				{
					"id": 768,
					"name": "getOrDefault",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 769,
							"name": "getOrDefault",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key or if key is mapped to null.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.getOrDefault(k1,5); //returns 1\n  map.getOrDefault(k3,12); //returns 12\n  map.getOrDefault(k4,16); //returns 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 770,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 771,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "V"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.getOrDefault",
								"id": 549
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 168,
							"character": 13
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.getOrDefault",
						"id": 548
					}
				},
				{
					"id": 772,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 773,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains no key-value mappings.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.isEmpty(); //false\n  //map : [{k1:null},{k2:null},{k3:null}]\n  map.isEmpty(); //false\n  //map : []\n  map.isEmpty(); //true\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.isEmpty",
								"id": 553
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 182,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.isEmpty",
						"id": 552
					}
				},
				{
					"id": 774,
					"name": "isNull",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 775,
							"name": "isNull",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains mappings to only null values or if  the map is empty.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.isNull(); //false\n  //map : [{k1:null},{k2:null},{k3:null}]\n  map.isNull(); //true\n  //map : []\n  map.isNull(); //true\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 196,
							"character": 8
						}
					]
				},
				{
					"id": 776,
					"name": "keySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 777,
							"name": "keySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the keys contained in this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.keySet(); //[\"one\",\"two\",\"three\"]\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "K"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.keySet",
								"id": 555
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 206,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.keySet",
						"id": 554
					}
				},
				{
					"id": 778,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 779,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Associates the specified value with the specified key in this map.Returns the old value associated with the key or  undefined.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//map : [{\"one\":1},{\"two\":2},{\"three\":3}]\nmap.put(\"one\",22); //return 1\n//now map : [{\"one\":22},{\"two\":2},{\"three\":3}]\nmap.put(\"four\",4);//return undefined\n//now map : [{\"one\":22},{\"two\":2},{\"three\":3},{\"four\":4}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 780,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 781,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 219,
							"character": 4
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.put",
						"id": 556
					}
				},
				{
					"id": 782,
					"name": "putAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 783,
							"name": "putAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies all of the mappings from the specified map to this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map1: [{k1:v1},{k2:v2},{k3:v3}], map2: [{k2:v4},{k4:v6},{k6:v8}]\n  map1.putAll(map2);\n  //now map1: [{k1:v1},{k2:v4},{k3:v3},{k4:v6},{k6:v8}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 784,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 494,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.putAll",
								"id": 561
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 239,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.putAll",
						"id": 560
					}
				},
				{
					"id": 785,
					"name": "putIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 786,
							"name": "putIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns undefined, else returns the current value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.putIfAbsent(\"four\",4); //return undefined (adds {\"four\":4} to the map)\n  map.putIfAbsent(\"one\",23); //return 1 (map unchanged)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 787,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 788,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.putIfAbsent",
								"id": 564
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 251,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.putIfAbsent",
						"id": 563
					}
				},
				{
					"id": 789,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 790,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the mapping for a key from this map if it is present.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.remove(\"one\"); //return 1\n  //now map : [{\"two\":2},{\"three\":3}]\n  map.remove(\"four\"); //return undefined (map unchanged)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 791,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.remove",
								"id": 568
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 265,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.remove",
						"id": 567
					}
				},
				{
					"id": 792,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 793,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.removeIf(\"one\", 1); //return true\n  //now map : [{\"two\":2},{\"three\":3}]\n  map.removeIf(\"two\",5); //return false (map unchanged)\n  map.removeIf(\"four\",4); //return false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 794,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 795,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.removeIf",
								"id": 571
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 283,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.removeIf",
						"id": 570
					}
				},
				{
					"id": 796,
					"name": "replace",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 797,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replace all entries with specified value with the new value. Returns true if map was changed.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.replace(5,2) //returns true;\n  //now map : [{k1:1},{k2:2},{k3:3},{k4:2},{k5:1}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 798,
									"name": "oldValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								},
								{
									"id": 799,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 295,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.replace",
						"id": 574
					}
				},
				{
					"id": 800,
					"name": "replaceAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 801,
							"name": "replaceAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.replaceAll((k,v,m)=>(v*2)); //replace with its double\n  //map : [{k1:2},{k2:10},{k3:6},{k4:10},{k5:2}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 802,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 803,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 804,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 805,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 806,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	}
																]
															}
														},
														{
															"id": 807,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AbstractMap",
																"id": 709,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "V"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 312,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 312,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.replaceAll",
						"id": 578
					}
				},
				{
					"id": 808,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 809,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of key-value mappings in this map.(key->null mappings are counted)",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.size(); //return 5\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.size",
								"id": 587
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 324,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.size",
						"id": 586
					}
				},
				{
					"id": 810,
					"name": "values",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 811,
							"name": "values",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a List view of the values contained in this map.\n//map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\nmap.values(); //return list : [1,5,3,5,1]"
							},
							"type": {
								"type": "reference",
								"name": "AbstractList",
								"id": 294,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.values",
								"id": 589
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 333,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Map.values",
						"id": 588
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						714
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						713,
						712
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						717,
						719,
						728,
						737,
						746,
						749,
						752,
						754,
						757,
						765,
						768,
						772,
						774,
						776,
						778,
						782,
						785,
						789,
						792,
						796,
						800,
						808,
						810
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-map.ts",
					"line": 5,
					"character": 24
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "ArrayMap",
					"id": 1554
				},
				{
					"type": "reference",
					"name": "Dictionary",
					"id": 1669
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Map",
					"id": 494,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "K"
						},
						{
							"type": "typeParameter",
							"name": "V"
						}
					]
				}
			]
		},
		{
			"id": 910,
			"name": "AbstractQueue",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Abstract implementation of Queue interface"
			},
			"typeParameter": [
				{
					"id": 911,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 917,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 918,
							"name": "new AbstractQueue",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 919,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractQueue",
								"id": 910
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.__constructor",
								"id": 241
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 28
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.__constructor",
						"id": 241
					}
				},
				{
					"id": 916,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "typeParameter",
						"isArray": true,
						"name": "E"
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 240
					}
				},
				{
					"id": 920,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 921,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add an item to this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.add(5);\n  //now collection contains [1,2,3,4,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 922,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 244
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.add",
								"id": 857
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 21,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.add",
						"id": 244
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.add",
						"id": 856
					}
				},
				{
					"id": 923,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 924,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all items of an array to this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4,5]\n  collection.addAll([6,7]);\n  //now collection contains [1,2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 925,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 247
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.addAll",
								"id": 864
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 32,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.addAll",
						"id": 247
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.addAll",
						"id": 863
					}
				},
				{
					"id": 926,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 927,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 250
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.clear",
								"id": 867
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 250
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.clear",
						"id": 866
					}
				},
				{
					"id": 928,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 929,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 930,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 252
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.contains",
								"id": 869
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 252
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.contains",
						"id": 868
					}
				},
				{
					"id": 931,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 932,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 933,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 255
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.containsAll",
								"id": 872
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 255
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.containsAll",
						"id": 871
					}
				},
				{
					"id": 912,
					"name": "element",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 913,
							"name": "element",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves, but does not remove, the head of this queue",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue has elements [1,2,3,4]\n  console.log(queue.element());\n  //Output: 1\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.element",
								"id": 860
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-queue.ts",
							"line": 15,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Queue.element",
						"id": 859
					}
				},
				{
					"id": 934,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 935,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 936,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 258
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.equals",
								"id": 875
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 258
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.equals",
						"id": 874
					}
				},
				{
					"id": 960,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 961,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 962,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 963,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 964,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 965,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 966,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 967,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 284
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 284
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.forEach",
						"id": 900
					}
				},
				{
					"id": 937,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 938,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 261
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.isEmpty",
								"id": 878
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 261
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.isEmpty",
						"id": 877
					}
				},
				{
					"id": 968,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 969,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 292
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.iterator",
								"id": 909
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 292
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.iterator",
						"id": 908
					}
				},
				{
					"id": 914,
					"name": "poll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 915,
							"name": "poll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves and removes the head of this queue.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue has elements [1,2,3,4]\n  console.log(queue.element());\n  //Output: 1 and queue now has elements [2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.poll",
								"id": 862
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-queue.ts",
							"line": 26,
							"character": 5
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Queue.poll",
						"id": 861
					}
				},
				{
					"id": 939,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 940,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 941,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 263
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.remove",
								"id": 880
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 263
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.remove",
						"id": 879
					}
				},
				{
					"id": 942,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 943,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 944,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 266
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.removeAll",
								"id": 883
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 266
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.removeAll",
						"id": 882
					}
				},
				{
					"id": 945,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 946,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 947,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 948,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 949,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 950,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 951,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 952,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 269
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 269
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.removeIf",
						"id": 885
					}
				},
				{
					"id": 953,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 954,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 955,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 277
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.retainAll",
								"id": 894
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 277
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.retainAll",
						"id": 893
					}
				},
				{
					"id": 956,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 957,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 280
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.size",
								"id": 897
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 280
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.size",
						"id": 896
					}
				},
				{
					"id": 958,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 959,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 282
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.toArray",
								"id": 899
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 282
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.toArray",
						"id": 898
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						917
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						916
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						920,
						923,
						926,
						928,
						931,
						912,
						934,
						960,
						937,
						968,
						914,
						939,
						942,
						945,
						953,
						956,
						958
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-queue.ts",
					"line": 7,
					"character": 26
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractCollection",
					"id": 238,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "PriorityQueue",
					"id": 1792
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Queue",
					"id": 854,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 641,
			"name": "AbstractSet",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Abstract implementation of Set interface."
			},
			"typeParameter": [
				{
					"id": 642,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 643,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 644,
							"name": "new AbstractSet",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 645,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.__constructor",
								"id": 241
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 7,
							"character": 77
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.__constructor",
						"id": 241
					}
				},
				{
					"id": 664,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "typeParameter",
						"isArray": true,
						"name": "E"
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 240
					}
				},
				{
					"id": 646,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 647,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds the specified element to this set if it is not already present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set contains [1,2,3,4,5]\n  set.add(6); //returns true and now set contains [1,2,3,4,5,6]\n  set.add(5); //returns false since 5 is already in the set.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 648,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 244
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.add",
								"id": 428
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 20,
							"character": 4
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.add",
						"id": 244
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.add",
						"id": 427
					}
				},
				{
					"id": 649,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 650,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds all of the elements in the specified collection to this set if they're not already present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set contains [1,2,3,4,5]\n  set.add([4,5,6]); //returns true and now set contains [1,2,3,4,5,6]\n  set.add([5,6]); //returns false since 5 and 6 are already in the set.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 651,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 247
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.addAll",
								"id": 431
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 32,
							"character": 7
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.addAll",
						"id": 247
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.addAll",
						"id": 430
					}
				},
				{
					"id": 665,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 666,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 250
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.clear",
								"id": 446
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 250
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.clear",
						"id": 445
					}
				},
				{
					"id": 667,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 668,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 669,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 252
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.contains",
								"id": 448
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 252
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.contains",
						"id": 447
					}
				},
				{
					"id": 670,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 671,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 672,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 255
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.containsAll",
								"id": 451
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 255
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.containsAll",
						"id": 450
					}
				},
				{
					"id": 658,
					"name": "difference",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 659,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by subtracting the specified set from this set.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4,5] and set2 : [4,5,6,7]\n  set1.difference(set2); //returns a new set : [1,2,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 660,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AbstractSet",
										"id": 641,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 66,
							"character": 11
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Set.difference",
						"id": 439
					}
				},
				{
					"id": 673,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 674,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 675,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 258
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.equals",
								"id": 454
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 258
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.equals",
						"id": 453
					}
				},
				{
					"id": 661,
					"name": "exclusion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 662,
							"name": "exclusion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by exclusion of this set and the set specified.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4,5] and set2 : [4,5,6,7]\n  set1.difference(set2); //returns a new set : [1,2,3,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 663,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AbstractSet",
										"id": 641,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 77,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Set.exclusion",
						"id": 442
					}
				},
				{
					"id": 699,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 700,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 701,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 702,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 703,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 704,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 705,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 706,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 284
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 284
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.forEach",
						"id": 479
					}
				},
				{
					"id": 655,
					"name": "intersection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 656,
							"name": "intersection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by intersection of this set and the set specified",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4,5] and set2 : [4,5,6,7]\n  set1.intersection(set2); //returns a new set : [4,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 657,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AbstractSet",
										"id": 641,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 55,
							"character": 13
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Set.intersection",
						"id": 436
					}
				},
				{
					"id": 676,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 677,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 261
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.isEmpty",
								"id": 457
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 261
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.isEmpty",
						"id": 456
					}
				},
				{
					"id": 707,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 708,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 292
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.iterator",
								"id": 488
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 292
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.iterator",
						"id": 487
					}
				},
				{
					"id": 678,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 679,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 680,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 263
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.remove",
								"id": 459
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 263
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.remove",
						"id": 458
					}
				},
				{
					"id": 681,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 682,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 683,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 266
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.removeAll",
								"id": 462
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 266
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.removeAll",
						"id": 461
					}
				},
				{
					"id": 684,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 685,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 686,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 687,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 688,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 689,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 690,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 691,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 269
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 269
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.removeIf",
						"id": 464
					}
				},
				{
					"id": 692,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 693,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 694,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 277
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.retainAll",
								"id": 473
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 277
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.retainAll",
						"id": 472
					}
				},
				{
					"id": 695,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 696,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 280
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.size",
								"id": 476
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 280
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.size",
						"id": 475
					}
				},
				{
					"id": 697,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 698,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 282
							},
							"implementationOf": {
								"type": "reference",
								"name": "Set.toArray",
								"id": 478
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 282
					},
					"implementationOf": {
						"type": "reference",
						"name": "Set.toArray",
						"id": 477
					}
				},
				{
					"id": 652,
					"name": "union",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 653,
							"name": "union",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by union of this set and the set specified",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4] and set2 : [4,5,6,7]\n  set1.union(set2); //returns a new set : [1,2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 654,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AbstractSet",
										"id": 641,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 44,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Set.union",
						"id": 433
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						643
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						664
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						646,
						649,
						665,
						667,
						670,
						658,
						673,
						661,
						699,
						655,
						676,
						707,
						678,
						681,
						684,
						692,
						695,
						697,
						652
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-set.ts",
					"line": 7,
					"character": 24
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractCollection",
					"id": 238,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "AbstractSortedSet",
					"id": 1054
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Set",
					"id": 425,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 1054,
			"name": "AbstractSortedSet",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 1055,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1061,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1062,
							"name": "new AbstractSortedSet",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1063,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1064,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1065,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1066,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1067,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-sorted-set.ts",
													"line": 8,
													"character": 24
												}
											]
										}
									}
								},
								{
									"id": 1068,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSortedSet",
								"id": 1054
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractSet.__constructor",
								"id": 643
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 6,
							"character": 42
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractSet.__constructor",
						"id": 643
					}
				},
				{
					"id": 1056,
					"name": "_comparator",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 6,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1057,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1058,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1059,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										},
										{
											"id": 1060,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "ds/abstract/abstract-sorted-set.ts",
									"line": 6,
									"character": 24
								}
							]
						}
					}
				},
				{
					"id": 1107,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "typeParameter",
						"isArray": true,
						"name": "E"
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 240
					}
				},
				{
					"id": 1069,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1070,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds the specified element to this set if it is not already present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set contains [1,3,6,8] //compareFn is ascending\n  set.add(4); //set: [1,3,4,6,8]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1071,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractSet.add",
								"id": 646
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.add",
								"id": 973
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 20,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractSet.add",
						"id": 646
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.add",
						"id": 972
					}
				},
				{
					"id": 1072,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1073,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts all items of an array into this set.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set containes [1,8,12] (compareFn designed for ascending order)\n  set.addAll([6,10,15]); //[1,6,8,10,12,15]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1074,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractSet.addAll",
								"id": 649
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.addAll",
								"id": 976
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 34,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractSet.addAll",
						"id": 649
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.addAll",
						"id": 975
					}
				},
				{
					"id": 1108,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1109,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 250
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.clear",
								"id": 1011
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 250
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.clear",
						"id": 1010
					}
				},
				{
					"id": 1075,
					"name": "comparator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1076,
							"name": "comparator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the compare function used to order the elements in this set.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  set.comparator(); //returns a function\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1077,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1078,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1079,
													"name": "x",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												},
												{
													"id": 1080,
													"name": "y",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "ds/abstract/abstract-sorted-set.ts",
											"line": 43,
											"character": 15
										}
									]
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.comparator",
								"id": 979
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 43,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.comparator",
						"id": 978
					}
				},
				{
					"id": 1110,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1111,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1112,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 252
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.contains",
								"id": 1013
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 252
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.contains",
						"id": 1012
					}
				},
				{
					"id": 1113,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1114,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1115,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 255
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.containsAll",
								"id": 1016
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 255
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.containsAll",
						"id": 1015
					}
				},
				{
					"id": 1101,
					"name": "difference",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1102,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by subtracting the specified set from this set.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4,5] and set2 : [4,5,6,7]\n  set1.difference(set2); //returns a new set : [1,2,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1103,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AbstractSet",
										"id": 641,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractSet.difference",
								"id": 658
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 66,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractSet.difference",
						"id": 658
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.difference",
						"id": 1004
					}
				},
				{
					"id": 1116,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1117,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1118,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 258
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.equals",
								"id": 1019
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 258
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.equals",
						"id": 1018
					}
				},
				{
					"id": 1104,
					"name": "exclusion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1105,
							"name": "exclusion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by exclusion of this set and the set specified.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4,5] and set2 : [4,5,6,7]\n  set1.difference(set2); //returns a new set : [1,2,3,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1106,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AbstractSet",
										"id": 641,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractSet.exclusion",
								"id": 661
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 77,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractSet.exclusion",
						"id": 661
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.exclusion",
						"id": 1007
					}
				},
				{
					"id": 1081,
					"name": "first",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1082,
							"name": "first",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the first (lowest) element currently in this set.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set contains [1,2,3,4]\n  set.first()\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"name": "E"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.first",
								"id": 985
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 53,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.first",
						"id": 984
					}
				},
				{
					"id": 1142,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1143,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1144,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1145,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1146,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1147,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1148,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 1149,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 284
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 284
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.forEach",
						"id": 1044
					}
				},
				{
					"id": 1089,
					"name": "headSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1090,
							"name": "headSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this set whose elements are strictly less than toElement.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set : [1,2,3,5,7,9]\n  set.headSet(6) //returns set : [1,2,3,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1091,
									"name": "toItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSortedSet",
								"id": 1054,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.headSet",
								"id": 987
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 86,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.headSet",
						"id": 986
					}
				},
				{
					"id": 1098,
					"name": "intersection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1099,
							"name": "intersection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by intersection of this set and the set specified",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4,5] and set2 : [4,5,6,7]\n  set1.intersection(set2); //returns a new set : [4,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1100,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AbstractSet",
										"id": 641,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractSet.intersection",
								"id": 655
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 55,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractSet.intersection",
						"id": 655
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.intersection",
						"id": 1001
					}
				},
				{
					"id": 1119,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1120,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 261
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.isEmpty",
								"id": 1022
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 261
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.isEmpty",
						"id": 1021
					}
				},
				{
					"id": 1150,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1151,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 292
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.iterator",
								"id": 1053
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 292
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.iterator",
						"id": 1052
					}
				},
				{
					"id": 1083,
					"name": "last",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1084,
							"name": "last",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the last (highest) element currently in this set.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set contains [1,2,3,4]\n  set.last();\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"name": "E"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.last",
								"id": 990
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 63,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.last",
						"id": 989
					}
				},
				{
					"id": 1121,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1122,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1123,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 263
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.remove",
								"id": 1024
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 263
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.remove",
						"id": 1023
					}
				},
				{
					"id": 1124,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1125,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1126,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 266
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.removeAll",
								"id": 1027
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 266
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.removeAll",
						"id": 1026
					}
				},
				{
					"id": 1127,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1128,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1129,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1130,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1131,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1132,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1133,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 1134,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 269
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 269
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.removeIf",
						"id": 1029
					}
				},
				{
					"id": 1135,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1136,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1137,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 277
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.retainAll",
								"id": 1038
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 277
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.retainAll",
						"id": 1037
					}
				},
				{
					"id": 1138,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1139,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 280
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.size",
								"id": 1041
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 280
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.size",
						"id": 1040
					}
				},
				{
					"id": 1085,
					"name": "subSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1086,
							"name": "subSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set contains [1,2,3,4,5,6,7,8,9,10]\n  set.subSet(4,9) //returns set : [4,5,6,7,8]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1087,
									"name": "fromItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1088,
									"name": "toItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSortedSet",
								"id": 1054,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.subSet",
								"id": 992
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 73,
							"character": 8
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.subSet",
						"id": 991
					}
				},
				{
					"id": 1092,
					"name": "tailSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1093,
							"name": "tailSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this set whose elements are greater than or equal to fromElement.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set : [1,2,3,5,7,9]\n  set.tailSet(4) //returns set : [5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1094,
									"name": "fromItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSortedSet",
								"id": 1054,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.tailSet",
								"id": 996
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-sorted-set.ts",
							"line": 96,
							"character": 9
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.tailSet",
						"id": 995
					}
				},
				{
					"id": 1140,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1141,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 282
							},
							"implementationOf": {
								"type": "reference",
								"name": "SortedSet.toArray",
								"id": 1043
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 282
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.toArray",
						"id": 1042
					}
				},
				{
					"id": 1095,
					"name": "union",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1096,
							"name": "union",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by union of this set and the set specified",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //set1 : [1,2,3,4] and set2 : [4,5,6,7]\n  set1.union(set2); //returns a new set : [1,2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1097,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AbstractSet",
										"id": 641,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractSet.union",
								"id": 652
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-set.ts",
							"line": 44,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractSet.union",
						"id": 652
					},
					"implementationOf": {
						"type": "reference",
						"name": "SortedSet.union",
						"id": 998
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1061
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1056,
						1107
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1069,
						1072,
						1108,
						1075,
						1110,
						1113,
						1101,
						1116,
						1104,
						1081,
						1142,
						1089,
						1098,
						1119,
						1150,
						1083,
						1121,
						1124,
						1127,
						1135,
						1138,
						1085,
						1092,
						1140,
						1095
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-sorted-set.ts",
					"line": 4,
					"character": 30
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractSet",
					"id": 641,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Set",
					"id": 425,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "SortedSet",
					"id": 970,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 1170,
			"name": "ArrayList",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Resizable-array implementation of the List interface."
			},
			"typeParameter": [
				{
					"id": 1171,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1173,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Constructs an empty list with an initial capacity of ten.\nConstructs an empty list with the specified initial capacity.\nConstructs a list containing the items."
					},
					"signatures": [
						{
							"id": 1174,
							"name": "new ArrayList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs an empty list with an initial capacity of ten."
							},
							"type": {
								"type": "reference",
								"name": "ArrayList",
								"id": 1170
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 296
							}
						},
						{
							"id": 1175,
							"name": "new ArrayList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs an empty list with the specified initial capacity."
							},
							"parameters": [
								{
									"id": 1176,
									"name": "initialCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayList",
								"id": 1170
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 296
							}
						},
						{
							"id": 1177,
							"name": "new ArrayList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs a list containing the items."
							},
							"parameters": [
								{
									"id": 1178,
									"name": "initialCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1179,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayList",
								"id": 1170
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 296
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 11,
							"character": 30
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 16,
							"character": 15
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 20,
							"character": 37
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 24,
							"character": 51
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractList.__constructor",
						"id": 296
					}
				},
				{
					"id": 1172,
					"name": "_capacity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 11,
							"character": 21
						}
					],
					"type": {
						"type": "instrinct",
						"name": "number"
					}
				},
				{
					"id": 1254,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "typeParameter",
						"isArray": true,
						"name": "E"
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 240
					}
				},
				{
					"id": 1180,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1181,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends the specified element to the end of this list"
							},
							"parameters": [
								{
									"id": 1182,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.add",
								"id": 299
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 137
							}
						},
						{
							"id": 1183,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts the specified element at the specified position in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  list.add(4); //[1,2,3,4]\n  list.add(2.5,2); //[1,2,2.5,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1184,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1185,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.add",
								"id": 299
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 139
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 33,
							"character": 5
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 41,
							"character": 5
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 42,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractList.add",
						"id": 299
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.add",
						"id": 136
					}
				},
				{
					"id": 1186,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1187,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends all of the elements in the specified array to the end of this list"
							},
							"parameters": [
								{
									"id": 1188,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.addAll",
								"id": 305
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 143
							}
						},
						{
							"id": 1189,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts all of the elements in the specified array into this list at the specified position.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  list.addAll([4,5]); //[1,2,3,4,5]\n  list.addAll([2.1,2.2,2.3], 2); //[1,2,2.1,2.2,2.3,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1190,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								},
								{
									"id": 1191,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.addAll",
								"id": 305
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 145
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 50,
							"character": 8
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 58,
							"character": 8
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 59,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractList.addAll",
						"id": 305
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.addAll",
						"id": 142
					}
				},
				{
					"id": 1255,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1256,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 250
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.clear",
								"id": 181
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 250
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.clear",
						"id": 180
					}
				},
				{
					"id": 1201,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1202,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a shallow copy of this ArrayList instance.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let newArrayList = arrayList.clone();\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "ArrayList",
								"id": 1170,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 1155
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 91,
							"character": 6
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 1154
					}
				},
				{
					"id": 1257,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1258,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1259,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 252
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.contains",
								"id": 183
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 252
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.contains",
						"id": 182
					}
				},
				{
					"id": 1260,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1261,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1262,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 255
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.containsAll",
								"id": 186
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 255
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.containsAll",
						"id": 185
					}
				},
				{
					"id": 1192,
					"name": "ensureCapacity",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1193,
							"name": "ensureCapacity",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList has a capacity 10\n  arrayList.ensureCapacity(15);\n  //new capacity is 15\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1194,
									"name": "minCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 71,
							"character": 16
						}
					]
				},
				{
					"id": 1263,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1264,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1265,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 258
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.equals",
								"id": 189
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 258
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.equals",
						"id": 188
					}
				},
				{
					"id": 1289,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1290,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1291,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1292,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1293,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1294,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1295,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 1296,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 284
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 284
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.forEach",
						"id": 214
					}
				},
				{
					"id": 1211,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1212,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the Object from the JSON string",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //json = \"[1,2,3,4]\"\n  arrayList = new ArrayList<number>().fromString(json,(x)=>(parseFloat(x)));\n  //arrayList contains [1,2,3,4]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1213,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1214,
									"name": "deserializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1215,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1216,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1217,
															"name": "itemJ",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 127,
													"character": 41
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayList",
								"id": 1170,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 127,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.fromString",
						"id": 1163
					}
				},
				{
					"id": 1218,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1219,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an item from the list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.get(2));\n  //Output: 3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1220,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.get",
								"id": 311
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.get",
								"id": 149
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 63,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.get",
						"id": 311
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.get",
						"id": 148
					}
				},
				{
					"id": 1221,
					"name": "indexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1222,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,2,4]\n  console.log(list.indexOf(2));\n  //Output: 1\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1223,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.indexOf",
								"id": 314
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.indexOf",
								"id": 152
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 74,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.indexOf",
						"id": 314
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.indexOf",
						"id": 151
					}
				},
				{
					"id": 1266,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1267,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 261
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.isEmpty",
								"id": 192
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 261
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.isEmpty",
						"id": 191
					}
				},
				{
					"id": 1297,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1298,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 292
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.iterator",
								"id": 223
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 292
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.iterator",
						"id": 222
					}
				},
				{
					"id": 1224,
					"name": "lastIndexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1225,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of last occurrence of the element.\n  //list contains [1,2,3,2,4]\n  console.log(list.lastIndexOf(2));\n  //Output: 3"
							},
							"parameters": [
								{
									"id": 1226,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.lastIndexOf",
								"id": 317
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.lastIndexOf",
								"id": 155
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 84,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.lastIndexOf",
						"id": 317
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.lastIndexOf",
						"id": 154
					}
				},
				{
					"id": 1227,
					"name": "listIterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1228,
							"name": "listIterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list iterator over the elements in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var listIterator = list.listIterator(); //starts at index 0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1229,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.listIterator",
								"id": 320
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.listIterator",
								"id": 158
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 93,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.listIterator",
						"id": 320
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.listIterator",
						"id": 157
					}
				},
				{
					"id": 1268,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1269,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1270,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 263
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.remove",
								"id": 194
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 263
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.remove",
						"id": 193
					}
				},
				{
					"id": 1271,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1272,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1273,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 266
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAll",
								"id": 197
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 266
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAll",
						"id": 196
					}
				},
				{
					"id": 1230,
					"name": "removeAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1231,
							"name": "removeAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the element at the specified position in this list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.removeAt(1)); //[1,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1232,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.removeAt",
								"id": 323
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAt",
								"id": 161
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 104,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.removeAt",
						"id": 323
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAt",
						"id": 160
					}
				},
				{
					"id": 1274,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1275,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1276,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1277,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1278,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1279,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1280,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 1281,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 269
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 269
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeIf",
						"id": 199
					}
				},
				{
					"id": 1233,
					"name": "removeRange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1234,
							"name": "removeRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5,6]\n  console.log(list.removeRange(1,4)); //[1,5,6]\n  //Output: [2,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1235,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1236,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.removeRange",
								"id": 326
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 115,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.removeRange",
						"id": 326
					}
				},
				{
					"id": 1195,
					"name": "replaceAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1196,
							"name": "replaceAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces each element of this list with the result of applying the mapping function",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList contains [1,2,3,4]\n  arrayList.map((x)=>(x*2));\n  //now arrayList contains [2,4,6,8]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1197,
									"name": "mappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1198,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1199,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1200,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 82,
													"character": 23
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 82,
							"character": 12
						}
					]
				},
				{
					"id": 1282,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1283,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1284,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 277
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.retainAll",
								"id": 208
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 277
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.retainAll",
						"id": 207
					}
				},
				{
					"id": 1252,
					"name": "reverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1253,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverse the list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5]\n  list.reverse() //now list contains [5,4,3,2,1]\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.reverse",
								"id": 345
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.reverse",
								"id": 179
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 161,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.reverse",
						"id": 345
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.reverse",
						"id": 178
					}
				},
				{
					"id": 1237,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1238,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the element at the specified position in this list with the specified element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.set(1,2.5)); //[1,2.5,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1239,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1240,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.set",
								"id": 330
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.set",
								"id": 164
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 126,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.set",
						"id": 330
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.set",
						"id": 163
					}
				},
				{
					"id": 1285,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1286,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 280
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.size",
								"id": 211
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 280
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.size",
						"id": 210
					}
				},
				{
					"id": 1241,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1242,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts this list according to the compareFn.\ncompareFn is a function which should return a number value (-ve, zero, or +ve).\nx is considered smaller than y if the compareFn(x,y) is negetive",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.sort(function(x,y) {\n    return x-y;\n  }); // [1, 2, 3, 6, 7, 8, 9, 11]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1243,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1244,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1245,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1246,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1247,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-list.ts",
													"line": 141,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.sort",
								"id": 334
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 141,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.sort",
						"id": 334
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.sort",
						"id": 167
					}
				},
				{
					"id": 1248,
					"name": "subList",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1249,
							"name": "subList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.subList(2,7); // returns a list containing [6, 2, 7, 3, 9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1250,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1251,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractList",
								"id": 294,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.subList",
								"id": 341
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.subList",
								"id": 175
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 151,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.subList",
						"id": 341
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.subList",
						"id": 174
					}
				},
				{
					"id": 1287,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1288,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 282
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.toArray",
								"id": 213
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 282
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.toArray",
						"id": 212
					}
				},
				{
					"id": 1205,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1206,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts the arrayList into a JSON String",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList contains [1,2,3,4]\n  console.log(arrayList.toString((x)=>(x.toString())));\n  //Output\n  //\"[1,2,3,4]\"\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1207,
									"name": "serializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1208,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1209,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1210,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 113,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 113,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.toString",
						"id": 1157
					}
				},
				{
					"id": 1203,
					"name": "trimToSize",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1204,
							"name": "trimToSize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Trims the capacity of this ArrayList instance to be the list's current size.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList contains [1,2,3,4,5] and capacity is 10\n  arrayList.trimToSize(); //new capacity is 5\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 101,
							"character": 12
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1173
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1172,
						1254
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1180,
						1186,
						1255,
						1201,
						1257,
						1260,
						1192,
						1263,
						1289,
						1211,
						1218,
						1221,
						1266,
						1297,
						1224,
						1227,
						1268,
						1271,
						1230,
						1274,
						1233,
						1195,
						1282,
						1252,
						1237,
						1285,
						1241,
						1248,
						1287,
						1205,
						1203
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/lists/array-list.ts",
					"line": 9,
					"character": 22
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractList",
					"id": 294,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "HistoryList",
					"id": 1299
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "List",
					"id": 134,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 1152,
					"typeArguments": [
						{
							"type": "reference",
							"name": "ArrayList",
							"id": 1170,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "E"
								}
							]
						}
					]
				},
				{
					"type": "reference",
					"name": "Serializable",
					"id": 1156
				}
			]
		},
		{
			"id": 1554,
			"name": "ArrayMap",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 1555,
					"name": "K",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 1556,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1558,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Constructs an empty list with an initial capacity of ten.\nConstructs an empty list with the specified initial capacity.\nConstructs a list containing the items."
					},
					"signatures": [
						{
							"id": 1559,
							"name": "new ArrayMap",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs an empty list with an initial capacity of ten."
							},
							"type": {
								"type": "reference",
								"name": "ArrayMap",
								"id": 1554
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractMap.__constructor",
								"id": 714
							}
						},
						{
							"id": 1560,
							"name": "new ArrayMap",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs an empty list with the specified initial capacity."
							},
							"parameters": [
								{
									"id": 1561,
									"name": "initialCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayMap",
								"id": 1554
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractMap.__constructor",
								"id": 714
							}
						},
						{
							"id": 1562,
							"name": "new ArrayMap",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs a list containing the items."
							},
							"parameters": [
								{
									"id": 1563,
									"name": "initialCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1564,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "reference",
										"isArray": true,
										"name": "MapEntry",
										"id": 489,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayMap",
								"id": 1554
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractMap.__constructor",
								"id": 714
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 7,
							"character": 34
						},
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 11,
							"character": 15
						},
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 15,
							"character": 37
						},
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 19,
							"character": 63
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractMap.__constructor",
						"id": 714
					}
				},
				{
					"id": 1557,
					"name": "_capacity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 7,
							"character": 21
						}
					],
					"type": {
						"type": "instrinct",
						"name": "number"
					},
					"defaultValue": "10"
				},
				{
					"id": 1577,
					"name": "_keys",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 7,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractSet",
						"id": 641,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "K"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap._keys",
						"id": 713
					}
				},
				{
					"id": 1576,
					"name": "_values",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 6,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractList",
						"id": 294,
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap._values",
						"id": 712
					}
				},
				{
					"id": 1578,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1579,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the mappings from this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//map: [{\"1\":1},{\"2\":2},{\"3\":3}]\nmap.clear();\n//now : []\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.clear",
								"id": 717
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.clear",
								"id": 498
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 21,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.clear",
						"id": 717
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.clear",
						"id": 497
					}
				},
				{
					"id": 1572,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1573,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a shallow copy of this ArrayMap instance.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let newArrayMap = arrayMap.clone();\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "ArrayMap",
								"id": 1554,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "K"
									},
									{
										"type": "typeParameter",
										"name": "V"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 1155
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 58,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 1154
					}
				},
				{
					"id": 1580,
					"name": "compute",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1581,
							"name": "compute",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to 12\n  map.compute(k1, (key,value,map)=>(value+11)); //returns 12\n  //now the value changes to 12+11 -> 23\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1582,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1583,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1584,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1585,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1586,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1587,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	},
																	{
																		"type": "instrinct",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 1588,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AbstractMap",
																"id": 709,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "V"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 32,
													"character": 29
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.compute",
								"id": 719
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 32,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.compute",
						"id": 719
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.compute",
						"id": 499
					}
				},
				{
					"id": 1589,
					"name": "computeIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1590,
							"name": "computeIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to 12\n  map.computeIfAbsent(k1, (key,value,map)=>(23)); //returns 12\n  //value does not change\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1591,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1592,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1593,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1594,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1595,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1596,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	},
																	{
																		"type": "instrinct",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 1597,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AbstractMap",
																"id": 709,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "V"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 46,
													"character": 37
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.computeIfAbsent",
								"id": 728
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 46,
							"character": 16
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.computeIfAbsent",
						"id": 728
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.computeIfAbsent",
						"id": 508
					}
				},
				{
					"id": 1598,
					"name": "computeIfPresent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1599,
							"name": "computeIfPresent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to null\n  map.computeIfAbsent(k1, (key,value,map)=>(value+11)); //returns null\n  //value does not change\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1600,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1601,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1602,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1603,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1604,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1605,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 1606,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 494,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "V"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 62,
													"character": 38
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.computeIfPresent",
								"id": 737
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 62,
							"character": 17
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.computeIfPresent",
						"id": 737
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.computeIfPresent",
						"id": 517
					}
				},
				{
					"id": 1607,
					"name": "containsKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1608,
							"name": "containsKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains a mapping for the specified key.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.conainsKey(k1); //returns true\n  map.containsKey(k5); //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1609,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.containsKey",
								"id": 746
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.containsKey",
								"id": 527
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 78,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.containsKey",
						"id": 746
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.containsKey",
						"id": 526
					}
				},
				{
					"id": 1610,
					"name": "containsValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1611,
							"name": "containsValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map maps one or more keys to the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.conainsValue(1); //returns true\n  map.containsValue(5); //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1612,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.containsValue",
								"id": 749
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.containsValue",
								"id": 530
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 89,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.containsValue",
						"id": 749
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.containsValue",
						"id": 529
					}
				},
				{
					"id": 1569,
					"name": "ensureCapacity",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1570,
							"name": "ensureCapacity",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Increases the capacity of this ArrayMap instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayMap has a capacity 10\n  arrayMap.ensureCapacity(15);\n  //new capacity is 15\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1571,
									"name": "minCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 49,
							"character": 16
						}
					]
				},
				{
					"id": 1613,
					"name": "entrySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1614,
							"name": "entrySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the mappings contained in this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.entrySet(); //returns Set [{key:k1, value:1},{key:k2, value:2}]\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "reference",
										"name": "MapEntry",
										"id": 489,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.entrySet",
								"id": 752
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.entrySet",
								"id": 533
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 99,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.entrySet",
						"id": 752
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.entrySet",
						"id": 532
					}
				},
				{
					"id": 1615,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1616,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified map with this map for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map1 : [{k1:1},{k2:2},{k3:null}]\n  //map2 : [{k1:1},{k3:4}]\n  map1.equals(map2) //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1617,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 494,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.equals",
								"id": 754
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.equals",
								"id": 535
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 116,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.equals",
						"id": 754
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.equals",
						"id": 534
					}
				},
				{
					"id": 1618,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1619,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.forEach((key, value, map)=>{\n     console.log(key+\"->\"+value+\",\");\n  });\n  //Output: one->1,two->2,three->3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1620,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1621,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1622,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1623,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1624,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	}
																]
															}
														},
														{
															"id": 1625,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AbstractMap",
																"id": 709,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 138,
													"character": 16
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.forEach",
								"id": 757
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 138,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.forEach",
						"id": 757
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.forEach",
						"id": 537
					}
				},
				{
					"id": 1626,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1627,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped. undefined if there is no mapping.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.get(k1); //returns 1\n  map.get(k3); //returns null\n  map.get(k4); //returns undefined\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1628,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.get",
								"id": 765
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.get",
								"id": 546
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 154,
							"character": 4
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.get",
						"id": 765
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.get",
						"id": 545
					}
				},
				{
					"id": 1629,
					"name": "getOrDefault",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1630,
							"name": "getOrDefault",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key or if key is mapped to null.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.getOrDefault(k1,5); //returns 1\n  map.getOrDefault(k3,12); //returns 12\n  map.getOrDefault(k4,16); //returns 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1631,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1632,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "V"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.getOrDefault",
								"id": 768
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.getOrDefault",
								"id": 549
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 168,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.getOrDefault",
						"id": 768
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.getOrDefault",
						"id": 548
					}
				},
				{
					"id": 1633,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1634,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains no key-value mappings.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.isEmpty(); //false\n  //map : [{k1:null},{k2:null},{k3:null}]\n  map.isEmpty(); //false\n  //map : []\n  map.isEmpty(); //true\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.isEmpty",
								"id": 772
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.isEmpty",
								"id": 553
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 182,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.isEmpty",
						"id": 772
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.isEmpty",
						"id": 552
					}
				},
				{
					"id": 1635,
					"name": "isNull",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1636,
							"name": "isNull",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains mappings to only null values or if  the map is empty.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.isNull(); //false\n  //map : [{k1:null},{k2:null},{k3:null}]\n  map.isNull(); //true\n  //map : []\n  map.isNull(); //true\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.isNull",
								"id": 774
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 196,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.isNull",
						"id": 774
					}
				},
				{
					"id": 1637,
					"name": "keySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1638,
							"name": "keySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the keys contained in this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.keySet(); //[\"one\",\"two\",\"three\"]\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "K"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.keySet",
								"id": 776
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.keySet",
								"id": 555
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 206,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.keySet",
						"id": 776
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.keySet",
						"id": 554
					}
				},
				{
					"id": 1565,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1566,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Associates the specified value with the specified key in this map.Returns the old value associated with the key or  undefined.\n(Throws an Error if ArrayMap is at maximum capacity)",
								"tags": [
									{
										"tag": "example",
										"text": "\n//map : [{\"one\":1},{\"two\":2},{\"three\":3}]\nmap.put(\"one\",22); //return 1\n//now map : [{\"one\":22},{\"two\":2},{\"three\":3}]\nmap.put(\"four\",4);//return undefined\n//now map : [{\"one\":22},{\"two\":2},{\"three\":3},{\"four\":4}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1567,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1568,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractMap.put",
								"id": 778
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 35,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractMap.put",
						"id": 778
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.put",
						"id": 556
					}
				},
				{
					"id": 1639,
					"name": "putAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1640,
							"name": "putAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies all of the mappings from the specified map to this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map1: [{k1:v1},{k2:v2},{k3:v3}], map2: [{k2:v4},{k4:v6},{k6:v8}]\n  map1.putAll(map2);\n  //now map1: [{k1:v1},{k2:v4},{k3:v3},{k4:v6},{k6:v8}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1641,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 494,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.putAll",
								"id": 782
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.putAll",
								"id": 561
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 239,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.putAll",
						"id": 782
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.putAll",
						"id": 560
					}
				},
				{
					"id": 1642,
					"name": "putIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1643,
							"name": "putIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns undefined, else returns the current value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.putIfAbsent(\"four\",4); //return undefined (adds {\"four\":4} to the map)\n  map.putIfAbsent(\"one\",23); //return 1 (map unchanged)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1644,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1645,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.putIfAbsent",
								"id": 785
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.putIfAbsent",
								"id": 564
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 251,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.putIfAbsent",
						"id": 785
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.putIfAbsent",
						"id": 563
					}
				},
				{
					"id": 1646,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1647,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the mapping for a key from this map if it is present.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.remove(\"one\"); //return 1\n  //now map : [{\"two\":2},{\"three\":3}]\n  map.remove(\"four\"); //return undefined (map unchanged)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1648,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.remove",
								"id": 789
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.remove",
								"id": 568
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 265,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.remove",
						"id": 789
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.remove",
						"id": 567
					}
				},
				{
					"id": 1649,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1650,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.removeIf(\"one\", 1); //return true\n  //now map : [{\"two\":2},{\"three\":3}]\n  map.removeIf(\"two\",5); //return false (map unchanged)\n  map.removeIf(\"four\",4); //return false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1651,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 1652,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.removeIf",
								"id": 792
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.removeIf",
								"id": 571
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 283,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.removeIf",
						"id": 792
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.removeIf",
						"id": 570
					}
				},
				{
					"id": 1653,
					"name": "replace",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1654,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replace all entries with specified value with the new value. Returns true if map was changed.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.replace(5,2) //returns true;\n  //now map : [{k1:1},{k2:2},{k3:3},{k4:2},{k5:1}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1655,
									"name": "oldValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								},
								{
									"id": 1656,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.replace",
								"id": 796
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 295,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.replace",
						"id": 796
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.replace",
						"id": 574
					}
				},
				{
					"id": 1657,
					"name": "replaceAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1658,
							"name": "replaceAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.replaceAll((k,v,m)=>(v*2)); //replace with its double\n  //map : [{k1:2},{k2:10},{k3:6},{k4:10},{k5:2}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1659,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1660,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1661,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1662,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 1663,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	}
																]
															}
														},
														{
															"id": 1664,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AbstractMap",
																"id": 709,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "V"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 312,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.replaceAll",
								"id": 800
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 312,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.replaceAll",
						"id": 800
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.replaceAll",
						"id": 578
					}
				},
				{
					"id": 1665,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1666,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of key-value mappings in this map.(key->null mappings are counted)",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.size(); //return 5\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.size",
								"id": 808
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.size",
								"id": 587
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 324,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.size",
						"id": 808
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.size",
						"id": 586
					}
				},
				{
					"id": 1574,
					"name": "trimToSize",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1575,
							"name": "trimToSize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Trims the capacity of this ArrayMap instance to be the list's current size.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayMap contains [{\"one\":1},{\"two\":2},{\"three\":3}] and capacity is 10\n  arrayMap.trimToSize(); //new capacity is 3\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/array-map.ts",
							"line": 68,
							"character": 12
						}
					]
				},
				{
					"id": 1667,
					"name": "values",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1668,
							"name": "values",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a List view of the values contained in this map.\n//map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\nmap.values(); //return list : [1,5,3,5,1]"
							},
							"type": {
								"type": "reference",
								"name": "AbstractList",
								"id": 294,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.values",
								"id": 810
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.values",
								"id": 589
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 333,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.values",
						"id": 810
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.values",
						"id": 588
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1558
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1557,
						1577,
						1576
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1578,
						1572,
						1580,
						1589,
						1598,
						1607,
						1610,
						1569,
						1613,
						1615,
						1618,
						1626,
						1629,
						1633,
						1635,
						1637,
						1565,
						1639,
						1642,
						1646,
						1649,
						1653,
						1657,
						1665,
						1574,
						1667
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/maps/array-map.ts",
					"line": 6,
					"character": 21
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractMap",
					"id": 709,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "K"
						},
						{
							"type": "typeParameter",
							"name": "V"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Map",
					"id": 494,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "K"
						},
						{
							"type": "typeParameter",
							"name": "V"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 1152,
					"typeArguments": [
						{
							"type": "reference",
							"name": "ArrayMap",
							"id": 1554,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "K"
								},
								{
									"type": "typeParameter",
									"name": "V"
								}
							]
						}
					]
				}
			]
		},
		{
			"id": 1899,
			"name": "BinarySearchTree",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 1900,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1906,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1907,
							"name": "new BinarySearchTree",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1908,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1909,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1910,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1911,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1912,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/trees/binary-search-tree.ts",
													"line": 7,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinarySearchTree",
								"id": 1899
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.__constructor",
								"id": 407
							}
						},
						{
							"id": 1913,
							"name": "new BinarySearchTree",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1914,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1915,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1916,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1917,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1918,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/trees/binary-search-tree.ts",
													"line": 8,
													"character": 24
												}
											]
										}
									}
								},
								{
									"id": 1919,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinarySearchTree",
								"id": 1899
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.__constructor",
								"id": 407
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 5,
							"character": 45
						},
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 7,
							"character": 43
						},
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 8,
							"character": 52
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractBinaryTree.__constructor",
						"id": 407
					}
				},
				{
					"id": 1901,
					"name": "_comparator",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 5,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1902,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1903,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1904,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										},
										{
											"id": 1905,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "ds/trees/binary-search-tree.ts",
									"line": 5,
									"character": 24
								}
							]
						}
					}
				},
				{
					"id": 1965,
					"name": "_root",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 26,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 392,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							{
								"type": "instrinct",
								"name": "null"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree._root",
						"id": 406
					}
				},
				{
					"id": 1932,
					"name": "comparator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1933,
							"name": "comparator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the compare function used to order the elements in this BST.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  bst.comparator(); //returns a function\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1934,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1935,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1936,
													"name": "x",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												},
												{
													"id": 1937,
													"name": "y",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "ds/trees/binary-search-tree.ts",
											"line": 64,
											"character": 15
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 64,
							"character": 12
						}
					]
				},
				{
					"id": 1959,
					"name": "deepestLeft",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 1960,
							"name": "deepestLeft",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1961,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 392,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 157,
							"character": 23
						}
					]
				},
				{
					"id": 1962,
					"name": "deepestRight",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 1963,
							"name": "deepestRight",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1964,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 392,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 161,
							"character": 24
						}
					]
				},
				{
					"id": 1926,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1927,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an item from the BST.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bst:BinarySearchTree<number> : inorder -> 1,5,8,9,11\n  bst.delete(5);  //inorder -> 1,8,9,10,11\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1928,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.delete",
								"id": 413
							},
							"implementationOf": {
								"type": "reference",
								"name": "BinaryTree.delete",
								"id": 230
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 46,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractBinaryTree.delete",
						"id": 413
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.delete",
						"id": 229
					}
				},
				{
					"id": 1942,
					"name": "deleteItem",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 1943,
							"name": "deleteItem",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1944,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1945,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BinaryTreeNode",
												"id": 392,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 83,
							"character": 22
						}
					]
				},
				{
					"id": 1966,
					"name": "inorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1967,
							"name": "inorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after inorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.inorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1968,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 134,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractBinaryTree.inorder",
								"id": 416
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 48,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree.inorder",
						"id": 416
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.inorder",
						"id": 232
					}
				},
				{
					"id": 1956,
					"name": "inorderPredecessor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 1957,
							"name": "inorderPredecessor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1958,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 392,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 153,
							"character": 30
						}
					]
				},
				{
					"id": 1953,
					"name": "inorderSuccessor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 1954,
							"name": "inorderSuccessor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1955,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 392,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 149,
							"character": 28
						}
					]
				},
				{
					"id": 1920,
					"name": "insert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1921,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert a new item to the BST.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bst:BinarySearchTree<number> : inorder -> 1,5,8,9,11\n  bst.insert(10);  //inorder -> 1,5,8,9,10,11\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1922,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractBinaryTree.insert",
								"id": 410
							},
							"implementationOf": {
								"type": "reference",
								"name": "BinaryTree.insert",
								"id": 227
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 20,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractBinaryTree.insert",
						"id": 410
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.insert",
						"id": 226
					}
				},
				{
					"id": 1938,
					"name": "insertItem",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 1939,
							"name": "insertItem",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1940,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1941,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 71,
							"character": 22
						}
					]
				},
				{
					"id": 1923,
					"name": "insertMultiple",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1924,
							"name": "insertMultiple",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert multiple items to the BST.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bst:BinarySearchTree<number> : inorder -> 1,5,8,9,11\n  bst.insertMultiple(10,21,3,15);  //inorder -> 1,3,5,8,9,10,11,15,21\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1925,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 34,
							"character": 16
						}
					]
				},
				{
					"id": 1972,
					"name": "postorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1973,
							"name": "postorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after postorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.postorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1974,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 134,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractBinaryTree.postorder",
								"id": 422
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 78,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree.postorder",
						"id": 422
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.postorder",
						"id": 236
					}
				},
				{
					"id": 1969,
					"name": "preorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1970,
							"name": "preorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after preorder traversal of the tree starting from the specified node (default root).",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //bt:BinaryTree<number>\n  bt.preorder();\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1971,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									},
									"defaultValue": " this._root!"
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 134,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractBinaryTree.preorder",
								"id": 419
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 63,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractBinaryTree.preorder",
						"id": 419
					},
					"implementationOf": {
						"type": "reference",
						"name": "BinaryTree.preorder",
						"id": 234
					}
				},
				{
					"id": 1946,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 1947,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1948,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 115,
							"character": 18
						}
					]
				},
				{
					"id": 1929,
					"name": "search",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1930,
							"name": "search",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Search an item in the tree. Returns the item if found else returns null.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  bst.search(25);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1931,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 55,
							"character": 8
						}
					]
				},
				{
					"id": 1949,
					"name": "searchItem",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"signatures": [
						{
							"id": 1950,
							"name": "searchItem",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1951,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1952,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BinaryTreeNode",
												"id": 392,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/trees/binary-search-tree.ts",
							"line": 134,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1906
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1901,
						1965
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1932,
						1959,
						1962,
						1926,
						1942,
						1966,
						1956,
						1953,
						1920,
						1938,
						1923,
						1972,
						1969,
						1946,
						1929,
						1949
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/trees/binary-search-tree.ts",
					"line": 3,
					"character": 29
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractBinaryTree",
					"id": 404,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "BinaryTree",
					"id": 224,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 392,
			"name": "BinaryTreeNode",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A Node in a Binary Tree dataStructure"
			},
			"typeParameter": [
				{
					"id": 393,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 397,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 398,
							"name": "new BinaryTreeNode",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 399,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 392
							}
						},
						{
							"id": 400,
							"name": "new BinaryTreeNode",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 401,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 402,
									"name": "left",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								},
								{
									"id": 403,
									"name": "right",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BinaryTreeNode",
										"id": 392,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 392
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 11,
							"character": 32
						},
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 13,
							"character": 22
						},
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 14,
							"character": 71
						}
					]
				},
				{
					"id": 394,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 9,
							"character": 7
						}
					],
					"type": {
						"type": "typeParameter",
						"name": "E"
					}
				},
				{
					"id": 395,
					"name": "left",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 10,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 392,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							{
								"type": "instrinct",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 396,
					"name": "right",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-binary-tree.ts",
							"line": 11,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "BinaryTreeNode",
								"id": 392,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							{
								"type": "instrinct",
								"name": "null"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						397
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						394,
						395,
						396
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/abstract/abstract-binary-tree.ts",
					"line": 8,
					"character": 27
				}
			]
		},
		{
			"id": 1669,
			"name": "Dictionary",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A Map whose keys are always of string type."
			},
			"typeParameter": [
				{
					"id": 1670,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1694,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1695,
							"name": "new Dictionary",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1696,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "reference",
										"isArray": true,
										"name": "MapEntry",
										"id": 489,
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Dictionary",
								"id": 1669
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.__constructor",
								"id": 714
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 7,
							"character": 34
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.__constructor",
						"id": 714
					}
				},
				{
					"id": 1693,
					"name": "_keys",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 7,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractSet",
						"id": 641,
						"typeArguments": [
							{
								"type": "instrinct",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap._keys",
						"id": 713
					}
				},
				{
					"id": 1692,
					"name": "_values",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 6,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "AbstractList",
						"id": 294,
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap._values",
						"id": 712
					}
				},
				{
					"id": 1697,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1698,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the mappings from this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//map: [{\"1\":1},{\"2\":2},{\"3\":3}]\nmap.clear();\n//now : []\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.clear",
								"id": 717
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.clear",
								"id": 498
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 21,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.clear",
						"id": 717
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.clear",
						"id": 497
					}
				},
				{
					"id": 1677,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1678,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a shallow copy of this Dictionary instance.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let newDict = dict.clone();\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Dictionary",
								"id": 1669,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 1155
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/dictionary.ts",
							"line": 51,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 1154
					}
				},
				{
					"id": 1699,
					"name": "compute",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1700,
							"name": "compute",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to 12\n  map.compute(k1, (key,value,map)=>(value+11)); //returns 12\n  //now the value changes to 12+11 -> 23\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1701,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1702,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1703,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1704,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1705,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														},
														{
															"id": 1706,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	},
																	{
																		"type": "instrinct",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 1707,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AbstractMap",
																"id": 709,
																"typeArguments": [
																	{
																		"type": "instrinct",
																		"name": "string"
																	},
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "E"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 32,
													"character": 29
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.compute",
								"id": 719
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 32,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.compute",
						"id": 719
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.compute",
						"id": 499
					}
				},
				{
					"id": 1708,
					"name": "computeIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1709,
							"name": "computeIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to 12\n  map.computeIfAbsent(k1, (key,value,map)=>(23)); //returns 12\n  //value does not change\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1710,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1711,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1712,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1713,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1714,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														},
														{
															"id": 1715,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	},
																	{
																		"type": "instrinct",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 1716,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AbstractMap",
																"id": 709,
																"typeArguments": [
																	{
																		"type": "instrinct",
																		"name": "string"
																	},
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "E"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 46,
													"character": 37
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.computeIfAbsent",
								"id": 728
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 46,
							"character": 16
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.computeIfAbsent",
						"id": 728
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.computeIfAbsent",
						"id": 508
					}
				},
				{
					"id": 1717,
					"name": "computeIfPresent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1718,
							"name": "computeIfPresent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //in map key k1 is mapped to null\n  map.computeIfAbsent(k1, (key,value,map)=>(value+11)); //returns null\n  //value does not change\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1719,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1720,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1721,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1722,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1723,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														},
														{
															"id": 1724,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1725,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 494,
																"typeArguments": [
																	{
																		"type": "instrinct",
																		"name": "string"
																	},
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 62,
													"character": 38
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.computeIfPresent",
								"id": 737
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 62,
							"character": 17
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.computeIfPresent",
						"id": 737
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.computeIfPresent",
						"id": 517
					}
				},
				{
					"id": 1726,
					"name": "containsKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1727,
							"name": "containsKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains a mapping for the specified key.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.conainsKey(k1); //returns true\n  map.containsKey(k5); //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1728,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.containsKey",
								"id": 746
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 78,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.containsKey",
						"id": 746
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.containsKey",
						"id": 526
					}
				},
				{
					"id": 1729,
					"name": "containsValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1730,
							"name": "containsValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map maps one or more keys to the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.conainsValue(1); //returns true\n  map.containsValue(5); //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1731,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.containsValue",
								"id": 749
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.containsValue",
								"id": 530
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 89,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.containsValue",
						"id": 749
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.containsValue",
						"id": 529
					}
				},
				{
					"id": 1671,
					"name": "count",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1672,
							"name": "count",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number occurances of an item in the dictionary",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //dict contains [{'a':1},{'b':2},{'c':3},{'d':2},{'f':1},{'e':2},{'g':4}]\n  dict.count(2) // returns 3\n  dict.count(7) // return 0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1673,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/dictionary.ts",
							"line": 20,
							"character": 7
						}
					]
				},
				{
					"id": 1732,
					"name": "entrySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1733,
							"name": "entrySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the mappings contained in this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2}]\n  map.entrySet(); //returns Set [{key:k1, value:1},{key:k2, value:2}]\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "reference",
										"name": "MapEntry",
										"id": 489,
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.entrySet",
								"id": 752
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.entrySet",
								"id": 533
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 99,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.entrySet",
						"id": 752
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.entrySet",
						"id": 532
					}
				},
				{
					"id": 1734,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1735,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified map with this map for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map1 : [{k1:1},{k2:2},{k3:null}]\n  //map2 : [{k1:1},{k3:4}]\n  map1.equals(map2) //returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1736,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 494,
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.equals",
								"id": 754
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.equals",
								"id": 535
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 116,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.equals",
						"id": 754
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.equals",
						"id": 534
					}
				},
				{
					"id": 1737,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1738,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.forEach((key, value, map)=>{\n     console.log(key+\"->\"+value+\",\");\n  });\n  //Output: one->1,two->2,three->3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1739,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1740,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1741,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1742,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														},
														{
															"id": 1743,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	}
																]
															}
														},
														{
															"id": 1744,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AbstractMap",
																"id": 709,
																"typeArguments": [
																	{
																		"type": "instrinct",
																		"name": "string"
																	},
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 138,
													"character": 16
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.forEach",
								"id": 757
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 138,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.forEach",
						"id": 757
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.forEach",
						"id": 537
					}
				},
				{
					"id": 1685,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1686,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the Object from the JSON string",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //json = '{\"a\":1,\"b\":2,\"c\":3}'\n  dict = new Dictionary<number>().fromString(json,(x)=>(parseFloat(x)));\n  //dict contains [{'a':1},{'b':2},{'c':3}]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1687,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1688,
									"name": "deserializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1689,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1690,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1691,
															"name": "itemJSON",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "E"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/maps/dictionary.ts",
													"line": 79,
													"character": 42
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Dictionary",
								"id": 1669,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/dictionary.ts",
							"line": 79,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.fromString",
						"id": 1163
					}
				},
				{
					"id": 1745,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1746,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped. undefined if there is no mapping.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.get(k1); //returns 1\n  map.get(k3); //returns null\n  map.get(k4); //returns undefined\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1747,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.get",
								"id": 765
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 154,
							"character": 4
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.get",
						"id": 765
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.get",
						"id": 545
					}
				},
				{
					"id": 1674,
					"name": "getKeys",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1675,
							"name": "getKeys",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a set of keys associated with a given item",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //dict contains [{'a':1},{'b':2},{'c':3},{'d':2},{'f':1},{'e':2},{'g':4}]\n  dict.getKeys(2) //return a set containing ['b','d','e']\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1676,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/dictionary.ts",
							"line": 36,
							"character": 9
						}
					]
				},
				{
					"id": 1748,
					"name": "getOrDefault",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1749,
							"name": "getOrDefault",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key or if key is mapped to null.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.getOrDefault(k1,5); //returns 1\n  map.getOrDefault(k3,12); //returns 12\n  map.getOrDefault(k4,16); //returns 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1750,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1751,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.getOrDefault",
								"id": 768
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 168,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.getOrDefault",
						"id": 768
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.getOrDefault",
						"id": 548
					}
				},
				{
					"id": 1752,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1753,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains no key-value mappings.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.isEmpty(); //false\n  //map : [{k1:null},{k2:null},{k3:null}]\n  map.isEmpty(); //false\n  //map : []\n  map.isEmpty(); //true\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.isEmpty",
								"id": 772
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.isEmpty",
								"id": 553
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 182,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.isEmpty",
						"id": 772
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.isEmpty",
						"id": 552
					}
				},
				{
					"id": 1754,
					"name": "isNull",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1755,
							"name": "isNull",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains mappings to only null values or if  the map is empty.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:2},{k3:null}]\n  map.isNull(); //false\n  //map : [{k1:null},{k2:null},{k3:null}]\n  map.isNull(); //true\n  //map : []\n  map.isNull(); //true\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.isNull",
								"id": 774
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 196,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.isNull",
						"id": 774
					}
				},
				{
					"id": 1756,
					"name": "keySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1757,
							"name": "keySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the keys contained in this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.keySet(); //[\"one\",\"two\",\"three\"]\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "AbstractSet",
								"id": 641,
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.keySet",
								"id": 776
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.keySet",
								"id": 555
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 206,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.keySet",
						"id": 776
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.keySet",
						"id": 554
					}
				},
				{
					"id": 1758,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1759,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Associates the specified value with the specified key in this map.Returns the old value associated with the key or  undefined.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//map : [{\"one\":1},{\"two\":2},{\"three\":3}]\nmap.put(\"one\",22); //return 1\n//now map : [{\"one\":22},{\"two\":2},{\"three\":3}]\nmap.put(\"four\",4);//return undefined\n//now map : [{\"one\":22},{\"two\":2},{\"three\":3},{\"four\":4}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1760,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1761,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "E"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.put",
								"id": 778
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 219,
							"character": 4
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.put",
						"id": 778
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.put",
						"id": 556
					}
				},
				{
					"id": 1762,
					"name": "putAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1763,
							"name": "putAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies all of the mappings from the specified map to this map.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map1: [{k1:v1},{k2:v2},{k3:v3}], map2: [{k2:v4},{k4:v6},{k6:v8}]\n  map1.putAll(map2);\n  //now map1: [{k1:v1},{k2:v4},{k3:v3},{k4:v6},{k6:v8}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1764,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 494,
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.putAll",
								"id": 782
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.putAll",
								"id": 561
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 239,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.putAll",
						"id": 782
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.putAll",
						"id": 560
					}
				},
				{
					"id": 1765,
					"name": "putIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1766,
							"name": "putIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns undefined, else returns the current value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.putIfAbsent(\"four\",4); //return undefined (adds {\"four\":4} to the map)\n  map.putIfAbsent(\"one\",23); //return 1 (map unchanged)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1767,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1768,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.putIfAbsent",
								"id": 785
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 251,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.putIfAbsent",
						"id": 785
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.putIfAbsent",
						"id": 563
					}
				},
				{
					"id": 1769,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1770,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the mapping for a key from this map if it is present.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.remove(\"one\"); //return 1\n  //now map : [{\"two\":2},{\"three\":3}]\n  map.remove(\"four\"); //return undefined (map unchanged)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1771,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.remove",
								"id": 789
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 265,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.remove",
						"id": 789
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.remove",
						"id": 567
					}
				},
				{
					"id": 1772,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1773,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{\"one\":1},{\"two\":2},{\"three\":3}]\n  map.removeIf(\"one\", 1); //return true\n  //now map : [{\"two\":2},{\"three\":3}]\n  map.removeIf(\"two\",5); //return false (map unchanged)\n  map.removeIf(\"four\",4); //return false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1774,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1775,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "E"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.removeIf",
								"id": 792
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 283,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.removeIf",
						"id": 792
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.removeIf",
						"id": 570
					}
				},
				{
					"id": 1776,
					"name": "replace",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1777,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replace all entries with specified value with the new value. Returns true if map was changed.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.replace(5,2) //returns true;\n  //now map : [{k1:1},{k2:2},{k3:3},{k4:2},{k5:1}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1778,
									"name": "oldValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1779,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.replace",
								"id": 796
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 295,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.replace",
						"id": 796
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.replace",
						"id": 574
					}
				},
				{
					"id": 1780,
					"name": "replaceAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1781,
							"name": "replaceAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.replaceAll((k,v,m)=>(v*2)); //replace with its double\n  //map : [{k1:2},{k2:10},{k3:6},{k4:10},{k5:2}]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1782,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1783,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1784,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1785,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														},
														{
															"id": 1786,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	}
																]
															}
														},
														{
															"id": 1787,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AbstractMap",
																"id": 709,
																"typeArguments": [
																	{
																		"type": "instrinct",
																		"name": "string"
																	},
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "E"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-map.ts",
													"line": 312,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.replaceAll",
								"id": 800
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 312,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.replaceAll",
						"id": 800
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.replaceAll",
						"id": 578
					}
				},
				{
					"id": 1788,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1789,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of key-value mappings in this map.(key->null mappings are counted)",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\n  map.size(); //return 5\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.size",
								"id": 808
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.size",
								"id": 587
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 324,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.size",
						"id": 808
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.size",
						"id": 586
					}
				},
				{
					"id": 1679,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1680,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts the dictionary into a JSON String",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //dictionary contains [{'a':1},{'b':2},{'c':3}]\n  console.log(arrayList.toString((x)=>(x.toString())));\n  //Output\n  //'{\"a\":1,\"b\":2,\"c\":3}'\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1681,
									"name": "serializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1682,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1683,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1684,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/maps/dictionary.ts",
													"line": 63,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/maps/dictionary.ts",
							"line": 63,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.toString",
						"id": 1157
					}
				},
				{
					"id": 1790,
					"name": "values",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1791,
							"name": "values",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a List view of the values contained in this map.\n//map : [{k1:1},{k2:5},{k3:3},{k4:5},{k5:1}]\nmap.values(); //return list : [1,5,3,5,1]"
							},
							"type": {
								"type": "reference",
								"name": "AbstractList",
								"id": 294,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "E"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractMap.values",
								"id": 810
							},
							"implementationOf": {
								"type": "reference",
								"name": "Map.values",
								"id": 589
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-map.ts",
							"line": 333,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractMap.values",
						"id": 810
					},
					"implementationOf": {
						"type": "reference",
						"name": "Map.values",
						"id": 588
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1694
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1693,
						1692
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1697,
						1677,
						1699,
						1708,
						1717,
						1726,
						1729,
						1671,
						1732,
						1734,
						1737,
						1685,
						1745,
						1674,
						1748,
						1752,
						1754,
						1756,
						1758,
						1762,
						1765,
						1769,
						1772,
						1776,
						1780,
						1788,
						1679,
						1790
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/maps/dictionary.ts",
					"line": 11,
					"character": 23
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractMap",
					"id": 709,
					"typeArguments": [
						{
							"type": "instrinct",
							"name": "string"
						},
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Map",
					"id": 494,
					"typeArguments": [
						{
							"type": "instrinct",
							"name": "string"
						},
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 1152,
					"typeArguments": [
						{
							"type": "reference",
							"name": "Dictionary",
							"id": 1669,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "E"
								}
							]
						}
					]
				},
				{
					"type": "reference",
					"name": "Serializable",
					"id": 1156
				}
			]
		},
		{
			"id": 596,
			"name": "Edge",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": " An Edge in graph datastructure."
			},
			"typeParameter": [
				{
					"id": 597,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 600,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 601,
							"name": "new Edge",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 602,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 590,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								},
								{
									"id": 603,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 590,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Edge",
								"id": 596
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 15,
							"character": 16
						}
					]
				},
				{
					"id": 599,
					"name": "end",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 15,
							"character": 5
						}
					],
					"type": {
						"type": "reference",
						"name": "Vertex",
						"id": 590,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "E"
							}
						]
					}
				},
				{
					"id": 598,
					"name": "start",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 14,
							"character": 7
						}
					],
					"type": {
						"type": "reference",
						"name": "Vertex",
						"id": 590,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "E"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						600
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						599,
						598
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/graph.ts",
					"line": 13,
					"character": 17
				}
			]
		},
		{
			"id": 1299,
			"name": "HistoryList",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A list of limited size 'n' that stores only the last n items."
			},
			"typeParameter": [
				{
					"id": 1300,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1314,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Constructs an empty list with an initial capacity of ten.\nConstructs an empty list with the specified initial capacity.\nConstructs a list containing the items."
					},
					"signatures": [
						{
							"id": 1315,
							"name": "new HistoryList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs an empty list with an initial capacity of ten."
							},
							"type": {
								"type": "reference",
								"name": "HistoryList",
								"id": 1299
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 296
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.__constructor",
								"id": 1173
							}
						},
						{
							"id": 1316,
							"name": "new HistoryList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs an empty list with the specified initial capacity."
							},
							"parameters": [
								{
									"id": 1317,
									"name": "initialCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "HistoryList",
								"id": 1299
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 296
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.__constructor",
								"id": 1173
							}
						},
						{
							"id": 1318,
							"name": "new HistoryList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs a list containing the items."
							},
							"parameters": [
								{
									"id": 1319,
									"name": "initialCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1320,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "HistoryList",
								"id": 1299
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 296
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.__constructor",
								"id": 1173
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 11,
							"character": 30
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 16,
							"character": 15
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 20,
							"character": 37
						},
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 24,
							"character": 51
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractList.__constructor",
						"id": 296
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.__constructor",
						"id": 1173
					}
				},
				{
					"id": 1313,
					"name": "_capacity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 11,
							"character": 21
						}
					],
					"type": {
						"type": "instrinct",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList._capacity",
						"id": 1172
					}
				},
				{
					"id": 1383,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "typeParameter",
						"isArray": true,
						"name": "E"
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 240
					}
				},
				{
					"id": 1301,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1302,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends the specified element to the end of this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5,6] -capacity 6\n  list.add(7); //[2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1303,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "ArrayList.add",
								"id": 1180
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 137
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/history-list.ts",
							"line": 13,
							"character": 5
						},
						{
							"fileName": "ds/lists/history-list.ts",
							"line": 14,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayList.add",
						"id": 1180
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.add",
						"id": 136
					}
				},
				{
					"id": 1304,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1305,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends all of the elements in the specified array to the end of this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5] - capacity 6\n  list.addAll([6,7]); //[2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1306,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "ArrayList.addAll",
								"id": 1186
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 143
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/history-list.ts",
							"line": 28,
							"character": 8
						},
						{
							"fileName": "ds/lists/history-list.ts",
							"line": 29,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "ArrayList.addAll",
						"id": 1186
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.addAll",
						"id": 142
					}
				},
				{
					"id": 1384,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1385,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 250
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.clear",
								"id": 181
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 250
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.clear",
						"id": 180
					}
				},
				{
					"id": 1310,
					"name": "clearUntill",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1311,
							"name": "clearUntill",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Clear old items in the history list retaining the last n elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5]\n  list.clearUntil(2); //return [1,2,3]\n  //now list contain [4,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1312,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/history-list.ts",
							"line": 55,
							"character": 13
						}
					]
				},
				{
					"id": 1330,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1331,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a shallow copy of this ArrayList instance.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let newArrayList = arrayList.clone();\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "ArrayList",
								"id": 1170,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.clone",
								"id": 1201
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 1155
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 91,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.clone",
						"id": 1201
					},
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 1154
					}
				},
				{
					"id": 1386,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1387,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1388,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 252
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.contains",
								"id": 183
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 252
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.contains",
						"id": 182
					}
				},
				{
					"id": 1389,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1390,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1391,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 255
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.containsAll",
								"id": 186
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 255
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.containsAll",
						"id": 185
					}
				},
				{
					"id": 1321,
					"name": "ensureCapacity",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1322,
							"name": "ensureCapacity",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList has a capacity 10\n  arrayList.ensureCapacity(15);\n  //new capacity is 15\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1323,
									"name": "minCapacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.ensureCapacity",
								"id": 1192
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 71,
							"character": 16
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.ensureCapacity",
						"id": 1192
					}
				},
				{
					"id": 1392,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1393,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1394,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 258
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.equals",
								"id": 189
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 258
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.equals",
						"id": 188
					}
				},
				{
					"id": 1418,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1419,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1420,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1421,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1422,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1423,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1424,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 1425,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 284
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 284
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.forEach",
						"id": 214
					}
				},
				{
					"id": 1340,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1341,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the Object from the JSON string",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //json = \"[1,2,3,4]\"\n  arrayList = new ArrayList<number>().fromString(json,(x)=>(parseFloat(x)));\n  //arrayList contains [1,2,3,4]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1342,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1343,
									"name": "deserializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1344,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1345,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1346,
															"name": "itemJ",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 127,
													"character": 41
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayList",
								"id": 1170,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.fromString",
								"id": 1211
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 127,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.fromString",
						"id": 1211
					},
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.fromString",
						"id": 1163
					}
				},
				{
					"id": 1347,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1348,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an item from the list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.get(2));\n  //Output: 3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1349,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.get",
								"id": 311
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.get",
								"id": 149
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 63,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.get",
						"id": 311
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.get",
						"id": 148
					}
				},
				{
					"id": 1350,
					"name": "indexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1351,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,2,4]\n  console.log(list.indexOf(2));\n  //Output: 1\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1352,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.indexOf",
								"id": 314
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.indexOf",
								"id": 152
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 74,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.indexOf",
						"id": 314
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.indexOf",
						"id": 151
					}
				},
				{
					"id": 1395,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1396,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 261
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.isEmpty",
								"id": 192
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 261
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.isEmpty",
						"id": 191
					}
				},
				{
					"id": 1426,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1427,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 292
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.iterator",
								"id": 223
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 292
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.iterator",
						"id": 222
					}
				},
				{
					"id": 1353,
					"name": "lastIndexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1354,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of last occurrence of the element.\n  //list contains [1,2,3,2,4]\n  console.log(list.lastIndexOf(2));\n  //Output: 3"
							},
							"parameters": [
								{
									"id": 1355,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.lastIndexOf",
								"id": 317
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.lastIndexOf",
								"id": 155
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 84,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.lastIndexOf",
						"id": 317
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.lastIndexOf",
						"id": 154
					}
				},
				{
					"id": 1356,
					"name": "listIterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1357,
							"name": "listIterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list iterator over the elements in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var listIterator = list.listIterator(); //starts at index 0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1358,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.listIterator",
								"id": 320
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.listIterator",
								"id": 158
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 93,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.listIterator",
						"id": 320
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.listIterator",
						"id": 157
					}
				},
				{
					"id": 1307,
					"name": "recent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1308,
							"name": "recent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the recent (last) n items from the list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5]\n  list.recent(3); //[3,4,5]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1309,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "unknown",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/history-list.ts",
							"line": 44,
							"character": 8
						}
					]
				},
				{
					"id": 1397,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1398,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1399,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 263
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.remove",
								"id": 194
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 263
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.remove",
						"id": 193
					}
				},
				{
					"id": 1400,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1401,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1402,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 266
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAll",
								"id": 197
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 266
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAll",
						"id": 196
					}
				},
				{
					"id": 1359,
					"name": "removeAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1360,
							"name": "removeAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the element at the specified position in this list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.removeAt(1)); //[1,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1361,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.removeAt",
								"id": 323
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAt",
								"id": 161
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 104,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.removeAt",
						"id": 323
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAt",
						"id": 160
					}
				},
				{
					"id": 1403,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1404,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1405,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1406,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1407,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1408,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1409,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 1410,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 269
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 269
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeIf",
						"id": 199
					}
				},
				{
					"id": 1362,
					"name": "removeRange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1363,
							"name": "removeRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5,6]\n  console.log(list.removeRange(1,4)); //[1,5,6]\n  //Output: [2,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1364,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1365,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.removeRange",
								"id": 326
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 115,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.removeRange",
						"id": 326
					}
				},
				{
					"id": 1324,
					"name": "replaceAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1325,
							"name": "replaceAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces each element of this list with the result of applying the mapping function",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList contains [1,2,3,4]\n  arrayList.map((x)=>(x*2));\n  //now arrayList contains [2,4,6,8]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1326,
									"name": "mappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1327,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1328,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1329,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 82,
													"character": 23
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.replaceAll",
								"id": 1195
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 82,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.replaceAll",
						"id": 1195
					}
				},
				{
					"id": 1411,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1412,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1413,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 277
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.retainAll",
								"id": 208
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 277
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.retainAll",
						"id": 207
					}
				},
				{
					"id": 1381,
					"name": "reverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1382,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverse the list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5]\n  list.reverse() //now list contains [5,4,3,2,1]\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.reverse",
								"id": 345
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.reverse",
								"id": 179
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 161,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.reverse",
						"id": 345
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.reverse",
						"id": 178
					}
				},
				{
					"id": 1366,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1367,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the element at the specified position in this list with the specified element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.set(1,2.5)); //[1,2.5,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1368,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1369,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.set",
								"id": 330
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.set",
								"id": 164
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 126,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.set",
						"id": 330
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.set",
						"id": 163
					}
				},
				{
					"id": 1414,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1415,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 280
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.size",
								"id": 211
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 280
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.size",
						"id": 210
					}
				},
				{
					"id": 1370,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1371,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts this list according to the compareFn.\ncompareFn is a function which should return a number value (-ve, zero, or +ve).\nx is considered smaller than y if the compareFn(x,y) is negetive",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.sort(function(x,y) {\n    return x-y;\n  }); // [1, 2, 3, 6, 7, 8, 9, 11]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1372,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1373,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1374,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1375,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1376,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-list.ts",
													"line": 141,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.sort",
								"id": 334
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 141,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.sort",
						"id": 334
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.sort",
						"id": 167
					}
				},
				{
					"id": 1377,
					"name": "subList",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1378,
							"name": "subList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.subList(2,7); // returns a list containing [6, 2, 7, 3, 9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1379,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1380,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractList",
								"id": 294,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.subList",
								"id": 341
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.subList",
								"id": 175
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 151,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.subList",
						"id": 341
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.subList",
						"id": 174
					}
				},
				{
					"id": 1416,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1417,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 282
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.toArray",
								"id": 213
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 282
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.toArray",
						"id": 212
					}
				},
				{
					"id": 1334,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1335,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts the arrayList into a JSON String",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList contains [1,2,3,4]\n  console.log(arrayList.toString((x)=>(x.toString())));\n  //Output\n  //\"[1,2,3,4]\"\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1336,
									"name": "serializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1337,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1338,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1339,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/array-list.ts",
													"line": 113,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.toString",
								"id": 1205
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 113,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.toString",
						"id": 1205
					},
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.toString",
						"id": 1157
					}
				},
				{
					"id": 1332,
					"name": "trimToSize",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1333,
							"name": "trimToSize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Trims the capacity of this ArrayList instance to be the list's current size.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //arrayList contains [1,2,3,4,5] and capacity is 10\n  arrayList.trimToSize(); //new capacity is 5\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ArrayList.trimToSize",
								"id": 1203
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/array-list.ts",
							"line": 101,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "ArrayList.trimToSize",
						"id": 1203
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1314
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1313,
						1383
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1301,
						1304,
						1384,
						1310,
						1330,
						1386,
						1389,
						1321,
						1392,
						1418,
						1340,
						1347,
						1350,
						1395,
						1426,
						1353,
						1356,
						1307,
						1397,
						1400,
						1359,
						1403,
						1362,
						1324,
						1411,
						1381,
						1366,
						1414,
						1370,
						1377,
						1416,
						1334,
						1332
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/lists/history-list.ts",
					"line": 6,
					"character": 24
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ArrayList",
					"id": 1170,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "List",
					"id": 134,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 1152,
					"typeArguments": [
						{
							"type": "reference",
							"name": "ArrayList",
							"id": 1170,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "E"
								}
							]
						}
					]
				},
				{
					"type": "reference",
					"name": "Serializable",
					"id": 1156
				}
			]
		},
		{
			"id": 13,
			"name": "Iterator",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Used to iterate over Iterable objects"
			},
			"typeParameter": [
				{
					"id": 14,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 17,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 18,
							"name": "new Iterator",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 19,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13
							}
						},
						{
							"id": 20,
							"name": "new Iterator",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 21,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								},
								{
									"id": 22,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 6,
							"character": 31
						},
						{
							"fileName": "classes/iterator.ts",
							"line": 8,
							"character": 25
						},
						{
							"fileName": "classes/iterator.ts",
							"line": 9,
							"character": 39
						}
					]
				},
				{
					"id": 16,
					"name": "_index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 6,
							"character": 18
						}
					],
					"type": {
						"type": "instrinct",
						"name": "number"
					},
					"defaultValue": "0"
				},
				{
					"id": 15,
					"name": "_target",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 5,
							"character": 19
						}
					],
					"type": {
						"type": "typeParameter",
						"isArray": true,
						"name": "E"
					}
				},
				{
					"id": 23,
					"name": "forEachRemaining",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 24,
							"name": "forEachRemaining",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,2,3,4], iterator pointer after 2\n  iterator.forEachRemaining(function(item, index) {\n    console.log(item*2);\n  });\n  // Output: 6 8\n"
									}
								]
							},
							"parameters": [
								{
									"id": 25,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 26,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 27,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 28,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 29,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "classes/iterator.ts",
													"line": 24,
													"character": 26
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 24,
							"character": 18
						}
					]
				},
				{
					"id": 30,
					"name": "hasNext",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 31,
							"name": "hasNext",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if the iteration has more elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,2,3,4] iterator pointer after 3.\n  if(iterator.hasNext()) console.log(\"Elements remaining\");\n  //Ouput: Elements remaining\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 37,
							"character": 9
						}
					]
				},
				{
					"id": 32,
					"name": "next",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 33,
							"name": "next",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the next element in the iteration.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,25,83,48] iterator pointer after 1.\n  console.log((item = iterator.next());\n  //Output 25\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 48,
							"character": 6
						}
					]
				},
				{
					"id": 34,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 35,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes from the underlying Iterable the last element returned by this iterator.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,25,83,48] iterator pointer after 1.\n  iterator.next() //returns 25\n  iterator.remove(); //removes 25\n  // now target contains [1,83,48]\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 60,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						17
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						16,
						15
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						23,
						30,
						32,
						34
					]
				}
			],
			"sources": [
				{
					"fileName": "classes/iterator.ts",
					"line": 4,
					"character": 21
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "ListIterator",
					"id": 36
				}
			]
		},
		{
			"id": 36,
			"name": "ListIterator",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Iterator modified to iterate over lists"
			},
			"typeParameter": [
				{
					"id": 37,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 59,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 60,
							"name": "new ListIterator",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 61,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterator.__constructor",
								"id": 17
							}
						},
						{
							"id": 62,
							"name": "new ListIterator",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 63,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								},
								{
									"id": 64,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterator.__constructor",
								"id": 17
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 6,
							"character": 31
						},
						{
							"fileName": "classes/iterator.ts",
							"line": 8,
							"character": 25
						},
						{
							"fileName": "classes/iterator.ts",
							"line": 9,
							"character": 39
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterator.__constructor",
						"id": 17
					}
				},
				{
					"id": 58,
					"name": "_index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 6,
							"character": 18
						}
					],
					"type": {
						"type": "instrinct",
						"name": "number"
					},
					"defaultValue": "0",
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterator._index",
						"id": 16
					}
				},
				{
					"id": 57,
					"name": "_target",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 5,
							"character": 19
						}
					],
					"type": {
						"type": "typeParameter",
						"isArray": true,
						"name": "E"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterator._target",
						"id": 15
					}
				},
				{
					"id": 38,
					"name": "lastIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 6,
							"character": 21
						}
					],
					"type": {
						"type": "instrinct",
						"name": "number"
					},
					"defaultValue": "-1"
				},
				{
					"id": 39,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 40,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts the specified element into the list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 11 and 26\n  iterator.add(25);\n  //new list contains [1,5,11,25,26]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 41,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 15,
							"character": 5
						}
					]
				},
				{
					"id": 65,
					"name": "forEachRemaining",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 66,
							"name": "forEachRemaining",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,2,3,4], iterator pointer after 2\n  iterator.forEachRemaining(function(item, index) {\n    console.log(item*2);\n  });\n  // Output: 6 8\n"
									}
								]
							},
							"parameters": [
								{
									"id": 67,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 68,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 69,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 70,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 71,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "classes/iterator.ts",
													"line": 24,
													"character": 26
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterator.forEachRemaining",
								"id": 23
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 24,
							"character": 18
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterator.forEachRemaining",
						"id": 23
					}
				},
				{
					"id": 72,
					"name": "hasNext",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 73,
							"name": "hasNext",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if the iteration has more elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,2,3,4] iterator pointer after 3.\n  if(iterator.hasNext()) console.log(\"Elements remaining\");\n  //Ouput: Elements remaining\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterator.hasNext",
								"id": 30
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/iterator.ts",
							"line": 37,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterator.hasNext",
						"id": 30
					}
				},
				{
					"id": 44,
					"name": "hasPrevious",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 45,
							"name": "hasPrevious",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this list iterator has more elements when traversing the list in the reverse direction.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer before 1\n  console.log(iterator.hasPrevious());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 42,
							"character": 13
						}
					]
				},
				{
					"id": 42,
					"name": "next",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 43,
							"name": "next",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the next element in the iteration.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 5 and 11\n  console.log(iterator.next());\n  //Output: 11\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterator.next",
								"id": 32
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 27,
							"character": 6
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterator.next",
						"id": 32
					}
				},
				{
					"id": 48,
					"name": "nextIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 49,
							"name": "nextIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of the element that would be returned by a subsequent call to next().",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 11 and 26\n  console.log(iterator.nextIndex());\n  //Output: 3\n  iterator.next();\n  console.log(iterator.nextIndex());\n  //Output: -1\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 71,
							"character": 11
						}
					]
				},
				{
					"id": 46,
					"name": "previous",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 47,
							"name": "previous",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the previous element in the list and moves the cursor position backwards.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 11 and 26\n  console.log(iterator.previous());\n  //Output: 11\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 53,
							"character": 10
						}
					]
				},
				{
					"id": 50,
					"name": "previousIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 51,
							"name": "previousIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of the element that would be returned by a subsequent call to previous().",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 11 and 26\n  console.log(iterator.previousIndex());\n  //Output: 2\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 82,
							"character": 15
						}
					]
				},
				{
					"id": 55,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 56,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes from the underlying Iterable the last element returned by this iterator.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 5 and 11\n  iterator.previous(); //returns 5\n  iterator.remove(); //removes 5\n  //now target contains [1,11,26]\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterator.remove",
								"id": 34
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 108,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterator.remove",
						"id": 34
					}
				},
				{
					"id": 52,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 53,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the last element returned by next() or previous() with the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //target contains [1,5,11,26] and iterator pointer between 5 and 11\n  iterator.next(); //returns 11\n  iterator.set(15);\n  //now target contains [1,5,15,26]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 54,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "classes/list-iterator.ts",
							"line": 94,
							"character": 5
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						59
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						58,
						57,
						38
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						39,
						65,
						72,
						44,
						42,
						48,
						46,
						50,
						55,
						52
					]
				}
			],
			"sources": [
				{
					"fileName": "classes/list-iterator.ts",
					"line": 4,
					"character": 25
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Iterator",
					"id": 13,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			]
		},
		{
			"id": 1792,
			"name": "PriorityQueue",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An unbounded priority queue. The elements of the priority queue are ordered according to the compare function provided at queue construction time."
			},
			"typeParameter": [
				{
					"id": 1793,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1799,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1800,
							"name": "new PriorityQueue",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1801,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1802,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1803,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1804,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1805,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/queues/priority-queue.ts",
													"line": 10,
													"character": 26
												}
											]
										}
									}
								},
								{
									"id": 1806,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "PriorityQueue",
								"id": 1792
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.__constructor",
								"id": 241
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 8,
							"character": 44
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.__constructor",
						"id": 241
					}
				},
				{
					"id": 1794,
					"name": "_comparator",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 8,
							"character": 25
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1795,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1796,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1797,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										},
										{
											"id": 1798,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "ds/queues/priority-queue.ts",
									"line": 8,
									"character": 26
								}
							]
						}
					}
				},
				{
					"id": 1836,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "typeParameter",
						"isArray": true,
						"name": "E"
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 240
					}
				},
				{
					"id": 1807,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1808,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts the specified item into this priority queue.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue containes [1,8,12] (compareFn designed for ascending order)\n  queue.add(6); //[1,6,8,12]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1809,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 244
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.add",
								"id": 857
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 22,
							"character": 7
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.add",
						"id": 244
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.add",
						"id": 856
					}
				},
				{
					"id": 1810,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1811,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts all items of an array into this priority queue.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue containes [1,8,12] (compareFn designed for ascending order)\n  queue.addAll([6,10,15]); //[1,6,8,10,12,15]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1812,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 247
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.addAll",
								"id": 864
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 32,
							"character": 10
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.addAll",
						"id": 247
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.addAll",
						"id": 863
					}
				},
				{
					"id": 1837,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1838,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 250
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.clear",
								"id": 867
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 250
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.clear",
						"id": 866
					}
				},
				{
					"id": 1813,
					"name": "comparator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1814,
							"name": "comparator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the compare function used to order the elements in this queue.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  queue.comparator(); //returns a function\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1815,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1816,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1817,
													"name": "x",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												},
												{
													"id": 1818,
													"name": "y",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "ds/queues/priority-queue.ts",
											"line": 41,
											"character": 17
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 41,
							"character": 14
						}
					]
				},
				{
					"id": 1839,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1840,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1841,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 252
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.contains",
								"id": 869
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 252
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.contains",
						"id": 868
					}
				},
				{
					"id": 1842,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1843,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1844,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 255
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.containsAll",
								"id": 872
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 255
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.containsAll",
						"id": 871
					}
				},
				{
					"id": 1832,
					"name": "element",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1833,
							"name": "element",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves, but does not remove, the head of this queue",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue has elements [1,2,3,4]\n  console.log(queue.element());\n  //Output: 1\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractQueue.element",
								"id": 912
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.element",
								"id": 860
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-queue.ts",
							"line": 15,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractQueue.element",
						"id": 912
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.element",
						"id": 859
					}
				},
				{
					"id": 1845,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1846,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1847,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 258
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.equals",
								"id": 875
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 258
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.equals",
						"id": 874
					}
				},
				{
					"id": 1871,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1872,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1873,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1874,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1875,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1876,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1877,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 1878,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 284
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 284
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.forEach",
						"id": 900
					}
				},
				{
					"id": 1825,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1826,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the Object from the JSON string",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //json = \"[1,2,3,4]\"\n  queue = new PriorityQueue<number>((x,y)=>(x-y)).fromString(json,(x)=>(parseFloat(x)));\n  //queue contains [1,2,3,4]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1827,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1828,
									"name": "deserializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1829,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1830,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1831,
															"name": "itemJSON",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/queues/priority-queue.ts",
													"line": 67,
													"character": 43
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "PriorityQueue",
								"id": 1792,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 67,
							"character": 14
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.fromString",
						"id": 1163
					}
				},
				{
					"id": 1848,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1849,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 261
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.isEmpty",
								"id": 878
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 261
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.isEmpty",
						"id": 877
					}
				},
				{
					"id": 1879,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1880,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 292
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.iterator",
								"id": 909
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 292
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.iterator",
						"id": 908
					}
				},
				{
					"id": 1834,
					"name": "poll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1835,
							"name": "poll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves and removes the head of this queue.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue has elements [1,2,3,4]\n  console.log(queue.element());\n  //Output: 1 and queue now has elements [2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractQueue.poll",
								"id": 914
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.poll",
								"id": 862
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-queue.ts",
							"line": 26,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractQueue.poll",
						"id": 914
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.poll",
						"id": 861
					}
				},
				{
					"id": 1850,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1851,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1852,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 263
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.remove",
								"id": 880
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 263
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.remove",
						"id": 879
					}
				},
				{
					"id": 1853,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1854,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1855,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 266
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.removeAll",
								"id": 883
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 266
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.removeAll",
						"id": 882
					}
				},
				{
					"id": 1856,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1857,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1858,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1859,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1860,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1861,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1862,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 1863,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 269
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 269
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.removeIf",
						"id": 885
					}
				},
				{
					"id": 1864,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1865,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1866,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 277
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.retainAll",
								"id": 894
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 277
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.retainAll",
						"id": 893
					}
				},
				{
					"id": 1867,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1868,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 280
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.size",
								"id": 897
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 280
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.size",
						"id": 896
					}
				},
				{
					"id": 1869,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1870,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 282
							},
							"implementationOf": {
								"type": "reference",
								"name": "Queue.toArray",
								"id": 899
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 282
					},
					"implementationOf": {
						"type": "reference",
						"name": "Queue.toArray",
						"id": 898
					}
				},
				{
					"id": 1819,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1820,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts the queue into a JSON String",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //queue contains [1,2,3,4]\n  console.log(queue.toString((x)=>(x.toString())));\n  //Output\n  //[1,2,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1821,
									"name": "serializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1822,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1823,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1824,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/queues/priority-queue.ts",
													"line": 53,
													"character": 26
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/queues/priority-queue.ts",
							"line": 53,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.toString",
						"id": 1157
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1799
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1794,
						1836
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1807,
						1810,
						1837,
						1813,
						1839,
						1842,
						1832,
						1845,
						1871,
						1825,
						1848,
						1879,
						1834,
						1850,
						1853,
						1856,
						1864,
						1867,
						1869,
						1819
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/queues/priority-queue.ts",
					"line": 7,
					"character": 26
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractQueue",
					"id": 910,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Queue",
					"id": 854,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Serializable",
					"id": 1156
				}
			]
		},
		{
			"id": 1881,
			"name": "Stack",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Create a Stack (LIFO) datastructure."
			},
			"typeParameter": [
				{
					"id": 1882,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1884,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1885,
							"name": "new Stack",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1886,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Stack",
								"id": 1881
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 4,
							"character": 21
						}
					]
				},
				{
					"id": 1883,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 4,
							"character": 16
						}
					],
					"type": {
						"type": "typeParameter",
						"isArray": true,
						"name": "T"
					}
				},
				{
					"id": 1887,
					"name": "height",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Number of elements in stack",
						"tags": [
							{
								"tag": "example",
								"text": "\n  //stack contains [1,2,3,4]\n  console.log(stack.height);\n  //Output: 4\n"
							}
						]
					},
					"getSignature": [
						{
							"id": 1888,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"comment": {
								"shortText": "Number of elements in stack",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //stack contains [1,2,3,4]\n  console.log(stack.height);\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 17,
							"character": 12
						}
					]
				},
				{
					"id": 1894,
					"name": "peek",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1895,
							"name": "peek",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return top of the stack (does not pop)",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //stack contains [1,2,3,4,5,6]\n  console.log(stack.peek());\n  //Output: 6 (stack does not change)\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "T"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 53,
							"character": 6
						}
					]
				},
				{
					"id": 1892,
					"name": "pop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1893,
							"name": "pop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Pop top of the stack and return",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //stack contains [1,2,3,4,5,6,7]\n  console.log(stack.pop());\n  //Output: 7\n  //now stack contains [1,2,3,4,5,6]\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "T"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 42,
							"character": 5
						}
					]
				},
				{
					"id": 1889,
					"name": "push",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1890,
							"name": "push",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Push item/items to the top of the stack",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //stack contains [1,2,3,4]\n  stack.push(5);\n  //now stack contains [1,2,3,4,5]\n  stack.push(6,7);\n  //now stack contains [1,2,3,4,5,6,7]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1891,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 30,
							"character": 6
						}
					]
				},
				{
					"id": 1896,
					"name": "search",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1897,
							"name": "search",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return first index (from top of the stack) of an item in stack",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //stack contains [1,2,3,4,3,5]\n  console.log(stack.search(3));\n  //Output: 4\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1898,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/stack.ts",
							"line": 64,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1884
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1883
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						1887
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1894,
						1892,
						1889,
						1896
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/stack.ts",
					"line": 3,
					"character": 18
				}
			]
		},
		{
			"id": 1428,
			"name": "SwappableList",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 1429,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1458,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1459,
							"name": "new SwappableList",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1460,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SwappableList",
								"id": 1428
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.__constructor",
								"id": 241
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.__constructor",
								"id": 296
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 8,
							"character": 78
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.__constructor",
						"id": 241
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.__constructor",
						"id": 296
					}
				},
				{
					"id": 1509,
					"name": "_store",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 8,
							"character": 18
						}
					],
					"type": {
						"type": "typeParameter",
						"isArray": true,
						"name": "E"
					},
					"defaultValue": " []",
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection._store",
						"id": 240
					}
				},
				{
					"id": 1461,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1462,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends the specified element to the end of this list"
							},
							"parameters": [
								{
									"id": 1463,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 244
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.add",
								"id": 299
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 137
							}
						},
						{
							"id": 1464,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts the specified element at the specified position in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  list.add(4); //[1,2,3,4]\n  list.add(2.5,2); //[1,2,2.5,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1465,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 1466,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.add",
								"id": 244
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.add",
								"id": 299
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.add",
								"id": 139
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 17,
							"character": 5
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 25,
							"character": 5
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 26,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.add",
						"id": 244
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.add",
						"id": 299
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.add",
						"id": 136
					}
				},
				{
					"id": 1467,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1468,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends all of the elements in the specified array to the end of this list"
							},
							"parameters": [
								{
									"id": 1469,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 247
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.addAll",
								"id": 305
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 143
							}
						},
						{
							"id": 1470,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts all of the elements in the specified array into this list at the specified position.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  list.addAll([4,5]); //[1,2,3,4,5]\n  list.addAll([2.1,2.2,2.3], 2); //[1,2,2.1,2.2,2.3,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1471,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								},
								{
									"id": 1472,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "AbstractCollection.addAll",
								"id": 247
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.addAll",
								"id": 305
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.addAll",
								"id": 145
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 38,
							"character": 8
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 46,
							"character": 8
						},
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 47,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "AbstractCollection.addAll",
						"id": 247
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.addAll",
						"id": 305
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.addAll",
						"id": 142
					}
				},
				{
					"id": 1510,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1511,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all the elements",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.clear();\n  //now collection contains []\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.clear",
								"id": 250
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.clear",
								"id": 181
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 47,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.clear",
						"id": 250
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.clear",
						"id": 180
					}
				},
				{
					"id": 1443,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1444,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a shallow copy of this ArrayList instance.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  let newList = swappableList.clone();\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "SwappableList",
								"id": 1428,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "Cloneable.clone",
								"id": 1155
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 70,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Cloneable.clone",
						"id": 1154
					}
				},
				{
					"id": 1512,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1513,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains(3));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1514,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.contains",
								"id": 252
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.contains",
								"id": 183
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 58,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.contains",
						"id": 252
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.contains",
						"id": 182
					}
				},
				{
					"id": 1515,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1516,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.contains([1,2,4]));\n  //Output: false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1517,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.containsAll",
								"id": 255
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.containsAll",
								"id": 186
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 71,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.containsAll",
						"id": 255
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.containsAll",
						"id": 185
					}
				},
				{
					"id": 1518,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1519,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection1 contains [1,2,3] and collection2 contains [1,2,3]\n  console.log(collection1.equals(collection2));\n  //Output: true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1520,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.equals",
								"id": 258
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.equals",
								"id": 189
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 85,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.equals",
						"id": 258
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.equals",
						"id": 188
					}
				},
				{
					"id": 1437,
					"name": "fall",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1438,
							"name": "fall",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Swap between item in the given index and the item just after it.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  ////list contains [1,2,3,4]\n  list.fall(2); //returns true\n  //now list contains [1,2,4,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1439,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 43,
							"character": 6
						}
					]
				},
				{
					"id": 1544,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1545,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.forEach(function(item) {\n    console.log(item * 4);\n  });\n  //Output: 4 8 12 16\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1546,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1547,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1548,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1549,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1550,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 1551,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 198,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.forEach",
								"id": 284
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 198,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.forEach",
						"id": 284
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.forEach",
						"id": 214
					}
				},
				{
					"id": 1451,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1452,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the Object from the JSON string",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //json = \"[1,2,3,4]\"\n  list = new SwappableList<number>().fromString(json,(x)=>(parseFloat(x)));\n  //list contains [1,2,3,4]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1453,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1454,
									"name": "deserializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1455,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1456,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1457,
															"name": "itemJ",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/swappable-list.ts",
													"line": 96,
													"character": 41
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SwappableList",
								"id": 1428,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 96,
							"character": 12
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.fromString",
						"id": 1163
					}
				},
				{
					"id": 1473,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1474,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an item from the list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.get(2));\n  //Output: 3\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1475,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.get",
								"id": 311
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.get",
								"id": 149
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 63,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.get",
						"id": 311
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.get",
						"id": 148
					}
				},
				{
					"id": 1476,
					"name": "indexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1477,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,2,4]\n  console.log(list.indexOf(2));\n  //Output: 1\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1478,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.indexOf",
								"id": 314
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.indexOf",
								"id": 152
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 74,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.indexOf",
						"id": 314
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.indexOf",
						"id": 151
					}
				},
				{
					"id": 1521,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1522,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  console.log(collection.isEmpty());\n  //Output: false\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.isEmpty",
								"id": 261
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.isEmpty",
								"id": 192
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 106,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.isEmpty",
						"id": 261
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.isEmpty",
						"id": 191
					}
				},
				{
					"id": 1552,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1553,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an iterator for the collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var iterator = collection.iterator(); //returns an Iterator for the collection\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.iterator",
								"id": 292
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.iterator",
								"id": 223
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 209,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.iterator",
						"id": 292
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.iterator",
						"id": 222
					}
				},
				{
					"id": 1479,
					"name": "lastIndexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1480,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the index of last occurrence of the element.\n  //list contains [1,2,3,2,4]\n  console.log(list.lastIndexOf(2));\n  //Output: 3"
							},
							"parameters": [
								{
									"id": 1481,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.lastIndexOf",
								"id": 317
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.lastIndexOf",
								"id": 155
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 84,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.lastIndexOf",
						"id": 317
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.lastIndexOf",
						"id": 154
					}
				},
				{
					"id": 1482,
					"name": "listIterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1483,
							"name": "listIterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list iterator over the elements in this list",
								"tags": [
									{
										"tag": "example",
										"text": "\n  var listIterator = list.listIterator(); //starts at index 0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1484,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.listIterator",
								"id": 320
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.listIterator",
								"id": 158
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 93,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.listIterator",
						"id": 320
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.listIterator",
						"id": 157
					}
				},
				{
					"id": 1523,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1524,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3]\n  collection.remove(3);\n  //now collection contains [1,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1525,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.remove",
								"id": 263
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.remove",
								"id": 194
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 117,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.remove",
						"id": 263
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.remove",
						"id": 193
					}
				},
				{
					"id": 1526,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1527,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.removeAll([1,3,5,7]);\n  //now collection contains [2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1528,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeAll",
								"id": 266
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAll",
								"id": 197
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 129,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeAll",
						"id": 266
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAll",
						"id": 196
					}
				},
				{
					"id": 1485,
					"name": "removeAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1486,
							"name": "removeAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the element at the specified position in this list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.removeAt(1)); //[1,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1487,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.removeAt",
								"id": 323
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.removeAt",
								"id": 161
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 104,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.removeAt",
						"id": 323
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeAt",
						"id": 160
					}
				},
				{
					"id": 1529,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1530,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function.",
								"tags": [
									{
										"tag": "example",
										"text": "\n//collection contains [1,2,3,4,5,6,7,8,9]\ncollection.removeIf(function(x) {\n  return (x%2==0);\n}); //removing even numbers\n//now collection contains [1,3,5,7,9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1531,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1532,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1533,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1534,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1535,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 1536,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-collection.ts",
													"line": 146,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.removeIf",
								"id": 269
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 146,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.removeIf",
						"id": 269
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.removeIf",
						"id": 199
					}
				},
				{
					"id": 1488,
					"name": "removeRange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1489,
							"name": "removeRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5,6]\n  console.log(list.removeRange(1,4)); //[1,5,6]\n  //Output: [2,3,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1490,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1491,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.removeRange",
								"id": 326
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 115,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.removeRange",
						"id": 326
					}
				},
				{
					"id": 1537,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1538,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  collection.retainAll([1,3,5,7]);\n  //now collection contains [1,3]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1539,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.retainAll",
								"id": 277
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.retainAll",
								"id": 208
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 163,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.retainAll",
						"id": 277
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.retainAll",
						"id": 207
					}
				},
				{
					"id": 1507,
					"name": "reverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1508,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverse the list.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4,5]\n  list.reverse() //now list contains [5,4,3,2,1]\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.reverse",
								"id": 345
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.reverse",
								"id": 179
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 161,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.reverse",
						"id": 345
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.reverse",
						"id": 178
					}
				},
				{
					"id": 1434,
					"name": "rise",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1435,
							"name": "rise",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Swap between item in the given index and the item just before it.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  ////list contains [1,2,3,4]\n  list.rise(2); //returns true\n  //now list contains [1,3,2,4]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1436,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 32,
							"character": 6
						}
					]
				},
				{
					"id": 1440,
					"name": "rotate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1441,
							"name": "rotate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rotate the list based on the direction specified (-ve : left, +ve/0 : right);",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4]\n  list.rotate(-1); //returns true\n  //now list contains [2,3,4,1]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1442,
									"name": "direction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 54,
							"character": 8
						}
					]
				},
				{
					"id": 1492,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1493,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the element at the specified position in this list with the specified element",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3]\n  console.log(list.set(1,2.5)); //[1,2.5,3]\n  //Output: 2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1494,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1495,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.set",
								"id": 330
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.set",
								"id": 164
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 126,
							"character": 5
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.set",
						"id": 330
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.set",
						"id": 163
					}
				},
				{
					"id": 1540,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1541,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.size());\n  //Output: 4\n"
									}
								]
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.size",
								"id": 280
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.size",
								"id": 211
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 174,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.size",
						"id": 280
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.size",
						"id": 210
					}
				},
				{
					"id": 1496,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1497,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts this list according to the compareFn.\ncompareFn is a function which should return a number value (-ve, zero, or +ve).\nx is considered smaller than y if the compareFn(x,y) is negetive",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.sort(function(x,y) {\n    return x-y;\n  }); // [1, 2, 3, 6, 7, 8, 9, 11]\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1498,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1499,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1500,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1501,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1502,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/abstract/abstract-list.ts",
													"line": 141,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.sort",
								"id": 334
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 141,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.sort",
						"id": 334
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.sort",
						"id": 167
					}
				},
				{
					"id": 1503,
					"name": "subList",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1504,
							"name": "subList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,8,6,2,7,3,9,11]\n  list.subList(2,7); // returns a list containing [6, 2, 7, 3, 9]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1505,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1506,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AbstractList",
								"id": 294,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractList.subList",
								"id": 341
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.subList",
								"id": 175
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-list.ts",
							"line": 151,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractList.subList",
						"id": 341
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.subList",
						"id": 174
					}
				},
				{
					"id": 1430,
					"name": "swap",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1431,
							"name": "swap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Swap between items of given indexes. Returns true on success else false.",
								"tags": [
									{
										"tag": "example",
										"text": "\n  ////list contains [1,2,3,4]\n  list.swap(1,3); //returns true\n  //now list contains [1,4,3,2]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1432,
									"name": "sourceIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1433,
									"name": "destinationIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 14,
							"character": 6
						}
					]
				},
				{
					"id": 1542,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1543,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //collection contains [1,2,3,4]\n  console.log(collection.toArray());\n  //Output: [1,2,3,4]\n"
									}
								]
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AbstractCollection.toArray",
								"id": 282
							},
							"implementationOf": {
								"type": "reference",
								"name": "List.toArray",
								"id": 213
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/abstract/abstract-collection.ts",
							"line": 185,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "AbstractCollection.toArray",
						"id": 282
					},
					"implementationOf": {
						"type": "reference",
						"name": "List.toArray",
						"id": 212
					}
				},
				{
					"id": 1445,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1446,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts the list into a JSON String",
								"tags": [
									{
										"tag": "example",
										"text": "\n  //list contains [1,2,3,4]\n  console.log(list.toString((x)=>(x.toString())));\n  //Output\n  //\"[1,2,3,4]\"\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1447,
									"name": "serializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1448,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1449,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1450,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "ds/lists/swappable-list.ts",
													"line": 82,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "ds/lists/swappable-list.ts",
							"line": 82,
							"character": 10
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "Serializable.toString",
						"id": 1157
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1458
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1509
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1461,
						1467,
						1510,
						1443,
						1512,
						1515,
						1518,
						1437,
						1544,
						1451,
						1473,
						1476,
						1521,
						1552,
						1479,
						1482,
						1523,
						1526,
						1485,
						1529,
						1488,
						1537,
						1507,
						1434,
						1440,
						1492,
						1540,
						1496,
						1503,
						1430,
						1542,
						1445
					]
				}
			],
			"sources": [
				{
					"fileName": "ds/lists/swappable-list.ts",
					"line": 5,
					"character": 26
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AbstractList",
					"id": 294,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "List",
					"id": 134,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				},
				{
					"type": "reference",
					"name": "Cloneable",
					"id": 1152,
					"typeArguments": [
						{
							"type": "reference",
							"name": "SwappableList",
							"id": 1428,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "E"
								}
							]
						}
					]
				},
				{
					"type": "reference",
					"name": "Serializable",
					"id": 1156
				}
			]
		},
		{
			"id": 590,
			"name": "Vertex",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A Vertex in graph datastructure."
			},
			"typeParameter": [
				{
					"id": 591,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 593,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 594,
							"name": "new Vertex",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 595,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Vertex",
								"id": 590
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 7,
							"character": 10
						}
					]
				},
				{
					"id": 592,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 7,
							"character": 7
						}
					],
					"type": {
						"type": "typeParameter",
						"name": "E"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						593
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						592
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/graph.ts",
					"line": 6,
					"character": 19
				}
			]
		},
		{
			"id": 224,
			"name": "BinaryTree",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A data structure in which a record is linked to two successor records, usually referred to as the left branch when greater and the right when less than the previous record."
			},
			"typeParameter": [
				{
					"id": 225,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 229,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 230,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an item from the tree."
							},
							"parameters": [
								{
									"id": 231,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Tree.delete",
								"id": 79
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/binary-tree.ts",
							"line": 15,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Tree.delete",
						"id": 79
					}
				},
				{
					"id": 232,
					"name": "inorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 233,
							"name": "inorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after inorder traversal of the tree."
							},
							"type": {
								"type": "reference",
								"name": "List",
								"id": 134,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/binary-tree.ts",
							"line": 19,
							"character": 9
						}
					]
				},
				{
					"id": 226,
					"name": "insert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 227,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert a new item to the tree."
							},
							"parameters": [
								{
									"id": 228,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Tree.insert",
								"id": 76
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/binary-tree.ts",
							"line": 11,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Tree.insert",
						"id": 76
					}
				},
				{
					"id": 236,
					"name": "postorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 237,
							"name": "postorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after postorder traversal of the tree."
							},
							"type": {
								"type": "reference",
								"name": "List",
								"id": 134,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/binary-tree.ts",
							"line": 27,
							"character": 11
						}
					]
				},
				{
					"id": 234,
					"name": "preorder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 235,
							"name": "preorder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of items obtained after preorder traversal of the tree."
							},
							"type": {
								"type": "reference",
								"name": "List",
								"id": 134,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/binary-tree.ts",
							"line": 23,
							"character": 10
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						229,
						232,
						226,
						236,
						234
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/binary-tree.ts",
					"line": 7,
					"character": 27
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Tree",
					"id": 74,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractBinaryTree",
					"id": 404
				},
				{
					"type": "reference",
					"name": "BinarySearchTree",
					"id": 1899
				}
			]
		},
		{
			"id": 1152,
			"name": "Cloneable",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Classes that implements this interface must have a clone method."
			},
			"typeParameter": [
				{
					"id": 1153,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 1154,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1155,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "create a copy of the current object and return"
							},
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/cloneable.ts",
							"line": 6,
							"character": 7
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1154
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/cloneable.ts",
					"line": 2,
					"character": 26
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "ArrayList",
					"id": 1170
				},
				{
					"type": "reference",
					"name": "ArrayMap",
					"id": 1554
				},
				{
					"type": "reference",
					"name": "Dictionary",
					"id": 1669
				},
				{
					"type": "reference",
					"name": "HistoryList",
					"id": 1299
				},
				{
					"type": "reference",
					"name": "SwappableList",
					"id": 1428
				}
			]
		},
		{
			"id": 82,
			"name": "Collection",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Collection is a set of elements of same type."
			},
			"typeParameter": [
				{
					"id": 83,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 84,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 85,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add an item to collection"
							},
							"parameters": [
								{
									"id": 86,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 9,
							"character": 5
						}
					]
				},
				{
					"id": 87,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 88,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all items of an array to collection"
							},
							"parameters": [
								{
									"id": 89,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 13,
							"character": 8
						}
					]
				},
				{
					"id": 90,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 91,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements from this collection"
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 17,
							"character": 7
						}
					]
				},
				{
					"id": 92,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 93,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element."
							},
							"parameters": [
								{
									"id": 94,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 21,
							"character": 10
						}
					]
				},
				{
					"id": 95,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 96,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array."
							},
							"parameters": [
								{
									"id": 97,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 25,
							"character": 13
						}
					]
				},
				{
					"id": 98,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 99,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality."
							},
							"parameters": [
								{
									"id": 100,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 29,
							"character": 8
						}
					]
				},
				{
					"id": 124,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 125,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection."
							},
							"parameters": [
								{
									"id": 126,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 127,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 128,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 129,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														},
														{
															"id": 130,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 131,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 61,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterable.forEach",
								"id": 3
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 61,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterable.forEach",
						"id": 3
					}
				},
				{
					"id": 101,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 102,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements."
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 33,
							"character": 9
						}
					]
				},
				{
					"id": 132,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 133,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return iterator for this object"
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterable.iterator",
								"id": 11
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 12,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterable.iterator",
						"id": 11
					}
				},
				{
					"id": 103,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 104,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present"
							},
							"parameters": [
								{
									"id": 105,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 37,
							"character": 8
						}
					]
				},
				{
					"id": 106,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 107,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array."
							},
							"parameters": [
								{
									"id": 108,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 41,
							"character": 11
						}
					]
				},
				{
					"id": 109,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 110,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function."
							},
							"parameters": [
								{
									"id": 111,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 112,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 113,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 114,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														},
														{
															"id": 115,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 116,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 45,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 45,
							"character": 10
						}
					]
				},
				{
					"id": 117,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 118,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array."
							},
							"parameters": [
								{
									"id": 119,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 49,
							"character": 11
						}
					]
				},
				{
					"id": 120,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 121,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection."
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 53,
							"character": 6
						}
					]
				},
				{
					"id": 122,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 123,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection"
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "T"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 57,
							"character": 9
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						84,
						87,
						90,
						92,
						95,
						98,
						124,
						101,
						132,
						103,
						106,
						109,
						117,
						120,
						122
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/collection.ts",
					"line": 5,
					"character": 27
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Iterable",
					"id": 1,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "T"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "List",
					"id": 134
				},
				{
					"type": "reference",
					"name": "Set",
					"id": 425
				},
				{
					"type": "reference",
					"name": "Queue",
					"id": 854
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractCollection",
					"id": 238
				},
				{
					"type": "reference",
					"name": "AbstractList",
					"id": 294
				},
				{
					"type": "reference",
					"name": "AbstractQueue",
					"id": 910
				},
				{
					"type": "reference",
					"name": "AbstractSet",
					"id": 641
				},
				{
					"type": "reference",
					"name": "AbstractSortedSet",
					"id": 1054
				},
				{
					"type": "reference",
					"name": "ArrayList",
					"id": 1170
				},
				{
					"type": "reference",
					"name": "HistoryList",
					"id": 1299
				},
				{
					"type": "reference",
					"name": "PriorityQueue",
					"id": 1792
				},
				{
					"type": "reference",
					"name": "SwappableList",
					"id": 1428
				}
			]
		},
		{
			"id": 604,
			"name": "Graph",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A graph is a pictorial representation of a set of objects where some pairs of objects are connected by links.\nThe interconnected objects are represented by points termed as vertices, and the links that connect the vertices are called edges."
			},
			"typeParameter": [
				{
					"id": 605,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 606,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 607,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add a new vertex with the specified label to this graph."
							},
							"parameters": [
								{
									"id": 608,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 30,
							"character": 5
						}
					]
				},
				{
					"id": 609,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 610,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add new vertices with the labels present in the specified array."
							},
							"parameters": [
								{
									"id": 611,
									"name": "labels",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 34,
							"character": 8
						}
					]
				},
				{
					"id": 628,
					"name": "addEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 629,
							"name": "addEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add the specified edge to the graph. The start and end vertices are added automatically to the graph if not present."
							},
							"parameters": [
								{
									"id": 630,
									"name": "edge",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Edge",
										"id": 596,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 58,
							"character": 9
						}
					]
				},
				{
					"id": 612,
					"name": "addVertex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 613,
							"name": "addVertex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add the specified vertex to the graph."
							},
							"parameters": [
								{
									"id": 614,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 590,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 38,
							"character": 11
						}
					]
				},
				{
					"id": 615,
					"name": "addVertices",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 616,
							"name": "addVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all vertices in the specified array to the graph."
							},
							"parameters": [
								{
									"id": 617,
									"name": "vertices",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"isArray": true,
										"name": "Vertex",
										"id": 590,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 42,
							"character": 13
						}
					]
				},
				{
					"id": 638,
					"name": "adjacentEdges",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 639,
							"name": "adjacentEdges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of edges starting from specified vertex."
							},
							"parameters": [
								{
									"id": 640,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 590,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Set",
										"id": 425,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Edge",
												"id": 596,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											}
										]
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 74,
							"character": 15
						}
					]
				},
				{
					"id": 624,
					"name": "createEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 625,
							"name": "createEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create vertices from the given labels and an edge connecting them and add it to the graph."
							},
							"parameters": [
								{
									"id": 626,
									"name": "startLabel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 627,
									"name": "endLabel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 54,
							"character": 12
						}
					]
				},
				{
					"id": 636,
					"name": "edgeSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 637,
							"name": "edgeSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of edges present in the graph."
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Edge",
										"id": 596,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 70,
							"character": 9
						}
					]
				},
				{
					"id": 618,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 619,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove a single vertex with the specified label from the graph."
							},
							"parameters": [
								{
									"id": 620,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 46,
							"character": 8
						}
					]
				},
				{
					"id": 631,
					"name": "removeEdge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 632,
							"name": "removeEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove the specified edge from the graph."
							},
							"parameters": [
								{
									"id": 633,
									"name": "edge",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Edge",
										"id": 596,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 62,
							"character": 12
						}
					]
				},
				{
					"id": 621,
					"name": "removeVertex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 622,
							"name": "removeVertex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove the specified vertex from the graph."
							},
							"parameters": [
								{
									"id": 623,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vertex",
										"id": 590,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 50,
							"character": 14
						}
					]
				},
				{
					"id": 634,
					"name": "vertexSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 635,
							"name": "vertexSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the set of vertices present in the graph."
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Vertex",
										"id": 590,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/graph.ts",
							"line": 66,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						606,
						609,
						628,
						612,
						615,
						638,
						624,
						636,
						618,
						631,
						621,
						634
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/graph.ts",
					"line": 26,
					"character": 22
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractGraph",
					"id": 812
				}
			]
		},
		{
			"id": 1,
			"name": "Iterable",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Anything whose elements can be iterated over."
			},
			"typeParameter": [
				{
					"id": 2,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 3,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Do an action for each item in this object"
							},
							"parameters": [
								{
									"id": 5,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 7,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 8,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														},
														{
															"id": 9,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 10,
															"name": "iterable",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Iterable",
																"id": 1,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/iterable.ts",
													"line": 8,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 8,
							"character": 9
						}
					]
				},
				{
					"id": 11,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 12,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return iterator for this object"
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 12,
							"character": 10
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3,
						11
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/iterable.ts",
					"line": 4,
					"character": 25
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82
				}
			]
		},
		{
			"id": 134,
			"name": "List",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Sub interface of Collection. List has much more functionalities than a collection."
			},
			"typeParameter": [
				{
					"id": 135,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 136,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 137,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends the specified element to the end of this list"
							},
							"parameters": [
								{
									"id": 138,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.add",
								"id": 84
							}
						},
						{
							"id": 139,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts the specified element at the specified position in this list"
							},
							"parameters": [
								{
									"id": 140,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 141,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.add",
								"id": 84
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 11,
							"character": 5
						},
						{
							"fileName": "interfaces/list.ts",
							"line": 15,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Collection.add",
						"id": 84
					}
				},
				{
					"id": 142,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 143,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Appends all of the elements in the specified array to the end of this list"
							},
							"parameters": [
								{
									"id": 144,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.addAll",
								"id": 87
							}
						},
						{
							"id": 145,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Inserts all of the elements in the specified array into this list at the specified position."
							},
							"parameters": [
								{
									"id": 146,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								},
								{
									"id": 147,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.addAll",
								"id": 87
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 19,
							"character": 8
						},
						{
							"fileName": "interfaces/list.ts",
							"line": 23,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Collection.addAll",
						"id": 87
					}
				},
				{
					"id": 180,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 181,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements from this collection"
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.clear",
								"id": 90
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 17,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.clear",
						"id": 90
					}
				},
				{
					"id": 182,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 183,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element."
							},
							"parameters": [
								{
									"id": 184,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.contains",
								"id": 92
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 21,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.contains",
						"id": 92
					}
				},
				{
					"id": 185,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 186,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array."
							},
							"parameters": [
								{
									"id": 187,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.containsAll",
								"id": 95
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 25,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.containsAll",
						"id": 95
					}
				},
				{
					"id": 188,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 189,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality."
							},
							"parameters": [
								{
									"id": 190,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.equals",
								"id": 98
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 29,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.equals",
						"id": 98
					}
				},
				{
					"id": 214,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 215,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection."
							},
							"parameters": [
								{
									"id": 216,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 217,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 218,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 219,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 220,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 221,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 61,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterable.forEach",
								"id": 3
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.forEach",
								"id": 124
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 61,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterable.forEach",
						"id": 3
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.forEach",
						"id": 124
					}
				},
				{
					"id": 148,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 149,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read an item from the list"
							},
							"parameters": [
								{
									"id": 150,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 27,
							"character": 5
						}
					]
				},
				{
					"id": 151,
					"name": "indexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 152,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position of first occurrence of the element."
							},
							"parameters": [
								{
									"id": 153,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 31,
							"character": 9
						}
					]
				},
				{
					"id": 191,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 192,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements."
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.isEmpty",
								"id": 101
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 33,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.isEmpty",
						"id": 101
					}
				},
				{
					"id": 222,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 223,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return iterator for this object"
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterable.iterator",
								"id": 11
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 12,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterable.iterator",
						"id": 11
					}
				},
				{
					"id": 154,
					"name": "lastIndexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 155,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position of last occurrence of the element."
							},
							"parameters": [
								{
									"id": 156,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 35,
							"character": 13
						}
					]
				},
				{
					"id": 157,
					"name": "listIterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 158,
							"name": "listIterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list iterator over the elements in this list starting from the 'index'"
							},
							"parameters": [
								{
									"id": 159,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ListIterator",
								"id": 36,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 39,
							"character": 14
						}
					]
				},
				{
					"id": 193,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 194,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present"
							},
							"parameters": [
								{
									"id": 195,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.remove",
								"id": 103
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 37,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.remove",
						"id": 103
					}
				},
				{
					"id": 196,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 197,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array."
							},
							"parameters": [
								{
									"id": 198,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeAll",
								"id": 106
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 41,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeAll",
						"id": 106
					}
				},
				{
					"id": 160,
					"name": "removeAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 161,
							"name": "removeAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the element at the specified position in this list."
							},
							"parameters": [
								{
									"id": 162,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 43,
							"character": 10
						}
					]
				},
				{
					"id": 199,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 200,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function."
							},
							"parameters": [
								{
									"id": 201,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 202,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 203,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 204,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 205,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 206,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 45,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeIf",
								"id": 109
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 45,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeIf",
						"id": 109
					}
				},
				{
					"id": 207,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 208,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array."
							},
							"parameters": [
								{
									"id": 209,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.retainAll",
								"id": 117
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 49,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.retainAll",
						"id": 117
					}
				},
				{
					"id": 178,
					"name": "reverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 179,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverse the list"
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 59,
							"character": 9
						}
					]
				},
				{
					"id": 163,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 164,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces the element at the specified position in this list with the specified element"
							},
							"parameters": [
								{
									"id": 165,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 166,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 47,
							"character": 5
						}
					]
				},
				{
					"id": 210,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 211,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection."
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.size",
								"id": 120
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 53,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.size",
						"id": 120
					}
				},
				{
					"id": 167,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 168,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts this list according to the compareFn"
							},
							"parameters": [
								{
									"id": 169,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 170,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 171,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 172,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 173,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/list.ts",
													"line": 51,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 51,
							"character": 6
						}
					]
				},
				{
					"id": 174,
					"name": "subList",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 175,
							"name": "subList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive."
							},
							"parameters": [
								{
									"id": 176,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 177,
									"name": "toIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"id": 134,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/list.ts",
							"line": 55,
							"character": 9
						}
					]
				},
				{
					"id": 212,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 213,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection"
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.toArray",
								"id": 122
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 57,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.toArray",
						"id": 122
					}
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						136,
						142,
						180,
						182,
						185,
						188,
						214,
						148,
						151,
						191,
						222,
						154,
						157,
						193,
						196,
						160,
						199,
						207,
						178,
						163,
						210,
						167,
						174,
						212
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/list.ts",
					"line": 7,
					"character": 21
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractList",
					"id": 294
				},
				{
					"type": "reference",
					"name": "ArrayList",
					"id": 1170
				},
				{
					"type": "reference",
					"name": "HistoryList",
					"id": 1299
				},
				{
					"type": "reference",
					"name": "SwappableList",
					"id": 1428
				}
			]
		},
		{
			"id": 494,
			"name": "Map",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value."
			},
			"typeParameter": [
				{
					"id": 495,
					"name": "K",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 496,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 497,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 498,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the mappings from this map."
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 18,
							"character": 7
						}
					]
				},
				{
					"id": 499,
					"name": "compute",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 500,
							"name": "compute",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to compute a mapping for the specified key and its current mapped value."
							},
							"parameters": [
								{
									"id": 501,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 502,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 503,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 504,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 505,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 506,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	},
																	{
																		"type": "instrinct",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 507,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 494,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "V"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/map.ts",
													"line": 22,
													"character": 29
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 22,
							"character": 9
						}
					]
				},
				{
					"id": 508,
					"name": "computeIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 509,
							"name": "computeIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map."
							},
							"parameters": [
								{
									"id": 510,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 511,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 512,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 513,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 514,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 515,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	},
																	{
																		"type": "instrinct",
																		"name": "undefined"
																	}
																]
															}
														},
														{
															"id": 516,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 494,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "V"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/map.ts",
													"line": 26,
													"character": 37
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 26,
							"character": 17
						}
					]
				},
				{
					"id": 517,
					"name": "computeIfPresent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 518,
							"name": "computeIfPresent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
							},
							"parameters": [
								{
									"id": 519,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 520,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 521,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 522,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 523,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 524,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 525,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 494,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "V"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/map.ts",
													"line": 30,
													"character": 38
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "null"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 30,
							"character": 18
						}
					]
				},
				{
					"id": 526,
					"name": "containsKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 527,
							"name": "containsKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains a mapping for the specified key."
							},
							"parameters": [
								{
									"id": 528,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 34,
							"character": 13
						}
					]
				},
				{
					"id": 529,
					"name": "containsValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 530,
							"name": "containsValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map maps one or more keys to the specified value."
							},
							"parameters": [
								{
									"id": 531,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 38,
							"character": 15
						}
					]
				},
				{
					"id": 532,
					"name": "entrySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 533,
							"name": "entrySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the mappings contained in this map."
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "reference",
										"name": "MapEntry",
										"id": 489,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 42,
							"character": 10
						}
					]
				},
				{
					"id": 534,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 535,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified map with this map for equality."
							},
							"parameters": [
								{
									"id": 536,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 494,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 46,
							"character": 8
						}
					]
				},
				{
					"id": 537,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 538,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception."
							},
							"parameters": [
								{
									"id": 539,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 540,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 541,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 542,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 543,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	}
																]
															}
														},
														{
															"id": 544,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 494,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/map.ts",
													"line": 50,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 50,
							"character": 9
						}
					]
				},
				{
					"id": 545,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 546,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped. undefined if there is no mapping."
							},
							"parameters": [
								{
									"id": 547,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 54,
							"character": 5
						}
					]
				},
				{
					"id": 548,
					"name": "getOrDefault",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 549,
							"name": "getOrDefault",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key or if key is mapped to null."
							},
							"parameters": [
								{
									"id": 550,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 551,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "V"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 58,
							"character": 14
						}
					]
				},
				{
					"id": 552,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 553,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this map contains no key-value mappings."
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 62,
							"character": 9
						}
					]
				},
				{
					"id": 554,
					"name": "keySet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 555,
							"name": "keySet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Set view of the keys contained in this map."
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "K"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 66,
							"character": 8
						}
					]
				},
				{
					"id": 556,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 557,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Associates the specified value with the specified key in this map.Returns the old value associated with the key or  undefined."
							},
							"parameters": [
								{
									"id": 558,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 559,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 70,
							"character": 5
						}
					]
				},
				{
					"id": 560,
					"name": "putAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 561,
							"name": "putAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies all of the mappings from the specified map to this map."
							},
							"parameters": [
								{
									"id": 562,
									"name": "map",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"id": 494,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 74,
							"character": 8
						}
					]
				},
				{
					"id": 563,
					"name": "putIfAbsent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 564,
							"name": "putIfAbsent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns undefined, else returns the current value."
							},
							"parameters": [
								{
									"id": 565,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 566,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 78,
							"character": 13
						}
					]
				},
				{
					"id": 567,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 568,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the mapping for a key from this map if it is present"
							},
							"parameters": [
								{
									"id": 569,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "V"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 82,
							"character": 8
						}
					]
				},
				{
					"id": 570,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 571,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the entry for the specified key only if it is currently mapped to the specified value."
							},
							"parameters": [
								{
									"id": 572,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								},
								{
									"id": 573,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 86,
							"character": 10
						}
					]
				},
				{
					"id": 574,
					"name": "replace",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 575,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replace all entries with specified value with the new value. Returns true if map was changed."
							},
							"parameters": [
								{
									"id": 576,
									"name": "oldValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								},
								{
									"id": 577,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 90,
							"character": 9
						}
					]
				},
				{
					"id": 578,
					"name": "replaceAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 579,
							"name": "replaceAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception."
							},
							"parameters": [
								{
									"id": 580,
									"name": "remappingFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 581,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 582,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 583,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														},
														{
															"id": 584,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "V"
																	},
																	{
																		"type": "instrinct",
																		"name": "null"
																	}
																]
															}
														},
														{
															"id": 585,
															"name": "map",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Map",
																"id": 494,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "K"
																	},
																	{
																		"type": "typeParameter",
																		"name": "V"
																	}
																]
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "V"
															},
															{
																"type": "instrinct",
																"name": "null"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/map.ts",
													"line": 94,
													"character": 25
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 94,
							"character": 12
						}
					]
				},
				{
					"id": 586,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 587,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of key-value mappings in this map."
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 98,
							"character": 6
						}
					]
				},
				{
					"id": 588,
					"name": "values",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 589,
							"name": "values",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a List view of the values contained in this map."
							},
							"type": {
								"type": "reference",
								"name": "List",
								"id": 134,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "instrinct",
												"name": "null"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 102,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						497,
						499,
						508,
						517,
						526,
						529,
						532,
						534,
						537,
						545,
						548,
						552,
						554,
						556,
						560,
						563,
						567,
						570,
						574,
						578,
						586,
						588
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/map.ts",
					"line": 14,
					"character": 20
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractMap",
					"id": 709
				},
				{
					"type": "reference",
					"name": "ArrayMap",
					"id": 1554
				},
				{
					"type": "reference",
					"name": "Dictionary",
					"id": 1669
				}
			]
		},
		{
			"id": 489,
			"name": "MapEntry",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Used to denote an entry in Map(readonly)."
			},
			"typeParameter": [
				{
					"id": 490,
					"name": "K",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 491,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 492,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 7,
							"character": 14
						}
					],
					"type": {
						"type": "typeParameter",
						"name": "K"
					}
				},
				{
					"id": 493,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/map.ts",
							"line": 8,
							"character": 16
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "typeParameter",
								"name": "V"
							},
							{
								"type": "instrinct",
								"name": "null"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						492,
						493
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/map.ts",
					"line": 6,
					"character": 25
				}
			]
		},
		{
			"id": 854,
			"name": "Queue",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 855,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 856,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 857,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 858,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.add",
								"id": 84
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/queue.ts",
							"line": 4,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Collection.add",
						"id": 84
					}
				},
				{
					"id": 863,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 864,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add all items of an array to collection"
							},
							"parameters": [
								{
									"id": 865,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.addAll",
								"id": 87
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 13,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.addAll",
						"id": 87
					}
				},
				{
					"id": 866,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 867,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements from this collection"
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.clear",
								"id": 90
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 17,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.clear",
						"id": 90
					}
				},
				{
					"id": 868,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 869,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element."
							},
							"parameters": [
								{
									"id": 870,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.contains",
								"id": 92
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 21,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.contains",
						"id": 92
					}
				},
				{
					"id": 871,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 872,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array."
							},
							"parameters": [
								{
									"id": 873,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.containsAll",
								"id": 95
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 25,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.containsAll",
						"id": 95
					}
				},
				{
					"id": 859,
					"name": "element",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 860,
							"name": "element",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/queue.ts",
							"line": 5,
							"character": 9
						}
					]
				},
				{
					"id": 874,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 875,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality."
							},
							"parameters": [
								{
									"id": 876,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.equals",
								"id": 98
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 29,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.equals",
						"id": 98
					}
				},
				{
					"id": 900,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 901,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection."
							},
							"parameters": [
								{
									"id": 902,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 903,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 904,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 905,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 906,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 907,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 61,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterable.forEach",
								"id": 3
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.forEach",
								"id": 124
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 61,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterable.forEach",
						"id": 3
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.forEach",
						"id": 124
					}
				},
				{
					"id": 877,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 878,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements."
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.isEmpty",
								"id": 101
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 33,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.isEmpty",
						"id": 101
					}
				},
				{
					"id": 908,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 909,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return iterator for this object"
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterable.iterator",
								"id": 11
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 12,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterable.iterator",
						"id": 11
					}
				},
				{
					"id": 861,
					"name": "poll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 862,
							"name": "poll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "E"
									},
									{
										"type": "instrinct",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/queue.ts",
							"line": 6,
							"character": 6
						}
					]
				},
				{
					"id": 879,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 880,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present"
							},
							"parameters": [
								{
									"id": 881,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.remove",
								"id": 103
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 37,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.remove",
						"id": 103
					}
				},
				{
					"id": 882,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 883,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array."
							},
							"parameters": [
								{
									"id": 884,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeAll",
								"id": 106
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 41,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeAll",
						"id": 106
					}
				},
				{
					"id": 885,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 886,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function."
							},
							"parameters": [
								{
									"id": 887,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 888,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 889,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 890,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 891,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 892,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 45,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeIf",
								"id": 109
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 45,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeIf",
						"id": 109
					}
				},
				{
					"id": 893,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 894,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array."
							},
							"parameters": [
								{
									"id": 895,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.retainAll",
								"id": 117
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 49,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.retainAll",
						"id": 117
					}
				},
				{
					"id": 896,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 897,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection."
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.size",
								"id": 120
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 53,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.size",
						"id": 120
					}
				},
				{
					"id": 898,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 899,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection"
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.toArray",
								"id": 122
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 57,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.toArray",
						"id": 122
					}
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						856,
						863,
						866,
						868,
						871,
						859,
						874,
						900,
						877,
						908,
						861,
						879,
						882,
						885,
						893,
						896,
						898
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/queue.ts",
					"line": 3,
					"character": 22
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractQueue",
					"id": 910
				},
				{
					"type": "reference",
					"name": "PriorityQueue",
					"id": 1792
				}
			]
		},
		{
			"id": 1156,
			"name": "Serializable",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Implementing this interface means that the class overrides Object's toString method to return the object's JSON String"
			},
			"children": [
				{
					"id": 1163,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1164,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return the Object from the JSON string"
							},
							"parameters": [
								{
									"id": 1165,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 1166,
									"name": "deserializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1167,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1168,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1169,
															"name": "itemJSON",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/serializable.ts",
													"line": 12,
													"character": 41
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/serializable.ts",
							"line": 12,
							"character": 12
						}
					]
				},
				{
					"id": 1157,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1158,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return this object's corresponding JSON String"
							},
							"parameters": [
								{
									"id": 1159,
									"name": "serializerFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1160,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1161,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1162,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/serializable.ts",
													"line": 8,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/serializable.ts",
							"line": 8,
							"character": 10
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1163,
						1157
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/serializable.ts",
					"line": 4,
					"character": 29
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "ArrayList",
					"id": 1170
				},
				{
					"type": "reference",
					"name": "Dictionary",
					"id": 1669
				},
				{
					"type": "reference",
					"name": "HistoryList",
					"id": 1299
				},
				{
					"type": "reference",
					"name": "PriorityQueue",
					"id": 1792
				},
				{
					"type": "reference",
					"name": "SwappableList",
					"id": 1428
				}
			]
		},
		{
			"id": 425,
			"name": "Set",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A collection that contains no duplicate elements"
			},
			"typeParameter": [
				{
					"id": 426,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 427,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 428,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds the specified element to this set if it is not already present"
							},
							"parameters": [
								{
									"id": 429,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.add",
								"id": 84
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 10,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Collection.add",
						"id": 84
					}
				},
				{
					"id": 430,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 431,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds all of the elements in the specified array to this set if they're not already present"
							},
							"parameters": [
								{
									"id": 432,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Collection.addAll",
								"id": 87
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 14,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Collection.addAll",
						"id": 87
					}
				},
				{
					"id": 445,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 446,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements from this collection"
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.clear",
								"id": 90
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 17,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.clear",
						"id": 90
					}
				},
				{
					"id": 447,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 448,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element."
							},
							"parameters": [
								{
									"id": 449,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.contains",
								"id": 92
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 21,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.contains",
						"id": 92
					}
				},
				{
					"id": 450,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 451,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array."
							},
							"parameters": [
								{
									"id": 452,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.containsAll",
								"id": 95
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 25,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.containsAll",
						"id": 95
					}
				},
				{
					"id": 439,
					"name": "difference",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 440,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by subtracting the specified set from this set."
							},
							"parameters": [
								{
									"id": 441,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 425,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 26,
							"character": 12
						}
					]
				},
				{
					"id": 453,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 454,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality."
							},
							"parameters": [
								{
									"id": 455,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.equals",
								"id": 98
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 29,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.equals",
						"id": 98
					}
				},
				{
					"id": 442,
					"name": "exclusion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 443,
							"name": "exclusion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by exclusion of this set and the set specified."
							},
							"parameters": [
								{
									"id": 444,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 425,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 30,
							"character": 11
						}
					]
				},
				{
					"id": 479,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 480,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection."
							},
							"parameters": [
								{
									"id": 481,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 482,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 483,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 484,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 485,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 486,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 61,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterable.forEach",
								"id": 3
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.forEach",
								"id": 124
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 61,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterable.forEach",
						"id": 3
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.forEach",
						"id": 124
					}
				},
				{
					"id": 436,
					"name": "intersection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 437,
							"name": "intersection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by intersection of this set and the set specified"
							},
							"parameters": [
								{
									"id": 438,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 425,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 22,
							"character": 14
						}
					]
				},
				{
					"id": 456,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 457,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements."
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.isEmpty",
								"id": 101
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 33,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.isEmpty",
						"id": 101
					}
				},
				{
					"id": 487,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 488,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return iterator for this object"
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterable.iterator",
								"id": 11
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 12,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterable.iterator",
						"id": 11
					}
				},
				{
					"id": 458,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 459,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present"
							},
							"parameters": [
								{
									"id": 460,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.remove",
								"id": 103
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 37,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.remove",
						"id": 103
					}
				},
				{
					"id": 461,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 462,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array."
							},
							"parameters": [
								{
									"id": 463,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeAll",
								"id": 106
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 41,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeAll",
						"id": 106
					}
				},
				{
					"id": 464,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 465,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function."
							},
							"parameters": [
								{
									"id": 466,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 467,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 468,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 469,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 470,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 471,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 45,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeIf",
								"id": 109
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 45,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeIf",
						"id": 109
					}
				},
				{
					"id": 472,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 473,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array."
							},
							"parameters": [
								{
									"id": 474,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.retainAll",
								"id": 117
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 49,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.retainAll",
						"id": 117
					}
				},
				{
					"id": 475,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 476,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection."
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.size",
								"id": 120
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 53,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.size",
						"id": 120
					}
				},
				{
					"id": 477,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 478,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection"
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.toArray",
								"id": 122
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 57,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.toArray",
						"id": 122
					}
				},
				{
					"id": 433,
					"name": "union",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 434,
							"name": "union",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by union of this set and the set specified"
							},
							"parameters": [
								{
									"id": 435,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 425,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 18,
							"character": 7
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						427,
						430,
						445,
						447,
						450,
						439,
						453,
						442,
						479,
						436,
						456,
						487,
						458,
						461,
						464,
						472,
						475,
						477,
						433
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/set.ts",
					"line": 6,
					"character": 20
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Collection",
					"id": 82,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "SortedSet",
					"id": 970
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractSet",
					"id": 641
				},
				{
					"type": "reference",
					"name": "AbstractSortedSet",
					"id": 1054
				}
			]
		},
		{
			"id": 970,
			"name": "SortedSet",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A Set that further provides a total ordering on its elements. The elements are ordered using the compare function typically provided at sorted set creation time."
			},
			"typeParameter": [
				{
					"id": 971,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 972,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 973,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds the specified element to this set if it is not already present"
							},
							"parameters": [
								{
									"id": 974,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Set.add",
								"id": 427
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 10,
							"character": 5
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Set.add",
						"id": 427
					}
				},
				{
					"id": 975,
					"name": "addAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 976,
							"name": "addAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds all of the elements in the specified array to this set if they're not already present"
							},
							"parameters": [
								{
									"id": 977,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Set.addAll",
								"id": 430
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 14,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Set.addAll",
						"id": 430
					}
				},
				{
					"id": 1010,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1011,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements from this collection"
							},
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.clear",
								"id": 90
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 17,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.clear",
						"id": 90
					}
				},
				{
					"id": 978,
					"name": "comparator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 979,
							"name": "comparator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the compare function used to order the elements in this set"
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 980,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 981,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 982,
													"name": "x",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												},
												{
													"id": 983,
													"name": "y",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "E"
													}
												}
											],
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "interfaces/sorted-set.ts",
											"line": 18,
											"character": 15
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 18,
							"character": 12
						}
					]
				},
				{
					"id": 1012,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1013,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains the specified element."
							},
							"parameters": [
								{
									"id": 1014,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.contains",
								"id": 92
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 21,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.contains",
						"id": 92
					}
				},
				{
					"id": 1015,
					"name": "containsAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1016,
							"name": "containsAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains all of the elements in the specified array."
							},
							"parameters": [
								{
									"id": 1017,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.containsAll",
								"id": 95
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 25,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.containsAll",
						"id": 95
					}
				},
				{
					"id": 1004,
					"name": "difference",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1005,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by subtracting the specified set from this set."
							},
							"parameters": [
								{
									"id": 1006,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 425,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Set.difference",
								"id": 439
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 26,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Set.difference",
						"id": 439
					}
				},
				{
					"id": 1018,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1019,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares the specified object with this collection for equality."
							},
							"parameters": [
								{
									"id": 1020,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 82,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.equals",
								"id": 98
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 29,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.equals",
						"id": 98
					}
				},
				{
					"id": 1007,
					"name": "exclusion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1008,
							"name": "exclusion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by exclusion of this set and the set specified."
							},
							"parameters": [
								{
									"id": 1009,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 425,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Set.exclusion",
								"id": 442
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 30,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Set.exclusion",
						"id": 442
					}
				},
				{
					"id": 984,
					"name": "first",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 985,
							"name": "first",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the first (lowest) element currently in this set."
							},
							"type": {
								"type": "typeParameter",
								"name": "E"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 22,
							"character": 7
						}
					]
				},
				{
					"id": 1044,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1045,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs an action for each item in this collection."
							},
							"parameters": [
								{
									"id": 1046,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1047,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1048,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1049,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1050,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 1051,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 61,
													"character": 17
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Iterable.forEach",
								"id": 3
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.forEach",
								"id": 124
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 61,
							"character": 9
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Iterable.forEach",
						"id": 3
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.forEach",
						"id": 124
					}
				},
				{
					"id": 986,
					"name": "headSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 987,
							"name": "headSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this set whose elements are strictly less than toElement."
							},
							"parameters": [
								{
									"id": 988,
									"name": "toItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SortedSet",
								"id": 970,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 26,
							"character": 9
						}
					]
				},
				{
					"id": 1001,
					"name": "intersection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1002,
							"name": "intersection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by intersection of this set and the set specified"
							},
							"parameters": [
								{
									"id": 1003,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 425,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Set.intersection",
								"id": 436
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 22,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Set.intersection",
						"id": 436
					}
				},
				{
					"id": 1021,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1022,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if this collection contains no elements."
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.isEmpty",
								"id": 101
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 33,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.isEmpty",
						"id": 101
					}
				},
				{
					"id": 1052,
					"name": "iterator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1053,
							"name": "iterator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return iterator for this object"
							},
							"type": {
								"type": "reference",
								"name": "Iterator",
								"id": 13,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Iterable.iterator",
								"id": 11
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/iterable.ts",
							"line": 12,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Iterable.iterator",
						"id": 11
					}
				},
				{
					"id": 989,
					"name": "last",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 990,
							"name": "last",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the last (highest) element currently in this set."
							},
							"type": {
								"type": "typeParameter",
								"name": "E"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 30,
							"character": 6
						}
					]
				},
				{
					"id": 1023,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1024,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a single instance of the specified element from this collection, if it is present"
							},
							"parameters": [
								{
									"id": 1025,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.remove",
								"id": 103
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 37,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.remove",
						"id": 103
					}
				},
				{
					"id": 1026,
					"name": "removeAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1027,
							"name": "removeAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of this collection's elements that are also contained in the specified array."
							},
							"parameters": [
								{
									"id": 1028,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeAll",
								"id": 106
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 41,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeAll",
						"id": 106
					}
				},
				{
					"id": 1029,
					"name": "removeIf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1030,
							"name": "removeIf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes all of the elements of this collection that satisfy the given filter function."
							},
							"parameters": [
								{
									"id": 1031,
									"name": "filterFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1032,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1033,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1034,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "E"
															}
														},
														{
															"id": 1035,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														},
														{
															"id": 1036,
															"name": "collection",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Collection",
																"id": 82,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "E"
																	}
																]
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/collection.ts",
													"line": 45,
													"character": 20
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeIf",
								"id": 109
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 45,
							"character": 10
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.removeIf",
						"id": 109
					}
				},
				{
					"id": 1037,
					"name": "retainAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1038,
							"name": "retainAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retains only the elements in this collection that are contained in the specified array."
							},
							"parameters": [
								{
									"id": 1039,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.retainAll",
								"id": 117
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 49,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.retainAll",
						"id": 117
					}
				},
				{
					"id": 1040,
					"name": "size",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1041,
							"name": "size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of elements in this collection."
							},
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.size",
								"id": 120
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 53,
							"character": 6
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.size",
						"id": 120
					}
				},
				{
					"id": 991,
					"name": "subSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 992,
							"name": "subSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive."
							},
							"parameters": [
								{
									"id": 993,
									"name": "fromItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								},
								{
									"id": 994,
									"name": "toItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SortedSet",
								"id": 970,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 34,
							"character": 8
						}
					]
				},
				{
					"id": 995,
					"name": "tailSet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 996,
							"name": "tailSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a view of the portion of this set whose elements are greater than or equal to fromElement."
							},
							"parameters": [
								{
									"id": 997,
									"name": "fromItem",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SortedSet",
								"id": 970,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/sorted-set.ts",
							"line": 38,
							"character": 9
						}
					]
				},
				{
					"id": 1042,
					"name": "toArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1043,
							"name": "toArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array containing all of the elements in this collection"
							},
							"type": {
								"type": "typeParameter",
								"isArray": true,
								"name": "E"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.toArray",
								"id": 122
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/collection.ts",
							"line": 57,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Collection.toArray",
						"id": 122
					}
				},
				{
					"id": 998,
					"name": "union",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 999,
							"name": "union",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new set created by union of this set and the set specified"
							},
							"parameters": [
								{
									"id": 1000,
									"name": "set",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Set",
										"id": 425,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"id": 425,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Set.union",
								"id": 433
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/set.ts",
							"line": 18,
							"character": 7
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Set.union",
						"id": 433
					}
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						972,
						975,
						1010,
						978,
						1012,
						1015,
						1004,
						1018,
						1007,
						984,
						1044,
						986,
						1001,
						1021,
						1052,
						989,
						1023,
						1026,
						1029,
						1037,
						1040,
						991,
						995,
						1042,
						998
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/sorted-set.ts",
					"line": 6,
					"character": 26
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Set",
					"id": 425,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "E"
						}
					]
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"name": "AbstractSortedSet",
					"id": 1054
				}
			]
		},
		{
			"id": 74,
			"name": "Tree",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A tree is a data structure made up of nodes or vertices and edges without having any cycle."
			},
			"typeParameter": [
				{
					"id": 75,
					"name": "E",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 79,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 80,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete an item from the tree."
							},
							"parameters": [
								{
									"id": 81,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/tree.ts",
							"line": 12,
							"character": 8
						}
					]
				},
				{
					"id": 76,
					"name": "insert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 77,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert a new item to the tree."
							},
							"parameters": [
								{
									"id": 78,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/tree.ts",
							"line": 8,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						79,
						76
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/tree.ts",
					"line": 4,
					"character": 21
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "BinaryTree",
					"id": 224
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				404,
				238,
				812,
				294,
				709,
				910,
				641,
				1054,
				1170,
				1554,
				1899,
				392,
				1669,
				596,
				1299,
				13,
				36,
				1792,
				1881,
				1428,
				590
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				224,
				1152,
				82,
				604,
				1,
				134,
				494,
				489,
				854,
				1156,
				425,
				970,
				74
			]
		}
	]
}